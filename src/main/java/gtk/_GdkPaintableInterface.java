// Generated by jextract

package gtk;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GdkPaintableInterface {
 *     GTypeInterface g_iface;
 *     void (*snapshot)(GdkPaintable*,GdkSnapshot*,double,double);
 *     GdkPaintable* (*get_current_image)(GdkPaintable*);
 *     GdkPaintableFlags (*get_flags)(GdkPaintable*);
 *     int (*get_intrinsic_width)(GdkPaintable*);
 *     int (*get_intrinsic_height)(GdkPaintable*);
 *     double (*get_intrinsic_aspect_ratio)(GdkPaintable*);
 * };
 * }
 */
public class _GdkPaintableInterface {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("g_iface"),
        Constants$root.C_POINTER$LAYOUT.withName("snapshot"),
        Constants$root.C_POINTER$LAYOUT.withName("get_current_image"),
        Constants$root.C_POINTER$LAYOUT.withName("get_flags"),
        Constants$root.C_POINTER$LAYOUT.withName("get_intrinsic_width"),
        Constants$root.C_POINTER$LAYOUT.withName("get_intrinsic_height"),
        Constants$root.C_POINTER$LAYOUT.withName("get_intrinsic_aspect_ratio")
    ).withName("_GdkPaintableInterface");
    public static MemoryLayout $LAYOUT() {
        return _GdkPaintableInterface.$struct$LAYOUT;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor snapshot$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final FunctionDescriptor snapshot_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle snapshot_UP$MH = RuntimeHelper.upcallHandle(snapshot.class, "apply", _GdkPaintableInterface.snapshot_UP$FUNC);
    static final FunctionDescriptor snapshot_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle snapshot_DOWN$MH = RuntimeHelper.downcallHandle(
        _GdkPaintableInterface.snapshot_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*snapshot)(GdkPaintable*,GdkSnapshot*,double,double);
     * }
     */
    public interface snapshot {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, double _x2, double _x3);
        static MemorySegment allocate(snapshot fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GdkPaintableInterface.snapshot_UP$MH, fi, _GdkPaintableInterface.snapshot$FUNC, scope);
        }
        static snapshot ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, double __x2, double __x3) -> {
                try {
                    _GdkPaintableInterface.snapshot_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle snapshot$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("snapshot"));
    public static VarHandle snapshot$VH() {
        return _GdkPaintableInterface.snapshot$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*snapshot)(GdkPaintable*,GdkSnapshot*,double,double);
     * }
     */
    public static MemorySegment snapshot$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GdkPaintableInterface.snapshot$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*snapshot)(GdkPaintable*,GdkSnapshot*,double,double);
     * }
     */
    public static void snapshot$set(MemorySegment seg, MemorySegment x) {
        _GdkPaintableInterface.snapshot$VH.set(seg, x);
    }
    public static MemorySegment snapshot$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GdkPaintableInterface.snapshot$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void snapshot$set(MemorySegment seg, long index, MemorySegment x) {
        _GdkPaintableInterface.snapshot$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static snapshot snapshot(MemorySegment segment, SegmentScope scope) {
        return snapshot.ofAddress(snapshot$get(segment), scope);
    }
    static final FunctionDescriptor get_current_image$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_current_image_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_current_image_UP$MH = RuntimeHelper.upcallHandle(get_current_image.class, "apply", _GdkPaintableInterface.get_current_image_UP$FUNC);
    static final FunctionDescriptor get_current_image_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_current_image_DOWN$MH = RuntimeHelper.downcallHandle(
        _GdkPaintableInterface.get_current_image_DOWN$FUNC
    );
    /**
     * {@snippet :
 * GdkPaintable* (*get_current_image)(GdkPaintable*);
     * }
     */
    public interface get_current_image {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_current_image fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GdkPaintableInterface.get_current_image_UP$MH, fi, _GdkPaintableInterface.get_current_image$FUNC, scope);
        }
        static get_current_image ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_GdkPaintableInterface.get_current_image_DOWN$MH.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_current_image$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_current_image"));
    public static VarHandle get_current_image$VH() {
        return _GdkPaintableInterface.get_current_image$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GdkPaintable* (*get_current_image)(GdkPaintable*);
     * }
     */
    public static MemorySegment get_current_image$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GdkPaintableInterface.get_current_image$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GdkPaintable* (*get_current_image)(GdkPaintable*);
     * }
     */
    public static void get_current_image$set(MemorySegment seg, MemorySegment x) {
        _GdkPaintableInterface.get_current_image$VH.set(seg, x);
    }
    public static MemorySegment get_current_image$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GdkPaintableInterface.get_current_image$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_current_image$set(MemorySegment seg, long index, MemorySegment x) {
        _GdkPaintableInterface.get_current_image$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_current_image get_current_image(MemorySegment segment, SegmentScope scope) {
        return get_current_image.ofAddress(get_current_image$get(segment), scope);
    }
    static final FunctionDescriptor get_flags$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_flags_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_flags_UP$MH = RuntimeHelper.upcallHandle(get_flags.class, "apply", _GdkPaintableInterface.get_flags_UP$FUNC);
    static final FunctionDescriptor get_flags_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_flags_DOWN$MH = RuntimeHelper.downcallHandle(
        _GdkPaintableInterface.get_flags_DOWN$FUNC
    );
    /**
     * {@snippet :
 * GdkPaintableFlags (*get_flags)(GdkPaintable*);
     * }
     */
    public interface get_flags {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(get_flags fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GdkPaintableInterface.get_flags_UP$MH, fi, _GdkPaintableInterface.get_flags$FUNC, scope);
        }
        static get_flags ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)_GdkPaintableInterface.get_flags_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_flags"));
    public static VarHandle get_flags$VH() {
        return _GdkPaintableInterface.get_flags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GdkPaintableFlags (*get_flags)(GdkPaintable*);
     * }
     */
    public static MemorySegment get_flags$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GdkPaintableInterface.get_flags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GdkPaintableFlags (*get_flags)(GdkPaintable*);
     * }
     */
    public static void get_flags$set(MemorySegment seg, MemorySegment x) {
        _GdkPaintableInterface.get_flags$VH.set(seg, x);
    }
    public static MemorySegment get_flags$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GdkPaintableInterface.get_flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_flags$set(MemorySegment seg, long index, MemorySegment x) {
        _GdkPaintableInterface.get_flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_flags get_flags(MemorySegment segment, SegmentScope scope) {
        return get_flags.ofAddress(get_flags$get(segment), scope);
    }
    static final FunctionDescriptor get_intrinsic_width$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_intrinsic_width_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_intrinsic_width_UP$MH = RuntimeHelper.upcallHandle(get_intrinsic_width.class, "apply", _GdkPaintableInterface.get_intrinsic_width_UP$FUNC);
    static final FunctionDescriptor get_intrinsic_width_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_intrinsic_width_DOWN$MH = RuntimeHelper.downcallHandle(
        _GdkPaintableInterface.get_intrinsic_width_DOWN$FUNC
    );
    /**
     * {@snippet :
 * int (*get_intrinsic_width)(GdkPaintable*);
     * }
     */
    public interface get_intrinsic_width {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_intrinsic_width fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GdkPaintableInterface.get_intrinsic_width_UP$MH, fi, _GdkPaintableInterface.get_intrinsic_width$FUNC, scope);
        }
        static get_intrinsic_width ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)_GdkPaintableInterface.get_intrinsic_width_DOWN$MH.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_intrinsic_width$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_intrinsic_width"));
    public static VarHandle get_intrinsic_width$VH() {
        return _GdkPaintableInterface.get_intrinsic_width$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*get_intrinsic_width)(GdkPaintable*);
     * }
     */
    public static MemorySegment get_intrinsic_width$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GdkPaintableInterface.get_intrinsic_width$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*get_intrinsic_width)(GdkPaintable*);
     * }
     */
    public static void get_intrinsic_width$set(MemorySegment seg, MemorySegment x) {
        _GdkPaintableInterface.get_intrinsic_width$VH.set(seg, x);
    }
    public static MemorySegment get_intrinsic_width$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GdkPaintableInterface.get_intrinsic_width$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_intrinsic_width$set(MemorySegment seg, long index, MemorySegment x) {
        _GdkPaintableInterface.get_intrinsic_width$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_intrinsic_width get_intrinsic_width(MemorySegment segment, SegmentScope scope) {
        return get_intrinsic_width.ofAddress(get_intrinsic_width$get(segment), scope);
    }
    static final FunctionDescriptor get_intrinsic_height$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_intrinsic_height_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_intrinsic_height_UP$MH = RuntimeHelper.upcallHandle(get_intrinsic_height.class, "apply", _GdkPaintableInterface.get_intrinsic_height_UP$FUNC);
    static final FunctionDescriptor get_intrinsic_height_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_intrinsic_height_DOWN$MH = RuntimeHelper.downcallHandle(
        _GdkPaintableInterface.get_intrinsic_height_DOWN$FUNC
    );
    /**
     * {@snippet :
 * int (*get_intrinsic_height)(GdkPaintable*);
     * }
     */
    public interface get_intrinsic_height {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_intrinsic_height fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GdkPaintableInterface.get_intrinsic_height_UP$MH, fi, _GdkPaintableInterface.get_intrinsic_height$FUNC, scope);
        }
        static get_intrinsic_height ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)_GdkPaintableInterface.get_intrinsic_height_DOWN$MH.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_intrinsic_height$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_intrinsic_height"));
    public static VarHandle get_intrinsic_height$VH() {
        return _GdkPaintableInterface.get_intrinsic_height$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*get_intrinsic_height)(GdkPaintable*);
     * }
     */
    public static MemorySegment get_intrinsic_height$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GdkPaintableInterface.get_intrinsic_height$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*get_intrinsic_height)(GdkPaintable*);
     * }
     */
    public static void get_intrinsic_height$set(MemorySegment seg, MemorySegment x) {
        _GdkPaintableInterface.get_intrinsic_height$VH.set(seg, x);
    }
    public static MemorySegment get_intrinsic_height$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GdkPaintableInterface.get_intrinsic_height$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_intrinsic_height$set(MemorySegment seg, long index, MemorySegment x) {
        _GdkPaintableInterface.get_intrinsic_height$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_intrinsic_height get_intrinsic_height(MemorySegment segment, SegmentScope scope) {
        return get_intrinsic_height.ofAddress(get_intrinsic_height$get(segment), scope);
    }
    static final FunctionDescriptor get_intrinsic_aspect_ratio$FUNC = FunctionDescriptor.of(Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_intrinsic_aspect_ratio_UP$FUNC = FunctionDescriptor.of(Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_intrinsic_aspect_ratio_UP$MH = RuntimeHelper.upcallHandle(get_intrinsic_aspect_ratio.class, "apply", _GdkPaintableInterface.get_intrinsic_aspect_ratio_UP$FUNC);
    static final FunctionDescriptor get_intrinsic_aspect_ratio_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_intrinsic_aspect_ratio_DOWN$MH = RuntimeHelper.downcallHandle(
        _GdkPaintableInterface.get_intrinsic_aspect_ratio_DOWN$FUNC
    );
    /**
     * {@snippet :
 * double (*get_intrinsic_aspect_ratio)(GdkPaintable*);
     * }
     */
    public interface get_intrinsic_aspect_ratio {

        double apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(get_intrinsic_aspect_ratio fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GdkPaintableInterface.get_intrinsic_aspect_ratio_UP$MH, fi, _GdkPaintableInterface.get_intrinsic_aspect_ratio$FUNC, scope);
        }
        static get_intrinsic_aspect_ratio ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (double)_GdkPaintableInterface.get_intrinsic_aspect_ratio_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_intrinsic_aspect_ratio$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_intrinsic_aspect_ratio"));
    public static VarHandle get_intrinsic_aspect_ratio$VH() {
        return _GdkPaintableInterface.get_intrinsic_aspect_ratio$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double (*get_intrinsic_aspect_ratio)(GdkPaintable*);
     * }
     */
    public static MemorySegment get_intrinsic_aspect_ratio$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GdkPaintableInterface.get_intrinsic_aspect_ratio$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double (*get_intrinsic_aspect_ratio)(GdkPaintable*);
     * }
     */
    public static void get_intrinsic_aspect_ratio$set(MemorySegment seg, MemorySegment x) {
        _GdkPaintableInterface.get_intrinsic_aspect_ratio$VH.set(seg, x);
    }
    public static MemorySegment get_intrinsic_aspect_ratio$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GdkPaintableInterface.get_intrinsic_aspect_ratio$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_intrinsic_aspect_ratio$set(MemorySegment seg, long index, MemorySegment x) {
        _GdkPaintableInterface.get_intrinsic_aspect_ratio$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_intrinsic_aspect_ratio get_intrinsic_aspect_ratio(MemorySegment segment, SegmentScope scope) {
        return get_intrinsic_aspect_ratio.ofAddress(get_intrinsic_aspect_ratio$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


