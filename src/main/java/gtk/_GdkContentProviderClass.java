// Generated by jextract

package gtk;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GdkContentProviderClass {
 *     GObjectClass parent_class;
 *     void (*content_changed)(GdkContentProvider*);
 *     void (*attach_clipboard)(GdkContentProvider*,GdkClipboard*);
 *     void (*detach_clipboard)(GdkContentProvider*,GdkClipboard*);
 *     GdkContentFormats* (*ref_formats)(GdkContentProvider*);
 *     GdkContentFormats* (*ref_storable_formats)(GdkContentProvider*);
 *     void (*write_mime_type_async)(GdkContentProvider*,char*,GOutputStream*,int,GCancellable*,GAsyncReadyCallback,gpointer);
 *     gboolean (*write_mime_type_finish)(GdkContentProvider*,GAsyncResult*,GError**);
 *     gboolean (*get_value)(GdkContentProvider*,GValue*,GError**);
 *     gpointer padding[8];
 * };
 * }
 */
public class _GdkContentProviderClass {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("content_changed"),
        Constants$root.C_POINTER$LAYOUT.withName("attach_clipboard"),
        Constants$root.C_POINTER$LAYOUT.withName("detach_clipboard"),
        Constants$root.C_POINTER$LAYOUT.withName("ref_formats"),
        Constants$root.C_POINTER$LAYOUT.withName("ref_storable_formats"),
        Constants$root.C_POINTER$LAYOUT.withName("write_mime_type_async"),
        Constants$root.C_POINTER$LAYOUT.withName("write_mime_type_finish"),
        Constants$root.C_POINTER$LAYOUT.withName("get_value"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_POINTER$LAYOUT).withName("padding")
    ).withName("_GdkContentProviderClass");
    public static MemoryLayout $LAYOUT() {
        return _GdkContentProviderClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor content_changed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor content_changed_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle content_changed_UP$MH = RuntimeHelper.upcallHandle(content_changed.class, "apply", _GdkContentProviderClass.content_changed_UP$FUNC);
    static final FunctionDescriptor content_changed_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle content_changed_DOWN$MH = RuntimeHelper.downcallHandle(
        _GdkContentProviderClass.content_changed_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*content_changed)(GdkContentProvider*);
     * }
     */
    public interface content_changed {

        void apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(content_changed fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GdkContentProviderClass.content_changed_UP$MH, fi, _GdkContentProviderClass.content_changed$FUNC, scope);
        }
        static content_changed ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    _GdkContentProviderClass.content_changed_DOWN$MH.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle content_changed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("content_changed"));
    public static VarHandle content_changed$VH() {
        return _GdkContentProviderClass.content_changed$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*content_changed)(GdkContentProvider*);
     * }
     */
    public static MemorySegment content_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GdkContentProviderClass.content_changed$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*content_changed)(GdkContentProvider*);
     * }
     */
    public static void content_changed$set(MemorySegment seg, MemorySegment x) {
        _GdkContentProviderClass.content_changed$VH.set(seg, x);
    }
    public static MemorySegment content_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GdkContentProviderClass.content_changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void content_changed$set(MemorySegment seg, long index, MemorySegment x) {
        _GdkContentProviderClass.content_changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static content_changed content_changed(MemorySegment segment, SegmentScope scope) {
        return content_changed.ofAddress(content_changed$get(segment), scope);
    }
    static final FunctionDescriptor attach_clipboard$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor attach_clipboard_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle attach_clipboard_UP$MH = RuntimeHelper.upcallHandle(attach_clipboard.class, "apply", _GdkContentProviderClass.attach_clipboard_UP$FUNC);
    static final FunctionDescriptor attach_clipboard_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle attach_clipboard_DOWN$MH = RuntimeHelper.downcallHandle(
        _GdkContentProviderClass.attach_clipboard_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*attach_clipboard)(GdkContentProvider*,GdkClipboard*);
     * }
     */
    public interface attach_clipboard {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(attach_clipboard fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GdkContentProviderClass.attach_clipboard_UP$MH, fi, _GdkContentProviderClass.attach_clipboard$FUNC, scope);
        }
        static attach_clipboard ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    _GdkContentProviderClass.attach_clipboard_DOWN$MH.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle attach_clipboard$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("attach_clipboard"));
    public static VarHandle attach_clipboard$VH() {
        return _GdkContentProviderClass.attach_clipboard$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*attach_clipboard)(GdkContentProvider*,GdkClipboard*);
     * }
     */
    public static MemorySegment attach_clipboard$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GdkContentProviderClass.attach_clipboard$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*attach_clipboard)(GdkContentProvider*,GdkClipboard*);
     * }
     */
    public static void attach_clipboard$set(MemorySegment seg, MemorySegment x) {
        _GdkContentProviderClass.attach_clipboard$VH.set(seg, x);
    }
    public static MemorySegment attach_clipboard$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GdkContentProviderClass.attach_clipboard$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void attach_clipboard$set(MemorySegment seg, long index, MemorySegment x) {
        _GdkContentProviderClass.attach_clipboard$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static attach_clipboard attach_clipboard(MemorySegment segment, SegmentScope scope) {
        return attach_clipboard.ofAddress(attach_clipboard$get(segment), scope);
    }
    static final FunctionDescriptor detach_clipboard$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor detach_clipboard_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle detach_clipboard_UP$MH = RuntimeHelper.upcallHandle(detach_clipboard.class, "apply", _GdkContentProviderClass.detach_clipboard_UP$FUNC);
    static final FunctionDescriptor detach_clipboard_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle detach_clipboard_DOWN$MH = RuntimeHelper.downcallHandle(
        _GdkContentProviderClass.detach_clipboard_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*detach_clipboard)(GdkContentProvider*,GdkClipboard*);
     * }
     */
    public interface detach_clipboard {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(detach_clipboard fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GdkContentProviderClass.detach_clipboard_UP$MH, fi, _GdkContentProviderClass.detach_clipboard$FUNC, scope);
        }
        static detach_clipboard ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    _GdkContentProviderClass.detach_clipboard_DOWN$MH.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle detach_clipboard$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("detach_clipboard"));
    public static VarHandle detach_clipboard$VH() {
        return _GdkContentProviderClass.detach_clipboard$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*detach_clipboard)(GdkContentProvider*,GdkClipboard*);
     * }
     */
    public static MemorySegment detach_clipboard$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GdkContentProviderClass.detach_clipboard$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*detach_clipboard)(GdkContentProvider*,GdkClipboard*);
     * }
     */
    public static void detach_clipboard$set(MemorySegment seg, MemorySegment x) {
        _GdkContentProviderClass.detach_clipboard$VH.set(seg, x);
    }
    public static MemorySegment detach_clipboard$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GdkContentProviderClass.detach_clipboard$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void detach_clipboard$set(MemorySegment seg, long index, MemorySegment x) {
        _GdkContentProviderClass.detach_clipboard$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static detach_clipboard detach_clipboard(MemorySegment segment, SegmentScope scope) {
        return detach_clipboard.ofAddress(detach_clipboard$get(segment), scope);
    }
    static final FunctionDescriptor ref_formats$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor ref_formats_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ref_formats_UP$MH = RuntimeHelper.upcallHandle(ref_formats.class, "apply", _GdkContentProviderClass.ref_formats_UP$FUNC);
    static final FunctionDescriptor ref_formats_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ref_formats_DOWN$MH = RuntimeHelper.downcallHandle(
        _GdkContentProviderClass.ref_formats_DOWN$FUNC
    );
    /**
     * {@snippet :
 * GdkContentFormats* (*ref_formats)(GdkContentProvider*);
     * }
     */
    public interface ref_formats {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(ref_formats fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GdkContentProviderClass.ref_formats_UP$MH, fi, _GdkContentProviderClass.ref_formats$FUNC, scope);
        }
        static ref_formats ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_GdkContentProviderClass.ref_formats_DOWN$MH.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ref_formats$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ref_formats"));
    public static VarHandle ref_formats$VH() {
        return _GdkContentProviderClass.ref_formats$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GdkContentFormats* (*ref_formats)(GdkContentProvider*);
     * }
     */
    public static MemorySegment ref_formats$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GdkContentProviderClass.ref_formats$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GdkContentFormats* (*ref_formats)(GdkContentProvider*);
     * }
     */
    public static void ref_formats$set(MemorySegment seg, MemorySegment x) {
        _GdkContentProviderClass.ref_formats$VH.set(seg, x);
    }
    public static MemorySegment ref_formats$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GdkContentProviderClass.ref_formats$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ref_formats$set(MemorySegment seg, long index, MemorySegment x) {
        _GdkContentProviderClass.ref_formats$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ref_formats ref_formats(MemorySegment segment, SegmentScope scope) {
        return ref_formats.ofAddress(ref_formats$get(segment), scope);
    }
    static final FunctionDescriptor ref_storable_formats$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor ref_storable_formats_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ref_storable_formats_UP$MH = RuntimeHelper.upcallHandle(ref_storable_formats.class, "apply", _GdkContentProviderClass.ref_storable_formats_UP$FUNC);
    static final FunctionDescriptor ref_storable_formats_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ref_storable_formats_DOWN$MH = RuntimeHelper.downcallHandle(
        _GdkContentProviderClass.ref_storable_formats_DOWN$FUNC
    );
    /**
     * {@snippet :
 * GdkContentFormats* (*ref_storable_formats)(GdkContentProvider*);
     * }
     */
    public interface ref_storable_formats {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(ref_storable_formats fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GdkContentProviderClass.ref_storable_formats_UP$MH, fi, _GdkContentProviderClass.ref_storable_formats$FUNC, scope);
        }
        static ref_storable_formats ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_GdkContentProviderClass.ref_storable_formats_DOWN$MH.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ref_storable_formats$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ref_storable_formats"));
    public static VarHandle ref_storable_formats$VH() {
        return _GdkContentProviderClass.ref_storable_formats$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GdkContentFormats* (*ref_storable_formats)(GdkContentProvider*);
     * }
     */
    public static MemorySegment ref_storable_formats$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GdkContentProviderClass.ref_storable_formats$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GdkContentFormats* (*ref_storable_formats)(GdkContentProvider*);
     * }
     */
    public static void ref_storable_formats$set(MemorySegment seg, MemorySegment x) {
        _GdkContentProviderClass.ref_storable_formats$VH.set(seg, x);
    }
    public static MemorySegment ref_storable_formats$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GdkContentProviderClass.ref_storable_formats$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ref_storable_formats$set(MemorySegment seg, long index, MemorySegment x) {
        _GdkContentProviderClass.ref_storable_formats$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ref_storable_formats ref_storable_formats(MemorySegment segment, SegmentScope scope) {
        return ref_storable_formats.ofAddress(ref_storable_formats$get(segment), scope);
    }
    static final FunctionDescriptor write_mime_type_async$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor write_mime_type_async_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle write_mime_type_async_UP$MH = RuntimeHelper.upcallHandle(write_mime_type_async.class, "apply", _GdkContentProviderClass.write_mime_type_async_UP$FUNC);
    static final FunctionDescriptor write_mime_type_async_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle write_mime_type_async_DOWN$MH = RuntimeHelper.downcallHandle(
        _GdkContentProviderClass.write_mime_type_async_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*write_mime_type_async)(GdkContentProvider*,char*,GOutputStream*,int,GCancellable*,GAsyncReadyCallback,gpointer);
     * }
     */
    public interface write_mime_type_async {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6);
        static MemorySegment allocate(write_mime_type_async fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GdkContentProviderClass.write_mime_type_async_UP$MH, fi, _GdkContentProviderClass.write_mime_type_async$FUNC, scope);
        }
        static write_mime_type_async ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6) -> {
                try {
                    _GdkContentProviderClass.write_mime_type_async_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle write_mime_type_async$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("write_mime_type_async"));
    public static VarHandle write_mime_type_async$VH() {
        return _GdkContentProviderClass.write_mime_type_async$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*write_mime_type_async)(GdkContentProvider*,char*,GOutputStream*,int,GCancellable*,GAsyncReadyCallback,gpointer);
     * }
     */
    public static MemorySegment write_mime_type_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GdkContentProviderClass.write_mime_type_async$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*write_mime_type_async)(GdkContentProvider*,char*,GOutputStream*,int,GCancellable*,GAsyncReadyCallback,gpointer);
     * }
     */
    public static void write_mime_type_async$set(MemorySegment seg, MemorySegment x) {
        _GdkContentProviderClass.write_mime_type_async$VH.set(seg, x);
    }
    public static MemorySegment write_mime_type_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GdkContentProviderClass.write_mime_type_async$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void write_mime_type_async$set(MemorySegment seg, long index, MemorySegment x) {
        _GdkContentProviderClass.write_mime_type_async$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static write_mime_type_async write_mime_type_async(MemorySegment segment, SegmentScope scope) {
        return write_mime_type_async.ofAddress(write_mime_type_async$get(segment), scope);
    }
    static final FunctionDescriptor write_mime_type_finish$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor write_mime_type_finish_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle write_mime_type_finish_UP$MH = RuntimeHelper.upcallHandle(write_mime_type_finish.class, "apply", _GdkContentProviderClass.write_mime_type_finish_UP$FUNC);
    static final FunctionDescriptor write_mime_type_finish_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle write_mime_type_finish_DOWN$MH = RuntimeHelper.downcallHandle(
        _GdkContentProviderClass.write_mime_type_finish_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*write_mime_type_finish)(GdkContentProvider*,GAsyncResult*,GError**);
     * }
     */
    public interface write_mime_type_finish {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(write_mime_type_finish fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GdkContentProviderClass.write_mime_type_finish_UP$MH, fi, _GdkContentProviderClass.write_mime_type_finish$FUNC, scope);
        }
        static write_mime_type_finish ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)_GdkContentProviderClass.write_mime_type_finish_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle write_mime_type_finish$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("write_mime_type_finish"));
    public static VarHandle write_mime_type_finish$VH() {
        return _GdkContentProviderClass.write_mime_type_finish$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*write_mime_type_finish)(GdkContentProvider*,GAsyncResult*,GError**);
     * }
     */
    public static MemorySegment write_mime_type_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GdkContentProviderClass.write_mime_type_finish$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*write_mime_type_finish)(GdkContentProvider*,GAsyncResult*,GError**);
     * }
     */
    public static void write_mime_type_finish$set(MemorySegment seg, MemorySegment x) {
        _GdkContentProviderClass.write_mime_type_finish$VH.set(seg, x);
    }
    public static MemorySegment write_mime_type_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GdkContentProviderClass.write_mime_type_finish$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void write_mime_type_finish$set(MemorySegment seg, long index, MemorySegment x) {
        _GdkContentProviderClass.write_mime_type_finish$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static write_mime_type_finish write_mime_type_finish(MemorySegment segment, SegmentScope scope) {
        return write_mime_type_finish.ofAddress(write_mime_type_finish$get(segment), scope);
    }
    static final FunctionDescriptor get_value$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_value_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_value_UP$MH = RuntimeHelper.upcallHandle(get_value.class, "apply", _GdkContentProviderClass.get_value_UP$FUNC);
    static final FunctionDescriptor get_value_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_value_DOWN$MH = RuntimeHelper.downcallHandle(
        _GdkContentProviderClass.get_value_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*get_value)(GdkContentProvider*,GValue*,GError**);
     * }
     */
    public interface get_value {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(get_value fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GdkContentProviderClass.get_value_UP$MH, fi, _GdkContentProviderClass.get_value$FUNC, scope);
        }
        static get_value ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)_GdkContentProviderClass.get_value_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_value$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_value"));
    public static VarHandle get_value$VH() {
        return _GdkContentProviderClass.get_value$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*get_value)(GdkContentProvider*,GValue*,GError**);
     * }
     */
    public static MemorySegment get_value$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GdkContentProviderClass.get_value$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*get_value)(GdkContentProvider*,GValue*,GError**);
     * }
     */
    public static void get_value$set(MemorySegment seg, MemorySegment x) {
        _GdkContentProviderClass.get_value$VH.set(seg, x);
    }
    public static MemorySegment get_value$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GdkContentProviderClass.get_value$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_value$set(MemorySegment seg, long index, MemorySegment x) {
        _GdkContentProviderClass.get_value$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_value get_value(MemorySegment segment, SegmentScope scope) {
        return get_value.ofAddress(get_value$get(segment), scope);
    }
    public static MemorySegment padding$slice(MemorySegment seg) {
        return seg.asSlice(200, 64);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


