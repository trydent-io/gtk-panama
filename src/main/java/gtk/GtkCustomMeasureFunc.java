// Generated by jextract

package gtk;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * void (*GtkCustomMeasureFunc)(struct _GtkWidget* widget,enum  orientation,int for_size,int* minimum,int* natural,int* minimum_baseline,int* natural_baseline);
 * }
 */
public interface GtkCustomMeasureFunc {

    void apply(java.lang.foreign.MemorySegment widget, int orientation, int for_size, java.lang.foreign.MemorySegment minimum, java.lang.foreign.MemorySegment natural, java.lang.foreign.MemorySegment minimum_baseline, java.lang.foreign.MemorySegment natural_baseline);
    static MemorySegment allocate(GtkCustomMeasureFunc fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$1574.GtkCustomMeasureFunc_UP$MH, fi, constants$1574.GtkCustomMeasureFunc$FUNC, scope);
    }
    static GtkCustomMeasureFunc ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _widget, int _orientation, int _for_size, java.lang.foreign.MemorySegment _minimum, java.lang.foreign.MemorySegment _natural, java.lang.foreign.MemorySegment _minimum_baseline, java.lang.foreign.MemorySegment _natural_baseline) -> {
            try {
                constants$1575.GtkCustomMeasureFunc_DOWN$MH.invokeExact(symbol, _widget, _orientation, _for_size, _minimum, _natural, _minimum_baseline, _natural_baseline);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


