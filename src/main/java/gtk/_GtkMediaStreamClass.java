// Generated by jextract

package gtk;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GtkMediaStreamClass {
 *     GObjectClass parent_class;
 *     gboolean (*play)(GtkMediaStream*);
 *     void (*pause)(GtkMediaStream*);
 *     void (*seek)(GtkMediaStream*,gint64);
 *     void (*update_audio)(GtkMediaStream*,gboolean,double);
 *     void (*realize)(GtkMediaStream*,GdkSurface*);
 *     void (*unrealize)(GtkMediaStream*,GdkSurface*);
 *     void (*_gtk_reserved1)();
 *     void (*_gtk_reserved2)();
 *     void (*_gtk_reserved3)();
 *     void (*_gtk_reserved4)();
 *     void (*_gtk_reserved5)();
 *     void (*_gtk_reserved6)();
 *     void (*_gtk_reserved7)();
 *     void (*_gtk_reserved8)();
 * };
 * }
 */
public class _GtkMediaStreamClass {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("play"),
        Constants$root.C_POINTER$LAYOUT.withName("pause"),
        Constants$root.C_POINTER$LAYOUT.withName("seek"),
        Constants$root.C_POINTER$LAYOUT.withName("update_audio"),
        Constants$root.C_POINTER$LAYOUT.withName("realize"),
        Constants$root.C_POINTER$LAYOUT.withName("unrealize"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved1"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved2"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved3"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved4"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved5"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved6"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved7"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved8")
    ).withName("_GtkMediaStreamClass");
    public static MemoryLayout $LAYOUT() {
        return _GtkMediaStreamClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor play$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor play_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle play_UP$MH = RuntimeHelper.upcallHandle(play.class, "apply", _GtkMediaStreamClass.play_UP$FUNC);
    static final FunctionDescriptor play_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle play_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkMediaStreamClass.play_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*play)(GtkMediaStream*);
     * }
     */
    public interface play {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(play fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkMediaStreamClass.play_UP$MH, fi, _GtkMediaStreamClass.play$FUNC, scope);
        }
        static play ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)_GtkMediaStreamClass.play_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle play$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("play"));
    public static VarHandle play$VH() {
        return _GtkMediaStreamClass.play$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*play)(GtkMediaStream*);
     * }
     */
    public static MemorySegment play$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkMediaStreamClass.play$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*play)(GtkMediaStream*);
     * }
     */
    public static void play$set(MemorySegment seg, MemorySegment x) {
        _GtkMediaStreamClass.play$VH.set(seg, x);
    }
    public static MemorySegment play$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkMediaStreamClass.play$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void play$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkMediaStreamClass.play$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static play play(MemorySegment segment, SegmentScope scope) {
        return play.ofAddress(play$get(segment), scope);
    }
    static final FunctionDescriptor pause$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor pause_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle pause_UP$MH = RuntimeHelper.upcallHandle(pause.class, "apply", _GtkMediaStreamClass.pause_UP$FUNC);
    static final FunctionDescriptor pause_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle pause_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkMediaStreamClass.pause_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*pause)(GtkMediaStream*);
     * }
     */
    public interface pause {

        void apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(pause fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkMediaStreamClass.pause_UP$MH, fi, _GtkMediaStreamClass.pause$FUNC, scope);
        }
        static pause ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    _GtkMediaStreamClass.pause_DOWN$MH.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle pause$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pause"));
    public static VarHandle pause$VH() {
        return _GtkMediaStreamClass.pause$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*pause)(GtkMediaStream*);
     * }
     */
    public static MemorySegment pause$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkMediaStreamClass.pause$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*pause)(GtkMediaStream*);
     * }
     */
    public static void pause$set(MemorySegment seg, MemorySegment x) {
        _GtkMediaStreamClass.pause$VH.set(seg, x);
    }
    public static MemorySegment pause$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkMediaStreamClass.pause$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pause$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkMediaStreamClass.pause$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static pause pause(MemorySegment segment, SegmentScope scope) {
        return pause.ofAddress(pause$get(segment), scope);
    }
    static final FunctionDescriptor seek$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final FunctionDescriptor seek_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle seek_UP$MH = RuntimeHelper.upcallHandle(seek.class, "apply", _GtkMediaStreamClass.seek_UP$FUNC);
    static final FunctionDescriptor seek_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle seek_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkMediaStreamClass.seek_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*seek)(GtkMediaStream*,gint64);
     * }
     */
    public interface seek {

        void apply(java.lang.foreign.MemorySegment _x0, long _x1);
        static MemorySegment allocate(seek fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkMediaStreamClass.seek_UP$MH, fi, _GtkMediaStreamClass.seek$FUNC, scope);
        }
        static seek ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, long __x1) -> {
                try {
                    _GtkMediaStreamClass.seek_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle seek$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("seek"));
    public static VarHandle seek$VH() {
        return _GtkMediaStreamClass.seek$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*seek)(GtkMediaStream*,gint64);
     * }
     */
    public static MemorySegment seek$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkMediaStreamClass.seek$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*seek)(GtkMediaStream*,gint64);
     * }
     */
    public static void seek$set(MemorySegment seg, MemorySegment x) {
        _GtkMediaStreamClass.seek$VH.set(seg, x);
    }
    public static MemorySegment seek$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkMediaStreamClass.seek$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void seek$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkMediaStreamClass.seek$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static seek seek(MemorySegment segment, SegmentScope scope) {
        return seek.ofAddress(seek$get(segment), scope);
    }
    static final FunctionDescriptor update_audio$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final FunctionDescriptor update_audio_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle update_audio_UP$MH = RuntimeHelper.upcallHandle(update_audio.class, "apply", _GtkMediaStreamClass.update_audio_UP$FUNC);
    static final FunctionDescriptor update_audio_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle update_audio_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkMediaStreamClass.update_audio_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*update_audio)(GtkMediaStream*,gboolean,double);
     * }
     */
    public interface update_audio {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, double _x2);
        static MemorySegment allocate(update_audio fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkMediaStreamClass.update_audio_UP$MH, fi, _GtkMediaStreamClass.update_audio$FUNC, scope);
        }
        static update_audio ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, double __x2) -> {
                try {
                    _GtkMediaStreamClass.update_audio_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle update_audio$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("update_audio"));
    public static VarHandle update_audio$VH() {
        return _GtkMediaStreamClass.update_audio$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*update_audio)(GtkMediaStream*,gboolean,double);
     * }
     */
    public static MemorySegment update_audio$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkMediaStreamClass.update_audio$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*update_audio)(GtkMediaStream*,gboolean,double);
     * }
     */
    public static void update_audio$set(MemorySegment seg, MemorySegment x) {
        _GtkMediaStreamClass.update_audio$VH.set(seg, x);
    }
    public static MemorySegment update_audio$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkMediaStreamClass.update_audio$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void update_audio$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkMediaStreamClass.update_audio$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static update_audio update_audio(MemorySegment segment, SegmentScope scope) {
        return update_audio.ofAddress(update_audio$get(segment), scope);
    }
    static final FunctionDescriptor realize$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor realize_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle realize_UP$MH = RuntimeHelper.upcallHandle(realize.class, "apply", _GtkMediaStreamClass.realize_UP$FUNC);
    static final FunctionDescriptor realize_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle realize_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkMediaStreamClass.realize_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*realize)(GtkMediaStream*,GdkSurface*);
     * }
     */
    public interface realize {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(realize fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkMediaStreamClass.realize_UP$MH, fi, _GtkMediaStreamClass.realize$FUNC, scope);
        }
        static realize ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    _GtkMediaStreamClass.realize_DOWN$MH.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle realize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("realize"));
    public static VarHandle realize$VH() {
        return _GtkMediaStreamClass.realize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*realize)(GtkMediaStream*,GdkSurface*);
     * }
     */
    public static MemorySegment realize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkMediaStreamClass.realize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*realize)(GtkMediaStream*,GdkSurface*);
     * }
     */
    public static void realize$set(MemorySegment seg, MemorySegment x) {
        _GtkMediaStreamClass.realize$VH.set(seg, x);
    }
    public static MemorySegment realize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkMediaStreamClass.realize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void realize$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkMediaStreamClass.realize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static realize realize(MemorySegment segment, SegmentScope scope) {
        return realize.ofAddress(realize$get(segment), scope);
    }
    static final FunctionDescriptor unrealize$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor unrealize_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle unrealize_UP$MH = RuntimeHelper.upcallHandle(unrealize.class, "apply", _GtkMediaStreamClass.unrealize_UP$FUNC);
    static final FunctionDescriptor unrealize_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle unrealize_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkMediaStreamClass.unrealize_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*unrealize)(GtkMediaStream*,GdkSurface*);
     * }
     */
    public interface unrealize {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(unrealize fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkMediaStreamClass.unrealize_UP$MH, fi, _GtkMediaStreamClass.unrealize$FUNC, scope);
        }
        static unrealize ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    _GtkMediaStreamClass.unrealize_DOWN$MH.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle unrealize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("unrealize"));
    public static VarHandle unrealize$VH() {
        return _GtkMediaStreamClass.unrealize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*unrealize)(GtkMediaStream*,GdkSurface*);
     * }
     */
    public static MemorySegment unrealize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkMediaStreamClass.unrealize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*unrealize)(GtkMediaStream*,GdkSurface*);
     * }
     */
    public static void unrealize$set(MemorySegment seg, MemorySegment x) {
        _GtkMediaStreamClass.unrealize$VH.set(seg, x);
    }
    public static MemorySegment unrealize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkMediaStreamClass.unrealize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void unrealize$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkMediaStreamClass.unrealize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static unrealize unrealize(MemorySegment segment, SegmentScope scope) {
        return unrealize.ofAddress(unrealize$get(segment), scope);
    }
    static final FunctionDescriptor _gtk_reserved1$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _gtk_reserved1_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved1_UP$MH = RuntimeHelper.upcallHandle(_gtk_reserved1.class, "apply", _GtkMediaStreamClass._gtk_reserved1_UP$FUNC);
    static final FunctionDescriptor _gtk_reserved1_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved1_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkMediaStreamClass._gtk_reserved1_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_gtk_reserved1)();
     * }
     */
    public interface _gtk_reserved1 {

        void apply();
        static MemorySegment allocate(_gtk_reserved1 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkMediaStreamClass._gtk_reserved1_UP$MH, fi, _GtkMediaStreamClass._gtk_reserved1$FUNC, scope);
        }
        static _gtk_reserved1 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GtkMediaStreamClass._gtk_reserved1_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved1"));
    public static VarHandle _gtk_reserved1$VH() {
        return _GtkMediaStreamClass._gtk_reserved1$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkMediaStreamClass._gtk_reserved1$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static void _gtk_reserved1$set(MemorySegment seg, MemorySegment x) {
        _GtkMediaStreamClass._gtk_reserved1$VH.set(seg, x);
    }
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkMediaStreamClass._gtk_reserved1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved1$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkMediaStreamClass._gtk_reserved1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved1 _gtk_reserved1(MemorySegment segment, SegmentScope scope) {
        return _gtk_reserved1.ofAddress(_gtk_reserved1$get(segment), scope);
    }
    static final FunctionDescriptor _gtk_reserved2$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _gtk_reserved2_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved2_UP$MH = RuntimeHelper.upcallHandle(_gtk_reserved2.class, "apply", _GtkMediaStreamClass._gtk_reserved2_UP$FUNC);
    static final FunctionDescriptor _gtk_reserved2_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved2_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkMediaStreamClass._gtk_reserved2_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_gtk_reserved2)();
     * }
     */
    public interface _gtk_reserved2 {

        void apply();
        static MemorySegment allocate(_gtk_reserved2 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkMediaStreamClass._gtk_reserved2_UP$MH, fi, _GtkMediaStreamClass._gtk_reserved2$FUNC, scope);
        }
        static _gtk_reserved2 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GtkMediaStreamClass._gtk_reserved2_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved2"));
    public static VarHandle _gtk_reserved2$VH() {
        return _GtkMediaStreamClass._gtk_reserved2$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkMediaStreamClass._gtk_reserved2$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static void _gtk_reserved2$set(MemorySegment seg, MemorySegment x) {
        _GtkMediaStreamClass._gtk_reserved2$VH.set(seg, x);
    }
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkMediaStreamClass._gtk_reserved2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved2$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkMediaStreamClass._gtk_reserved2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved2 _gtk_reserved2(MemorySegment segment, SegmentScope scope) {
        return _gtk_reserved2.ofAddress(_gtk_reserved2$get(segment), scope);
    }
    static final FunctionDescriptor _gtk_reserved3$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _gtk_reserved3_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved3_UP$MH = RuntimeHelper.upcallHandle(_gtk_reserved3.class, "apply", _GtkMediaStreamClass._gtk_reserved3_UP$FUNC);
    static final FunctionDescriptor _gtk_reserved3_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved3_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkMediaStreamClass._gtk_reserved3_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_gtk_reserved3)();
     * }
     */
    public interface _gtk_reserved3 {

        void apply();
        static MemorySegment allocate(_gtk_reserved3 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkMediaStreamClass._gtk_reserved3_UP$MH, fi, _GtkMediaStreamClass._gtk_reserved3$FUNC, scope);
        }
        static _gtk_reserved3 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GtkMediaStreamClass._gtk_reserved3_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved3$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved3"));
    public static VarHandle _gtk_reserved3$VH() {
        return _GtkMediaStreamClass._gtk_reserved3$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkMediaStreamClass._gtk_reserved3$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static void _gtk_reserved3$set(MemorySegment seg, MemorySegment x) {
        _GtkMediaStreamClass._gtk_reserved3$VH.set(seg, x);
    }
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkMediaStreamClass._gtk_reserved3$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved3$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkMediaStreamClass._gtk_reserved3$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved3 _gtk_reserved3(MemorySegment segment, SegmentScope scope) {
        return _gtk_reserved3.ofAddress(_gtk_reserved3$get(segment), scope);
    }
    static final FunctionDescriptor _gtk_reserved4$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _gtk_reserved4_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved4_UP$MH = RuntimeHelper.upcallHandle(_gtk_reserved4.class, "apply", _GtkMediaStreamClass._gtk_reserved4_UP$FUNC);
    static final FunctionDescriptor _gtk_reserved4_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved4_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkMediaStreamClass._gtk_reserved4_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_gtk_reserved4)();
     * }
     */
    public interface _gtk_reserved4 {

        void apply();
        static MemorySegment allocate(_gtk_reserved4 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkMediaStreamClass._gtk_reserved4_UP$MH, fi, _GtkMediaStreamClass._gtk_reserved4$FUNC, scope);
        }
        static _gtk_reserved4 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GtkMediaStreamClass._gtk_reserved4_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved4$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved4"));
    public static VarHandle _gtk_reserved4$VH() {
        return _GtkMediaStreamClass._gtk_reserved4$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkMediaStreamClass._gtk_reserved4$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static void _gtk_reserved4$set(MemorySegment seg, MemorySegment x) {
        _GtkMediaStreamClass._gtk_reserved4$VH.set(seg, x);
    }
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkMediaStreamClass._gtk_reserved4$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved4$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkMediaStreamClass._gtk_reserved4$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved4 _gtk_reserved4(MemorySegment segment, SegmentScope scope) {
        return _gtk_reserved4.ofAddress(_gtk_reserved4$get(segment), scope);
    }
    static final FunctionDescriptor _gtk_reserved5$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _gtk_reserved5_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved5_UP$MH = RuntimeHelper.upcallHandle(_gtk_reserved5.class, "apply", _GtkMediaStreamClass._gtk_reserved5_UP$FUNC);
    static final FunctionDescriptor _gtk_reserved5_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved5_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkMediaStreamClass._gtk_reserved5_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_gtk_reserved5)();
     * }
     */
    public interface _gtk_reserved5 {

        void apply();
        static MemorySegment allocate(_gtk_reserved5 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkMediaStreamClass._gtk_reserved5_UP$MH, fi, _GtkMediaStreamClass._gtk_reserved5$FUNC, scope);
        }
        static _gtk_reserved5 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GtkMediaStreamClass._gtk_reserved5_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved5$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved5"));
    public static VarHandle _gtk_reserved5$VH() {
        return _GtkMediaStreamClass._gtk_reserved5$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved5)();
     * }
     */
    public static MemorySegment _gtk_reserved5$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkMediaStreamClass._gtk_reserved5$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved5)();
     * }
     */
    public static void _gtk_reserved5$set(MemorySegment seg, MemorySegment x) {
        _GtkMediaStreamClass._gtk_reserved5$VH.set(seg, x);
    }
    public static MemorySegment _gtk_reserved5$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkMediaStreamClass._gtk_reserved5$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved5$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkMediaStreamClass._gtk_reserved5$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved5 _gtk_reserved5(MemorySegment segment, SegmentScope scope) {
        return _gtk_reserved5.ofAddress(_gtk_reserved5$get(segment), scope);
    }
    static final FunctionDescriptor _gtk_reserved6$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _gtk_reserved6_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved6_UP$MH = RuntimeHelper.upcallHandle(_gtk_reserved6.class, "apply", _GtkMediaStreamClass._gtk_reserved6_UP$FUNC);
    static final FunctionDescriptor _gtk_reserved6_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved6_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkMediaStreamClass._gtk_reserved6_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_gtk_reserved6)();
     * }
     */
    public interface _gtk_reserved6 {

        void apply();
        static MemorySegment allocate(_gtk_reserved6 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkMediaStreamClass._gtk_reserved6_UP$MH, fi, _GtkMediaStreamClass._gtk_reserved6$FUNC, scope);
        }
        static _gtk_reserved6 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GtkMediaStreamClass._gtk_reserved6_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved6$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved6"));
    public static VarHandle _gtk_reserved6$VH() {
        return _GtkMediaStreamClass._gtk_reserved6$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved6)();
     * }
     */
    public static MemorySegment _gtk_reserved6$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkMediaStreamClass._gtk_reserved6$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved6)();
     * }
     */
    public static void _gtk_reserved6$set(MemorySegment seg, MemorySegment x) {
        _GtkMediaStreamClass._gtk_reserved6$VH.set(seg, x);
    }
    public static MemorySegment _gtk_reserved6$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkMediaStreamClass._gtk_reserved6$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved6$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkMediaStreamClass._gtk_reserved6$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved6 _gtk_reserved6(MemorySegment segment, SegmentScope scope) {
        return _gtk_reserved6.ofAddress(_gtk_reserved6$get(segment), scope);
    }
    static final FunctionDescriptor _gtk_reserved7$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _gtk_reserved7_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved7_UP$MH = RuntimeHelper.upcallHandle(_gtk_reserved7.class, "apply", _GtkMediaStreamClass._gtk_reserved7_UP$FUNC);
    static final FunctionDescriptor _gtk_reserved7_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved7_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkMediaStreamClass._gtk_reserved7_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_gtk_reserved7)();
     * }
     */
    public interface _gtk_reserved7 {

        void apply();
        static MemorySegment allocate(_gtk_reserved7 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkMediaStreamClass._gtk_reserved7_UP$MH, fi, _GtkMediaStreamClass._gtk_reserved7$FUNC, scope);
        }
        static _gtk_reserved7 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GtkMediaStreamClass._gtk_reserved7_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved7$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved7"));
    public static VarHandle _gtk_reserved7$VH() {
        return _GtkMediaStreamClass._gtk_reserved7$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved7)();
     * }
     */
    public static MemorySegment _gtk_reserved7$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkMediaStreamClass._gtk_reserved7$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved7)();
     * }
     */
    public static void _gtk_reserved7$set(MemorySegment seg, MemorySegment x) {
        _GtkMediaStreamClass._gtk_reserved7$VH.set(seg, x);
    }
    public static MemorySegment _gtk_reserved7$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkMediaStreamClass._gtk_reserved7$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved7$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkMediaStreamClass._gtk_reserved7$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved7 _gtk_reserved7(MemorySegment segment, SegmentScope scope) {
        return _gtk_reserved7.ofAddress(_gtk_reserved7$get(segment), scope);
    }
    static final FunctionDescriptor _gtk_reserved8$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _gtk_reserved8_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved8_UP$MH = RuntimeHelper.upcallHandle(_gtk_reserved8.class, "apply", _GtkMediaStreamClass._gtk_reserved8_UP$FUNC);
    static final FunctionDescriptor _gtk_reserved8_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved8_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkMediaStreamClass._gtk_reserved8_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_gtk_reserved8)();
     * }
     */
    public interface _gtk_reserved8 {

        void apply();
        static MemorySegment allocate(_gtk_reserved8 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkMediaStreamClass._gtk_reserved8_UP$MH, fi, _GtkMediaStreamClass._gtk_reserved8$FUNC, scope);
        }
        static _gtk_reserved8 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GtkMediaStreamClass._gtk_reserved8_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved8$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved8"));
    public static VarHandle _gtk_reserved8$VH() {
        return _GtkMediaStreamClass._gtk_reserved8$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved8)();
     * }
     */
    public static MemorySegment _gtk_reserved8$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkMediaStreamClass._gtk_reserved8$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved8)();
     * }
     */
    public static void _gtk_reserved8$set(MemorySegment seg, MemorySegment x) {
        _GtkMediaStreamClass._gtk_reserved8$VH.set(seg, x);
    }
    public static MemorySegment _gtk_reserved8$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkMediaStreamClass._gtk_reserved8$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved8$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkMediaStreamClass._gtk_reserved8$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved8 _gtk_reserved8(MemorySegment segment, SegmentScope scope) {
        return _gtk_reserved8.ofAddress(_gtk_reserved8$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


