// Generated by jextract

package gtk;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GtkBuilderScopeInterface {
 *     GTypeInterface g_iface;
 *     GType (*get_type_from_name)(GtkBuilderScope*,GtkBuilder*,char*);
 *     GType (*get_type_from_function)(GtkBuilderScope*,GtkBuilder*,char*);
 *     GClosure* (*create_closure)(GtkBuilderScope*,GtkBuilder*,char*,GtkBuilderClosureFlags,GObject*,GError**);
 * };
 * }
 */
public class _GtkBuilderScopeInterface {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("g_iface"),
        Constants$root.C_POINTER$LAYOUT.withName("get_type_from_name"),
        Constants$root.C_POINTER$LAYOUT.withName("get_type_from_function"),
        Constants$root.C_POINTER$LAYOUT.withName("create_closure")
    ).withName("_GtkBuilderScopeInterface");
    public static MemoryLayout $LAYOUT() {
        return _GtkBuilderScopeInterface.$struct$LAYOUT;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor get_type_from_name$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_type_from_name_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_type_from_name_UP$MH = RuntimeHelper.upcallHandle(get_type_from_name.class, "apply", _GtkBuilderScopeInterface.get_type_from_name_UP$FUNC);
    static final FunctionDescriptor get_type_from_name_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_type_from_name_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkBuilderScopeInterface.get_type_from_name_DOWN$FUNC
    );
    /**
     * {@snippet :
 * GType (*get_type_from_name)(GtkBuilderScope*,GtkBuilder*,char*);
     * }
     */
    public interface get_type_from_name {

        long apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(get_type_from_name fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkBuilderScopeInterface.get_type_from_name_UP$MH, fi, _GtkBuilderScopeInterface.get_type_from_name$FUNC, scope);
        }
        static get_type_from_name ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (long)_GtkBuilderScopeInterface.get_type_from_name_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_type_from_name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_type_from_name"));
    public static VarHandle get_type_from_name$VH() {
        return _GtkBuilderScopeInterface.get_type_from_name$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GType (*get_type_from_name)(GtkBuilderScope*,GtkBuilder*,char*);
     * }
     */
    public static MemorySegment get_type_from_name$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkBuilderScopeInterface.get_type_from_name$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GType (*get_type_from_name)(GtkBuilderScope*,GtkBuilder*,char*);
     * }
     */
    public static void get_type_from_name$set(MemorySegment seg, MemorySegment x) {
        _GtkBuilderScopeInterface.get_type_from_name$VH.set(seg, x);
    }
    public static MemorySegment get_type_from_name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkBuilderScopeInterface.get_type_from_name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_type_from_name$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkBuilderScopeInterface.get_type_from_name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_type_from_name get_type_from_name(MemorySegment segment, SegmentScope scope) {
        return get_type_from_name.ofAddress(get_type_from_name$get(segment), scope);
    }
    static final FunctionDescriptor get_type_from_function$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_type_from_function_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_type_from_function_UP$MH = RuntimeHelper.upcallHandle(get_type_from_function.class, "apply", _GtkBuilderScopeInterface.get_type_from_function_UP$FUNC);
    static final FunctionDescriptor get_type_from_function_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_type_from_function_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkBuilderScopeInterface.get_type_from_function_DOWN$FUNC
    );
    /**
     * {@snippet :
 * GType (*get_type_from_function)(GtkBuilderScope*,GtkBuilder*,char*);
     * }
     */
    public interface get_type_from_function {

        long apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(get_type_from_function fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkBuilderScopeInterface.get_type_from_function_UP$MH, fi, _GtkBuilderScopeInterface.get_type_from_function$FUNC, scope);
        }
        static get_type_from_function ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (long)_GtkBuilderScopeInterface.get_type_from_function_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_type_from_function$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_type_from_function"));
    public static VarHandle get_type_from_function$VH() {
        return _GtkBuilderScopeInterface.get_type_from_function$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GType (*get_type_from_function)(GtkBuilderScope*,GtkBuilder*,char*);
     * }
     */
    public static MemorySegment get_type_from_function$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkBuilderScopeInterface.get_type_from_function$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GType (*get_type_from_function)(GtkBuilderScope*,GtkBuilder*,char*);
     * }
     */
    public static void get_type_from_function$set(MemorySegment seg, MemorySegment x) {
        _GtkBuilderScopeInterface.get_type_from_function$VH.set(seg, x);
    }
    public static MemorySegment get_type_from_function$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkBuilderScopeInterface.get_type_from_function$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_type_from_function$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkBuilderScopeInterface.get_type_from_function$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_type_from_function get_type_from_function(MemorySegment segment, SegmentScope scope) {
        return get_type_from_function.ofAddress(get_type_from_function$get(segment), scope);
    }
    static final FunctionDescriptor create_closure$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor create_closure_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle create_closure_UP$MH = RuntimeHelper.upcallHandle(create_closure.class, "apply", _GtkBuilderScopeInterface.create_closure_UP$FUNC);
    static final FunctionDescriptor create_closure_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle create_closure_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkBuilderScopeInterface.create_closure_DOWN$FUNC
    );
    /**
     * {@snippet :
 * GClosure* (*create_closure)(GtkBuilderScope*,GtkBuilder*,char*,GtkBuilderClosureFlags,GObject*,GError**);
     * }
     */
    public interface create_closure {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(create_closure fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkBuilderScopeInterface.create_closure_UP$MH, fi, _GtkBuilderScopeInterface.create_closure$FUNC, scope);
        }
        static create_closure ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_GtkBuilderScopeInterface.create_closure_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle create_closure$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("create_closure"));
    public static VarHandle create_closure$VH() {
        return _GtkBuilderScopeInterface.create_closure$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GClosure* (*create_closure)(GtkBuilderScope*,GtkBuilder*,char*,GtkBuilderClosureFlags,GObject*,GError**);
     * }
     */
    public static MemorySegment create_closure$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkBuilderScopeInterface.create_closure$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GClosure* (*create_closure)(GtkBuilderScope*,GtkBuilder*,char*,GtkBuilderClosureFlags,GObject*,GError**);
     * }
     */
    public static void create_closure$set(MemorySegment seg, MemorySegment x) {
        _GtkBuilderScopeInterface.create_closure$VH.set(seg, x);
    }
    public static MemorySegment create_closure$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkBuilderScopeInterface.create_closure$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void create_closure$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkBuilderScopeInterface.create_closure$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static create_closure create_closure(MemorySegment segment, SegmentScope scope) {
        return create_closure.ofAddress(create_closure$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


