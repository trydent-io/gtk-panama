// Generated by jextract

package gtk;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class gtk_h_13 extends gtk_h_12 {

    public static MethodHandle gdk_pango_layout_line_get_clip_region$MH() {
        return RuntimeHelper.requireNonNull(constants$1138.gdk_pango_layout_line_get_clip_region$MH,"gdk_pango_layout_line_get_clip_region");
    }
    /**
     * {@snippet :
     * cairo_region_t* gdk_pango_layout_line_get_clip_region(PangoLayoutLine* line, int x_origin, int y_origin, int* index_ranges, int n_ranges);
     * }
     */
    public static MemorySegment gdk_pango_layout_line_get_clip_region(MemorySegment line, int x_origin, int y_origin, MemorySegment index_ranges, int n_ranges) {
        var mh$ = gdk_pango_layout_line_get_clip_region$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(line, x_origin, y_origin, index_ranges, n_ranges);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_pango_layout_get_clip_region$MH() {
        return RuntimeHelper.requireNonNull(constants$1138.gdk_pango_layout_get_clip_region$MH,"gdk_pango_layout_get_clip_region");
    }
    /**
     * {@snippet :
     * cairo_region_t* gdk_pango_layout_get_clip_region(PangoLayout* layout, int x_origin, int y_origin, int* index_ranges, int n_ranges);
     * }
     */
    public static MemorySegment gdk_pango_layout_get_clip_region(MemorySegment layout, int x_origin, int y_origin, MemorySegment index_ranges, int n_ranges) {
        var mh$ = gdk_pango_layout_get_clip_region$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(layout, x_origin, y_origin, index_ranges, n_ranges);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_popup_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1138.gdk_popup_get_type$MH,"gdk_popup_get_type");
    }
    /**
     * {@snippet :
     * GType gdk_popup_get_type();
     * }
     */
    public static long gdk_popup_get_type() {
        var mh$ = gdk_popup_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _GdkPopup* GdkPopup_autoptr;
     * }
     */
    public static final OfAddress GdkPopup_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GdkPopup_listautoptr;
     * }
     */
    public static final OfAddress GdkPopup_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GdkPopup_slistautoptr;
     * }
     */
    public static final OfAddress GdkPopup_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GdkPopup_queueautoptr;
     * }
     */
    public static final OfAddress GdkPopup_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle gdk_popup_present$MH() {
        return RuntimeHelper.requireNonNull(constants$1138.gdk_popup_present$MH,"gdk_popup_present");
    }
    /**
     * {@snippet :
     * gboolean gdk_popup_present(GdkPopup* popup, int width, int height, GdkPopupLayout* layout);
     * }
     */
    public static int gdk_popup_present(MemorySegment popup, int width, int height, MemorySegment layout) {
        var mh$ = gdk_popup_present$MH();
        try {
            return (int)mh$.invokeExact(popup, width, height, layout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_popup_get_surface_anchor$MH() {
        return RuntimeHelper.requireNonNull(constants$1138.gdk_popup_get_surface_anchor$MH,"gdk_popup_get_surface_anchor");
    }
    /**
     * {@snippet :
     * GdkGravity gdk_popup_get_surface_anchor(GdkPopup* popup);
     * }
     */
    public static int gdk_popup_get_surface_anchor(MemorySegment popup) {
        var mh$ = gdk_popup_get_surface_anchor$MH();
        try {
            return (int)mh$.invokeExact(popup);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_popup_get_rect_anchor$MH() {
        return RuntimeHelper.requireNonNull(constants$1139.gdk_popup_get_rect_anchor$MH,"gdk_popup_get_rect_anchor");
    }
    /**
     * {@snippet :
     * GdkGravity gdk_popup_get_rect_anchor(GdkPopup* popup);
     * }
     */
    public static int gdk_popup_get_rect_anchor(MemorySegment popup) {
        var mh$ = gdk_popup_get_rect_anchor$MH();
        try {
            return (int)mh$.invokeExact(popup);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_popup_get_parent$MH() {
        return RuntimeHelper.requireNonNull(constants$1139.gdk_popup_get_parent$MH,"gdk_popup_get_parent");
    }
    /**
     * {@snippet :
     * GdkSurface* gdk_popup_get_parent(GdkPopup* popup);
     * }
     */
    public static MemorySegment gdk_popup_get_parent(MemorySegment popup) {
        var mh$ = gdk_popup_get_parent$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(popup);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_popup_get_position_x$MH() {
        return RuntimeHelper.requireNonNull(constants$1139.gdk_popup_get_position_x$MH,"gdk_popup_get_position_x");
    }
    /**
     * {@snippet :
     * int gdk_popup_get_position_x(GdkPopup* popup);
     * }
     */
    public static int gdk_popup_get_position_x(MemorySegment popup) {
        var mh$ = gdk_popup_get_position_x$MH();
        try {
            return (int)mh$.invokeExact(popup);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_popup_get_position_y$MH() {
        return RuntimeHelper.requireNonNull(constants$1139.gdk_popup_get_position_y$MH,"gdk_popup_get_position_y");
    }
    /**
     * {@snippet :
     * int gdk_popup_get_position_y(GdkPopup* popup);
     * }
     */
    public static int gdk_popup_get_position_y(MemorySegment popup) {
        var mh$ = gdk_popup_get_position_y$MH();
        try {
            return (int)mh$.invokeExact(popup);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_popup_get_autohide$MH() {
        return RuntimeHelper.requireNonNull(constants$1139.gdk_popup_get_autohide$MH,"gdk_popup_get_autohide");
    }
    /**
     * {@snippet :
     * gboolean gdk_popup_get_autohide(GdkPopup* popup);
     * }
     */
    public static int gdk_popup_get_autohide(MemorySegment popup) {
        var mh$ = gdk_popup_get_autohide$MH();
        try {
            return (int)mh$.invokeExact(popup);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _GdkSnapshot* GdkSnapshot_autoptr;
     * }
     */
    public static final OfAddress GdkSnapshot_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GdkSnapshot_listautoptr;
     * }
     */
    public static final OfAddress GdkSnapshot_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GdkSnapshot_slistautoptr;
     * }
     */
    public static final OfAddress GdkSnapshot_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GdkSnapshot_queueautoptr;
     * }
     */
    public static final OfAddress GdkSnapshot_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle gdk_snapshot_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1139.gdk_snapshot_get_type$MH,"gdk_snapshot_get_type");
    }
    /**
     * {@snippet :
     * GType gdk_snapshot_get_type();
     * }
     */
    public static long gdk_snapshot_get_type() {
        var mh$ = gdk_snapshot_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_toplevel_layout_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1140.gdk_toplevel_layout_get_type$MH,"gdk_toplevel_layout_get_type");
    }
    /**
     * {@snippet :
     * GType gdk_toplevel_layout_get_type();
     * }
     */
    public static long gdk_toplevel_layout_get_type() {
        var mh$ = gdk_toplevel_layout_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_toplevel_layout_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1140.gdk_toplevel_layout_new$MH,"gdk_toplevel_layout_new");
    }
    /**
     * {@snippet :
     * GdkToplevelLayout* gdk_toplevel_layout_new();
     * }
     */
    public static MemorySegment gdk_toplevel_layout_new() {
        var mh$ = gdk_toplevel_layout_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_toplevel_layout_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$1140.gdk_toplevel_layout_ref$MH,"gdk_toplevel_layout_ref");
    }
    /**
     * {@snippet :
     * GdkToplevelLayout* gdk_toplevel_layout_ref(GdkToplevelLayout* layout);
     * }
     */
    public static MemorySegment gdk_toplevel_layout_ref(MemorySegment layout) {
        var mh$ = gdk_toplevel_layout_ref$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(layout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_toplevel_layout_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$1140.gdk_toplevel_layout_unref$MH,"gdk_toplevel_layout_unref");
    }
    /**
     * {@snippet :
     * void gdk_toplevel_layout_unref(GdkToplevelLayout* layout);
     * }
     */
    public static void gdk_toplevel_layout_unref(MemorySegment layout) {
        var mh$ = gdk_toplevel_layout_unref$MH();
        try {
            mh$.invokeExact(layout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_toplevel_layout_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$1140.gdk_toplevel_layout_copy$MH,"gdk_toplevel_layout_copy");
    }
    /**
     * {@snippet :
     * GdkToplevelLayout* gdk_toplevel_layout_copy(GdkToplevelLayout* layout);
     * }
     */
    public static MemorySegment gdk_toplevel_layout_copy(MemorySegment layout) {
        var mh$ = gdk_toplevel_layout_copy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(layout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_toplevel_layout_equal$MH() {
        return RuntimeHelper.requireNonNull(constants$1140.gdk_toplevel_layout_equal$MH,"gdk_toplevel_layout_equal");
    }
    /**
     * {@snippet :
     * gboolean gdk_toplevel_layout_equal(GdkToplevelLayout* layout, GdkToplevelLayout* other);
     * }
     */
    public static int gdk_toplevel_layout_equal(MemorySegment layout, MemorySegment other) {
        var mh$ = gdk_toplevel_layout_equal$MH();
        try {
            return (int)mh$.invokeExact(layout, other);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_toplevel_layout_set_maximized$MH() {
        return RuntimeHelper.requireNonNull(constants$1141.gdk_toplevel_layout_set_maximized$MH,"gdk_toplevel_layout_set_maximized");
    }
    /**
     * {@snippet :
     * void gdk_toplevel_layout_set_maximized(GdkToplevelLayout* layout, gboolean maximized);
     * }
     */
    public static void gdk_toplevel_layout_set_maximized(MemorySegment layout, int maximized) {
        var mh$ = gdk_toplevel_layout_set_maximized$MH();
        try {
            mh$.invokeExact(layout, maximized);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_toplevel_layout_set_fullscreen$MH() {
        return RuntimeHelper.requireNonNull(constants$1141.gdk_toplevel_layout_set_fullscreen$MH,"gdk_toplevel_layout_set_fullscreen");
    }
    /**
     * {@snippet :
     * void gdk_toplevel_layout_set_fullscreen(GdkToplevelLayout* layout, gboolean fullscreen, GdkMonitor* monitor);
     * }
     */
    public static void gdk_toplevel_layout_set_fullscreen(MemorySegment layout, int fullscreen, MemorySegment monitor) {
        var mh$ = gdk_toplevel_layout_set_fullscreen$MH();
        try {
            mh$.invokeExact(layout, fullscreen, monitor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_toplevel_layout_get_maximized$MH() {
        return RuntimeHelper.requireNonNull(constants$1141.gdk_toplevel_layout_get_maximized$MH,"gdk_toplevel_layout_get_maximized");
    }
    /**
     * {@snippet :
     * gboolean gdk_toplevel_layout_get_maximized(GdkToplevelLayout* layout, gboolean* maximized);
     * }
     */
    public static int gdk_toplevel_layout_get_maximized(MemorySegment layout, MemorySegment maximized) {
        var mh$ = gdk_toplevel_layout_get_maximized$MH();
        try {
            return (int)mh$.invokeExact(layout, maximized);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_toplevel_layout_get_fullscreen$MH() {
        return RuntimeHelper.requireNonNull(constants$1141.gdk_toplevel_layout_get_fullscreen$MH,"gdk_toplevel_layout_get_fullscreen");
    }
    /**
     * {@snippet :
     * gboolean gdk_toplevel_layout_get_fullscreen(GdkToplevelLayout* layout, gboolean* fullscreen);
     * }
     */
    public static int gdk_toplevel_layout_get_fullscreen(MemorySegment layout, MemorySegment fullscreen) {
        var mh$ = gdk_toplevel_layout_get_fullscreen$MH();
        try {
            return (int)mh$.invokeExact(layout, fullscreen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_toplevel_layout_get_fullscreen_monitor$MH() {
        return RuntimeHelper.requireNonNull(constants$1141.gdk_toplevel_layout_get_fullscreen_monitor$MH,"gdk_toplevel_layout_get_fullscreen_monitor");
    }
    /**
     * {@snippet :
     * GdkMonitor* gdk_toplevel_layout_get_fullscreen_monitor(GdkToplevelLayout* layout);
     * }
     */
    public static MemorySegment gdk_toplevel_layout_get_fullscreen_monitor(MemorySegment layout) {
        var mh$ = gdk_toplevel_layout_get_fullscreen_monitor$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(layout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_toplevel_layout_set_resizable$MH() {
        return RuntimeHelper.requireNonNull(constants$1141.gdk_toplevel_layout_set_resizable$MH,"gdk_toplevel_layout_set_resizable");
    }
    /**
     * {@snippet :
     * void gdk_toplevel_layout_set_resizable(GdkToplevelLayout* layout, gboolean resizable);
     * }
     */
    public static void gdk_toplevel_layout_set_resizable(MemorySegment layout, int resizable) {
        var mh$ = gdk_toplevel_layout_set_resizable$MH();
        try {
            mh$.invokeExact(layout, resizable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_toplevel_layout_get_resizable$MH() {
        return RuntimeHelper.requireNonNull(constants$1142.gdk_toplevel_layout_get_resizable$MH,"gdk_toplevel_layout_get_resizable");
    }
    /**
     * {@snippet :
     * gboolean gdk_toplevel_layout_get_resizable(GdkToplevelLayout* layout);
     * }
     */
    public static int gdk_toplevel_layout_get_resizable(MemorySegment layout) {
        var mh$ = gdk_toplevel_layout_get_resizable$MH();
        try {
            return (int)mh$.invokeExact(layout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .GDK_SURFACE_EDGE_NORTH_WEST = 0;
     * }
     */
    public static int GDK_SURFACE_EDGE_NORTH_WEST() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .GDK_SURFACE_EDGE_NORTH = 1;
     * }
     */
    public static int GDK_SURFACE_EDGE_NORTH() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .GDK_SURFACE_EDGE_NORTH_EAST = 2;
     * }
     */
    public static int GDK_SURFACE_EDGE_NORTH_EAST() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .GDK_SURFACE_EDGE_WEST = 3;
     * }
     */
    public static int GDK_SURFACE_EDGE_WEST() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .GDK_SURFACE_EDGE_EAST = 4;
     * }
     */
    public static int GDK_SURFACE_EDGE_EAST() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .GDK_SURFACE_EDGE_SOUTH_WEST = 5;
     * }
     */
    public static int GDK_SURFACE_EDGE_SOUTH_WEST() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .GDK_SURFACE_EDGE_SOUTH = 6;
     * }
     */
    public static int GDK_SURFACE_EDGE_SOUTH() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .GDK_SURFACE_EDGE_SOUTH_EAST = 7;
     * }
     */
    public static int GDK_SURFACE_EDGE_SOUTH_EAST() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum .GDK_FULLSCREEN_ON_CURRENT_MONITOR = 0;
     * }
     */
    public static int GDK_FULLSCREEN_ON_CURRENT_MONITOR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .GDK_FULLSCREEN_ON_ALL_MONITORS = 1;
     * }
     */
    public static int GDK_FULLSCREEN_ON_ALL_MONITORS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .GDK_TOPLEVEL_STATE_MINIMIZED = 1;
     * }
     */
    public static int GDK_TOPLEVEL_STATE_MINIMIZED() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .GDK_TOPLEVEL_STATE_MAXIMIZED = 2;
     * }
     */
    public static int GDK_TOPLEVEL_STATE_MAXIMIZED() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .GDK_TOPLEVEL_STATE_STICKY = 4;
     * }
     */
    public static int GDK_TOPLEVEL_STATE_STICKY() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .GDK_TOPLEVEL_STATE_FULLSCREEN = 8;
     * }
     */
    public static int GDK_TOPLEVEL_STATE_FULLSCREEN() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .GDK_TOPLEVEL_STATE_ABOVE = 16;
     * }
     */
    public static int GDK_TOPLEVEL_STATE_ABOVE() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum .GDK_TOPLEVEL_STATE_BELOW = 32;
     * }
     */
    public static int GDK_TOPLEVEL_STATE_BELOW() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum .GDK_TOPLEVEL_STATE_FOCUSED = 64;
     * }
     */
    public static int GDK_TOPLEVEL_STATE_FOCUSED() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum .GDK_TOPLEVEL_STATE_TILED = 128;
     * }
     */
    public static int GDK_TOPLEVEL_STATE_TILED() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum .GDK_TOPLEVEL_STATE_TOP_TILED = 256;
     * }
     */
    public static int GDK_TOPLEVEL_STATE_TOP_TILED() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum .GDK_TOPLEVEL_STATE_TOP_RESIZABLE = 512;
     * }
     */
    public static int GDK_TOPLEVEL_STATE_TOP_RESIZABLE() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * enum .GDK_TOPLEVEL_STATE_RIGHT_TILED = 1024;
     * }
     */
    public static int GDK_TOPLEVEL_STATE_RIGHT_TILED() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * enum .GDK_TOPLEVEL_STATE_RIGHT_RESIZABLE = 2048;
     * }
     */
    public static int GDK_TOPLEVEL_STATE_RIGHT_RESIZABLE() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * enum .GDK_TOPLEVEL_STATE_BOTTOM_TILED = 4096;
     * }
     */
    public static int GDK_TOPLEVEL_STATE_BOTTOM_TILED() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * enum .GDK_TOPLEVEL_STATE_BOTTOM_RESIZABLE = 8192;
     * }
     */
    public static int GDK_TOPLEVEL_STATE_BOTTOM_RESIZABLE() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * enum .GDK_TOPLEVEL_STATE_LEFT_TILED = 16384;
     * }
     */
    public static int GDK_TOPLEVEL_STATE_LEFT_TILED() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * enum .GDK_TOPLEVEL_STATE_LEFT_RESIZABLE = 32768;
     * }
     */
    public static int GDK_TOPLEVEL_STATE_LEFT_RESIZABLE() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * enum .GDK_TITLEBAR_GESTURE_DOUBLE_CLICK = 1;
     * }
     */
    public static int GDK_TITLEBAR_GESTURE_DOUBLE_CLICK() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .GDK_TITLEBAR_GESTURE_RIGHT_CLICK = 2;
     * }
     */
    public static int GDK_TITLEBAR_GESTURE_RIGHT_CLICK() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .GDK_TITLEBAR_GESTURE_MIDDLE_CLICK = 3;
     * }
     */
    public static int GDK_TITLEBAR_GESTURE_MIDDLE_CLICK() {
        return (int)3L;
    }
    public static MethodHandle gdk_toplevel_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1142.gdk_toplevel_get_type$MH,"gdk_toplevel_get_type");
    }
    /**
     * {@snippet :
     * GType gdk_toplevel_get_type();
     * }
     */
    public static long gdk_toplevel_get_type() {
        var mh$ = gdk_toplevel_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _GdkToplevel* GdkToplevel_autoptr;
     * }
     */
    public static final OfAddress GdkToplevel_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GdkToplevel_listautoptr;
     * }
     */
    public static final OfAddress GdkToplevel_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GdkToplevel_slistautoptr;
     * }
     */
    public static final OfAddress GdkToplevel_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GdkToplevel_queueautoptr;
     * }
     */
    public static final OfAddress GdkToplevel_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle gdk_toplevel_present$MH() {
        return RuntimeHelper.requireNonNull(constants$1142.gdk_toplevel_present$MH,"gdk_toplevel_present");
    }
    /**
     * {@snippet :
     * void gdk_toplevel_present(GdkToplevel* toplevel, GdkToplevelLayout* layout);
     * }
     */
    public static void gdk_toplevel_present(MemorySegment toplevel, MemorySegment layout) {
        var mh$ = gdk_toplevel_present$MH();
        try {
            mh$.invokeExact(toplevel, layout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_toplevel_minimize$MH() {
        return RuntimeHelper.requireNonNull(constants$1142.gdk_toplevel_minimize$MH,"gdk_toplevel_minimize");
    }
    /**
     * {@snippet :
     * gboolean gdk_toplevel_minimize(GdkToplevel* toplevel);
     * }
     */
    public static int gdk_toplevel_minimize(MemorySegment toplevel) {
        var mh$ = gdk_toplevel_minimize$MH();
        try {
            return (int)mh$.invokeExact(toplevel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_toplevel_lower$MH() {
        return RuntimeHelper.requireNonNull(constants$1142.gdk_toplevel_lower$MH,"gdk_toplevel_lower");
    }
    /**
     * {@snippet :
     * gboolean gdk_toplevel_lower(GdkToplevel* toplevel);
     * }
     */
    public static int gdk_toplevel_lower(MemorySegment toplevel) {
        var mh$ = gdk_toplevel_lower$MH();
        try {
            return (int)mh$.invokeExact(toplevel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_toplevel_focus$MH() {
        return RuntimeHelper.requireNonNull(constants$1142.gdk_toplevel_focus$MH,"gdk_toplevel_focus");
    }
    /**
     * {@snippet :
     * void gdk_toplevel_focus(GdkToplevel* toplevel, guint32 timestamp);
     * }
     */
    public static void gdk_toplevel_focus(MemorySegment toplevel, int timestamp) {
        var mh$ = gdk_toplevel_focus$MH();
        try {
            mh$.invokeExact(toplevel, timestamp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_toplevel_get_state$MH() {
        return RuntimeHelper.requireNonNull(constants$1143.gdk_toplevel_get_state$MH,"gdk_toplevel_get_state");
    }
    /**
     * {@snippet :
     * GdkToplevelState gdk_toplevel_get_state(GdkToplevel* toplevel);
     * }
     */
    public static int gdk_toplevel_get_state(MemorySegment toplevel) {
        var mh$ = gdk_toplevel_get_state$MH();
        try {
            return (int)mh$.invokeExact(toplevel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_toplevel_set_title$MH() {
        return RuntimeHelper.requireNonNull(constants$1143.gdk_toplevel_set_title$MH,"gdk_toplevel_set_title");
    }
    /**
     * {@snippet :
     * void gdk_toplevel_set_title(GdkToplevel* toplevel, char* title);
     * }
     */
    public static void gdk_toplevel_set_title(MemorySegment toplevel, MemorySegment title) {
        var mh$ = gdk_toplevel_set_title$MH();
        try {
            mh$.invokeExact(toplevel, title);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_toplevel_set_startup_id$MH() {
        return RuntimeHelper.requireNonNull(constants$1143.gdk_toplevel_set_startup_id$MH,"gdk_toplevel_set_startup_id");
    }
    /**
     * {@snippet :
     * void gdk_toplevel_set_startup_id(GdkToplevel* toplevel, char* startup_id);
     * }
     */
    public static void gdk_toplevel_set_startup_id(MemorySegment toplevel, MemorySegment startup_id) {
        var mh$ = gdk_toplevel_set_startup_id$MH();
        try {
            mh$.invokeExact(toplevel, startup_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_toplevel_set_transient_for$MH() {
        return RuntimeHelper.requireNonNull(constants$1143.gdk_toplevel_set_transient_for$MH,"gdk_toplevel_set_transient_for");
    }
    /**
     * {@snippet :
     * void gdk_toplevel_set_transient_for(GdkToplevel* toplevel, GdkSurface* parent);
     * }
     */
    public static void gdk_toplevel_set_transient_for(MemorySegment toplevel, MemorySegment parent) {
        var mh$ = gdk_toplevel_set_transient_for$MH();
        try {
            mh$.invokeExact(toplevel, parent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_toplevel_set_modal$MH() {
        return RuntimeHelper.requireNonNull(constants$1143.gdk_toplevel_set_modal$MH,"gdk_toplevel_set_modal");
    }
    /**
     * {@snippet :
     * void gdk_toplevel_set_modal(GdkToplevel* toplevel, gboolean modal);
     * }
     */
    public static void gdk_toplevel_set_modal(MemorySegment toplevel, int modal) {
        var mh$ = gdk_toplevel_set_modal$MH();
        try {
            mh$.invokeExact(toplevel, modal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_toplevel_set_icon_list$MH() {
        return RuntimeHelper.requireNonNull(constants$1143.gdk_toplevel_set_icon_list$MH,"gdk_toplevel_set_icon_list");
    }
    /**
     * {@snippet :
     * void gdk_toplevel_set_icon_list(GdkToplevel* toplevel, GList* surfaces);
     * }
     */
    public static void gdk_toplevel_set_icon_list(MemorySegment toplevel, MemorySegment surfaces) {
        var mh$ = gdk_toplevel_set_icon_list$MH();
        try {
            mh$.invokeExact(toplevel, surfaces);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_toplevel_show_window_menu$MH() {
        return RuntimeHelper.requireNonNull(constants$1144.gdk_toplevel_show_window_menu$MH,"gdk_toplevel_show_window_menu");
    }
    /**
     * {@snippet :
     * gboolean gdk_toplevel_show_window_menu(GdkToplevel* toplevel, GdkEvent* event);
     * }
     */
    public static int gdk_toplevel_show_window_menu(MemorySegment toplevel, MemorySegment event) {
        var mh$ = gdk_toplevel_show_window_menu$MH();
        try {
            return (int)mh$.invokeExact(toplevel, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_toplevel_set_decorated$MH() {
        return RuntimeHelper.requireNonNull(constants$1144.gdk_toplevel_set_decorated$MH,"gdk_toplevel_set_decorated");
    }
    /**
     * {@snippet :
     * void gdk_toplevel_set_decorated(GdkToplevel* toplevel, gboolean decorated);
     * }
     */
    public static void gdk_toplevel_set_decorated(MemorySegment toplevel, int decorated) {
        var mh$ = gdk_toplevel_set_decorated$MH();
        try {
            mh$.invokeExact(toplevel, decorated);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_toplevel_set_deletable$MH() {
        return RuntimeHelper.requireNonNull(constants$1144.gdk_toplevel_set_deletable$MH,"gdk_toplevel_set_deletable");
    }
    /**
     * {@snippet :
     * void gdk_toplevel_set_deletable(GdkToplevel* toplevel, gboolean deletable);
     * }
     */
    public static void gdk_toplevel_set_deletable(MemorySegment toplevel, int deletable) {
        var mh$ = gdk_toplevel_set_deletable$MH();
        try {
            mh$.invokeExact(toplevel, deletable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_toplevel_supports_edge_constraints$MH() {
        return RuntimeHelper.requireNonNull(constants$1144.gdk_toplevel_supports_edge_constraints$MH,"gdk_toplevel_supports_edge_constraints");
    }
    /**
     * {@snippet :
     * gboolean gdk_toplevel_supports_edge_constraints(GdkToplevel* toplevel);
     * }
     */
    public static int gdk_toplevel_supports_edge_constraints(MemorySegment toplevel) {
        var mh$ = gdk_toplevel_supports_edge_constraints$MH();
        try {
            return (int)mh$.invokeExact(toplevel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_toplevel_inhibit_system_shortcuts$MH() {
        return RuntimeHelper.requireNonNull(constants$1144.gdk_toplevel_inhibit_system_shortcuts$MH,"gdk_toplevel_inhibit_system_shortcuts");
    }
    /**
     * {@snippet :
     * void gdk_toplevel_inhibit_system_shortcuts(GdkToplevel* toplevel, GdkEvent* event);
     * }
     */
    public static void gdk_toplevel_inhibit_system_shortcuts(MemorySegment toplevel, MemorySegment event) {
        var mh$ = gdk_toplevel_inhibit_system_shortcuts$MH();
        try {
            mh$.invokeExact(toplevel, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_toplevel_restore_system_shortcuts$MH() {
        return RuntimeHelper.requireNonNull(constants$1144.gdk_toplevel_restore_system_shortcuts$MH,"gdk_toplevel_restore_system_shortcuts");
    }
    /**
     * {@snippet :
     * void gdk_toplevel_restore_system_shortcuts(GdkToplevel* toplevel);
     * }
     */
    public static void gdk_toplevel_restore_system_shortcuts(MemorySegment toplevel) {
        var mh$ = gdk_toplevel_restore_system_shortcuts$MH();
        try {
            mh$.invokeExact(toplevel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_toplevel_begin_resize$MH() {
        return RuntimeHelper.requireNonNull(constants$1145.gdk_toplevel_begin_resize$MH,"gdk_toplevel_begin_resize");
    }
    /**
     * {@snippet :
     * void gdk_toplevel_begin_resize(GdkToplevel* toplevel, GdkSurfaceEdge edge, GdkDevice* device, int button, double x, double y, guint32 timestamp);
     * }
     */
    public static void gdk_toplevel_begin_resize(MemorySegment toplevel, int edge, MemorySegment device, int button, double x, double y, int timestamp) {
        var mh$ = gdk_toplevel_begin_resize$MH();
        try {
            mh$.invokeExact(toplevel, edge, device, button, x, y, timestamp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_toplevel_begin_move$MH() {
        return RuntimeHelper.requireNonNull(constants$1145.gdk_toplevel_begin_move$MH,"gdk_toplevel_begin_move");
    }
    /**
     * {@snippet :
     * void gdk_toplevel_begin_move(GdkToplevel* toplevel, GdkDevice* device, int button, double x, double y, guint32 timestamp);
     * }
     */
    public static void gdk_toplevel_begin_move(MemorySegment toplevel, MemorySegment device, int button, double x, double y, int timestamp) {
        var mh$ = gdk_toplevel_begin_move$MH();
        try {
            mh$.invokeExact(toplevel, device, button, x, y, timestamp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_toplevel_titlebar_gesture$MH() {
        return RuntimeHelper.requireNonNull(constants$1145.gdk_toplevel_titlebar_gesture$MH,"gdk_toplevel_titlebar_gesture");
    }
    /**
     * {@snippet :
     * gboolean gdk_toplevel_titlebar_gesture(GdkToplevel* toplevel, GdkTitlebarGesture gesture);
     * }
     */
    public static int gdk_toplevel_titlebar_gesture(MemorySegment toplevel, int gesture) {
        var mh$ = gdk_toplevel_titlebar_gesture$MH();
        try {
            return (int)mh$.invokeExact(toplevel, gesture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_toplevel_size_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1145.gdk_toplevel_size_get_type$MH,"gdk_toplevel_size_get_type");
    }
    /**
     * {@snippet :
     * GType gdk_toplevel_size_get_type();
     * }
     */
    public static long gdk_toplevel_size_get_type() {
        var mh$ = gdk_toplevel_size_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_toplevel_size_get_bounds$MH() {
        return RuntimeHelper.requireNonNull(constants$1145.gdk_toplevel_size_get_bounds$MH,"gdk_toplevel_size_get_bounds");
    }
    /**
     * {@snippet :
     * void gdk_toplevel_size_get_bounds(GdkToplevelSize* size, int* bounds_width, int* bounds_height);
     * }
     */
    public static void gdk_toplevel_size_get_bounds(MemorySegment size, MemorySegment bounds_width, MemorySegment bounds_height) {
        var mh$ = gdk_toplevel_size_get_bounds$MH();
        try {
            mh$.invokeExact(size, bounds_width, bounds_height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_toplevel_size_set_size$MH() {
        return RuntimeHelper.requireNonNull(constants$1145.gdk_toplevel_size_set_size$MH,"gdk_toplevel_size_set_size");
    }
    /**
     * {@snippet :
     * void gdk_toplevel_size_set_size(GdkToplevelSize* size, int width, int height);
     * }
     */
    public static void gdk_toplevel_size_set_size(MemorySegment size, int width, int height) {
        var mh$ = gdk_toplevel_size_set_size$MH();
        try {
            mh$.invokeExact(size, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_toplevel_size_set_min_size$MH() {
        return RuntimeHelper.requireNonNull(constants$1146.gdk_toplevel_size_set_min_size$MH,"gdk_toplevel_size_set_min_size");
    }
    /**
     * {@snippet :
     * void gdk_toplevel_size_set_min_size(GdkToplevelSize* size, int min_width, int min_height);
     * }
     */
    public static void gdk_toplevel_size_set_min_size(MemorySegment size, int min_width, int min_height) {
        var mh$ = gdk_toplevel_size_set_min_size$MH();
        try {
            mh$.invokeExact(size, min_width, min_height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_toplevel_size_set_shadow_width$MH() {
        return RuntimeHelper.requireNonNull(constants$1146.gdk_toplevel_size_set_shadow_width$MH,"gdk_toplevel_size_set_shadow_width");
    }
    /**
     * {@snippet :
     * void gdk_toplevel_size_set_shadow_width(GdkToplevelSize* size, int left, int right, int top, int bottom);
     * }
     */
    public static void gdk_toplevel_size_set_shadow_width(MemorySegment size, int left, int right, int top, int bottom) {
        var mh$ = gdk_toplevel_size_set_shadow_width$MH();
        try {
            mh$.invokeExact(size, left, right, top, bottom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_vulkan_error_quark$MH() {
        return RuntimeHelper.requireNonNull(constants$1146.gdk_vulkan_error_quark$MH,"gdk_vulkan_error_quark");
    }
    /**
     * {@snippet :
     * GQuark gdk_vulkan_error_quark();
     * }
     */
    public static int gdk_vulkan_error_quark() {
        var mh$ = gdk_vulkan_error_quark$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_vulkan_context_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1146.gdk_vulkan_context_get_type$MH,"gdk_vulkan_context_get_type");
    }
    /**
     * {@snippet :
     * GType gdk_vulkan_context_get_type();
     * }
     */
    public static long gdk_vulkan_context_get_type() {
        var mh$ = gdk_vulkan_context_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _GdkAppLaunchContext* GdkAppLaunchContext_autoptr;
     * }
     */
    public static final OfAddress GdkAppLaunchContext_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GdkAppLaunchContext_listautoptr;
     * }
     */
    public static final OfAddress GdkAppLaunchContext_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GdkAppLaunchContext_slistautoptr;
     * }
     */
    public static final OfAddress GdkAppLaunchContext_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GdkAppLaunchContext_queueautoptr;
     * }
     */
    public static final OfAddress GdkAppLaunchContext_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GdkClipboard* GdkClipboard_autoptr;
     * }
     */
    public static final OfAddress GdkClipboard_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GdkClipboard_listautoptr;
     * }
     */
    public static final OfAddress GdkClipboard_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GdkClipboard_slistautoptr;
     * }
     */
    public static final OfAddress GdkClipboard_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GdkClipboard_queueautoptr;
     * }
     */
    public static final OfAddress GdkClipboard_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GdkContentProvider* GdkContentProvider_autoptr;
     * }
     */
    public static final OfAddress GdkContentProvider_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GdkContentProvider_listautoptr;
     * }
     */
    public static final OfAddress GdkContentProvider_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GdkContentProvider_slistautoptr;
     * }
     */
    public static final OfAddress GdkContentProvider_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GdkContentProvider_queueautoptr;
     * }
     */
    public static final OfAddress GdkContentProvider_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GdkCursor* GdkCursor_autoptr;
     * }
     */
    public static final OfAddress GdkCursor_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GdkCursor_listautoptr;
     * }
     */
    public static final OfAddress GdkCursor_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GdkCursor_slistautoptr;
     * }
     */
    public static final OfAddress GdkCursor_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GdkCursor_queueautoptr;
     * }
     */
    public static final OfAddress GdkCursor_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GdkDevice* GdkDevice_autoptr;
     * }
     */
    public static final OfAddress GdkDevice_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GdkDevice_listautoptr;
     * }
     */
    public static final OfAddress GdkDevice_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GdkDevice_slistautoptr;
     * }
     */
    public static final OfAddress GdkDevice_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GdkDevice_queueautoptr;
     * }
     */
    public static final OfAddress GdkDevice_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GdkDisplay* GdkDisplay_autoptr;
     * }
     */
    public static final OfAddress GdkDisplay_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GdkDisplay_listautoptr;
     * }
     */
    public static final OfAddress GdkDisplay_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GdkDisplay_slistautoptr;
     * }
     */
    public static final OfAddress GdkDisplay_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GdkDisplay_queueautoptr;
     * }
     */
    public static final OfAddress GdkDisplay_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GdkDisplayManager* GdkDisplayManager_autoptr;
     * }
     */
    public static final OfAddress GdkDisplayManager_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GdkDisplayManager_listautoptr;
     * }
     */
    public static final OfAddress GdkDisplayManager_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GdkDisplayManager_slistautoptr;
     * }
     */
    public static final OfAddress GdkDisplayManager_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GdkDisplayManager_queueautoptr;
     * }
     */
    public static final OfAddress GdkDisplayManager_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GdkDrag* GdkDrag_autoptr;
     * }
     */
    public static final OfAddress GdkDrag_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GdkDrag_listautoptr;
     * }
     */
    public static final OfAddress GdkDrag_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GdkDrag_slistautoptr;
     * }
     */
    public static final OfAddress GdkDrag_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GdkDrag_queueautoptr;
     * }
     */
    public static final OfAddress GdkDrag_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GdkDrawContext* GdkDrawContext_autoptr;
     * }
     */
    public static final OfAddress GdkDrawContext_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GdkDrawContext_listautoptr;
     * }
     */
    public static final OfAddress GdkDrawContext_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GdkDrawContext_slistautoptr;
     * }
     */
    public static final OfAddress GdkDrawContext_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GdkDrawContext_queueautoptr;
     * }
     */
    public static final OfAddress GdkDrawContext_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GdkFrameClock* GdkFrameClock_autoptr;
     * }
     */
    public static final OfAddress GdkFrameClock_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GdkFrameClock_listautoptr;
     * }
     */
    public static final OfAddress GdkFrameClock_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GdkFrameClock_slistautoptr;
     * }
     */
    public static final OfAddress GdkFrameClock_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GdkFrameClock_queueautoptr;
     * }
     */
    public static final OfAddress GdkFrameClock_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GdkGLContext* GdkGLContext_autoptr;
     * }
     */
    public static final OfAddress GdkGLContext_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GdkGLContext_listautoptr;
     * }
     */
    public static final OfAddress GdkGLContext_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GdkGLContext_slistautoptr;
     * }
     */
    public static final OfAddress GdkGLContext_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GdkGLContext_queueautoptr;
     * }
     */
    public static final OfAddress GdkGLContext_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GdkMonitor* GdkMonitor_autoptr;
     * }
     */
    public static final OfAddress GdkMonitor_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GdkMonitor_listautoptr;
     * }
     */
    public static final OfAddress GdkMonitor_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GdkMonitor_slistautoptr;
     * }
     */
    public static final OfAddress GdkMonitor_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GdkMonitor_queueautoptr;
     * }
     */
    public static final OfAddress GdkMonitor_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GdkSeat* GdkSeat_autoptr;
     * }
     */
    public static final OfAddress GdkSeat_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GdkSeat_listautoptr;
     * }
     */
    public static final OfAddress GdkSeat_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GdkSeat_slistautoptr;
     * }
     */
    public static final OfAddress GdkSeat_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GdkSeat_queueautoptr;
     * }
     */
    public static final OfAddress GdkSeat_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GdkPopupLayout* GdkPopupLayout_autoptr;
     * }
     */
    public static final OfAddress GdkPopupLayout_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GdkPopupLayout_listautoptr;
     * }
     */
    public static final OfAddress GdkPopupLayout_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GdkPopupLayout_slistautoptr;
     * }
     */
    public static final OfAddress GdkPopupLayout_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GdkPopupLayout_queueautoptr;
     * }
     */
    public static final OfAddress GdkPopupLayout_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GdkVulkanContext* GdkVulkanContext_autoptr;
     * }
     */
    public static final OfAddress GdkVulkanContext_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GdkVulkanContext_listautoptr;
     * }
     */
    public static final OfAddress GdkVulkanContext_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GdkVulkanContext_slistautoptr;
     * }
     */
    public static final OfAddress GdkVulkanContext_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GdkVulkanContext_queueautoptr;
     * }
     */
    public static final OfAddress GdkVulkanContext_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GdkContentFormats* GdkContentFormats_autoptr;
     * }
     */
    public static final OfAddress GdkContentFormats_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GdkContentFormats_listautoptr;
     * }
     */
    public static final OfAddress GdkContentFormats_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GdkContentFormats_slistautoptr;
     * }
     */
    public static final OfAddress GdkContentFormats_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GdkContentFormats_queueautoptr;
     * }
     */
    public static final OfAddress GdkContentFormats_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GdkEvent* GdkEvent_autoptr;
     * }
     */
    public static final OfAddress GdkEvent_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GdkEvent_listautoptr;
     * }
     */
    public static final OfAddress GdkEvent_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GdkEvent_slistautoptr;
     * }
     */
    public static final OfAddress GdkEvent_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GdkEvent_queueautoptr;
     * }
     */
    public static final OfAddress GdkEvent_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GdkFrameTimings* GdkFrameTimings_autoptr;
     * }
     */
    public static final OfAddress GdkFrameTimings_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GdkFrameTimings_listautoptr;
     * }
     */
    public static final OfAddress GdkFrameTimings_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GdkFrameTimings_slistautoptr;
     * }
     */
    public static final OfAddress GdkFrameTimings_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GdkFrameTimings_queueautoptr;
     * }
     */
    public static final OfAddress GdkFrameTimings_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GdkRGBA* GdkRGBA_autoptr;
     * }
     */
    public static final OfAddress GdkRGBA_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GdkRGBA_listautoptr;
     * }
     */
    public static final OfAddress GdkRGBA_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GdkRGBA_slistautoptr;
     * }
     */
    public static final OfAddress GdkRGBA_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GdkRGBA_queueautoptr;
     * }
     */
    public static final OfAddress GdkRGBA_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * enum .GSK_NOT_A_RENDER_NODE = 0;
     * }
     */
    public static int GSK_NOT_A_RENDER_NODE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .GSK_CONTAINER_NODE = 1;
     * }
     */
    public static int GSK_CONTAINER_NODE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .GSK_CAIRO_NODE = 2;
     * }
     */
    public static int GSK_CAIRO_NODE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .GSK_COLOR_NODE = 3;
     * }
     */
    public static int GSK_COLOR_NODE() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .GSK_LINEAR_GRADIENT_NODE = 4;
     * }
     */
    public static int GSK_LINEAR_GRADIENT_NODE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .GSK_REPEATING_LINEAR_GRADIENT_NODE = 5;
     * }
     */
    public static int GSK_REPEATING_LINEAR_GRADIENT_NODE() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .GSK_RADIAL_GRADIENT_NODE = 6;
     * }
     */
    public static int GSK_RADIAL_GRADIENT_NODE() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .GSK_REPEATING_RADIAL_GRADIENT_NODE = 7;
     * }
     */
    public static int GSK_REPEATING_RADIAL_GRADIENT_NODE() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum .GSK_CONIC_GRADIENT_NODE = 8;
     * }
     */
    public static int GSK_CONIC_GRADIENT_NODE() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .GSK_BORDER_NODE = 9;
     * }
     */
    public static int GSK_BORDER_NODE() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum .GSK_TEXTURE_NODE = 10;
     * }
     */
    public static int GSK_TEXTURE_NODE() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum .GSK_INSET_SHADOW_NODE = 11;
     * }
     */
    public static int GSK_INSET_SHADOW_NODE() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum .GSK_OUTSET_SHADOW_NODE = 12;
     * }
     */
    public static int GSK_OUTSET_SHADOW_NODE() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum .GSK_TRANSFORM_NODE = 13;
     * }
     */
    public static int GSK_TRANSFORM_NODE() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum .GSK_OPACITY_NODE = 14;
     * }
     */
    public static int GSK_OPACITY_NODE() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum .GSK_COLOR_MATRIX_NODE = 15;
     * }
     */
    public static int GSK_COLOR_MATRIX_NODE() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum .GSK_REPEAT_NODE = 16;
     * }
     */
    public static int GSK_REPEAT_NODE() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum .GSK_CLIP_NODE = 17;
     * }
     */
    public static int GSK_CLIP_NODE() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum .GSK_ROUNDED_CLIP_NODE = 18;
     * }
     */
    public static int GSK_ROUNDED_CLIP_NODE() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum .GSK_SHADOW_NODE = 19;
     * }
     */
    public static int GSK_SHADOW_NODE() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * enum .GSK_BLEND_NODE = 20;
     * }
     */
    public static int GSK_BLEND_NODE() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * enum .GSK_CROSS_FADE_NODE = 21;
     * }
     */
    public static int GSK_CROSS_FADE_NODE() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * enum .GSK_TEXT_NODE = 22;
     * }
     */
    public static int GSK_TEXT_NODE() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * enum .GSK_BLUR_NODE = 23;
     * }
     */
    public static int GSK_BLUR_NODE() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * enum .GSK_DEBUG_NODE = 24;
     * }
     */
    public static int GSK_DEBUG_NODE() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * enum .GSK_GL_SHADER_NODE = 25;
     * }
     */
    public static int GSK_GL_SHADER_NODE() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * enum .GSK_SCALING_FILTER_LINEAR = 0;
     * }
     */
    public static int GSK_SCALING_FILTER_LINEAR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .GSK_SCALING_FILTER_NEAREST = 1;
     * }
     */
    public static int GSK_SCALING_FILTER_NEAREST() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .GSK_SCALING_FILTER_TRILINEAR = 2;
     * }
     */
    public static int GSK_SCALING_FILTER_TRILINEAR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .GSK_BLEND_MODE_DEFAULT = 0;
     * }
     */
    public static int GSK_BLEND_MODE_DEFAULT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .GSK_BLEND_MODE_MULTIPLY = 1;
     * }
     */
    public static int GSK_BLEND_MODE_MULTIPLY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .GSK_BLEND_MODE_SCREEN = 2;
     * }
     */
    public static int GSK_BLEND_MODE_SCREEN() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .GSK_BLEND_MODE_OVERLAY = 3;
     * }
     */
    public static int GSK_BLEND_MODE_OVERLAY() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .GSK_BLEND_MODE_DARKEN = 4;
     * }
     */
    public static int GSK_BLEND_MODE_DARKEN() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .GSK_BLEND_MODE_LIGHTEN = 5;
     * }
     */
    public static int GSK_BLEND_MODE_LIGHTEN() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .GSK_BLEND_MODE_COLOR_DODGE = 6;
     * }
     */
    public static int GSK_BLEND_MODE_COLOR_DODGE() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .GSK_BLEND_MODE_COLOR_BURN = 7;
     * }
     */
    public static int GSK_BLEND_MODE_COLOR_BURN() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum .GSK_BLEND_MODE_HARD_LIGHT = 8;
     * }
     */
    public static int GSK_BLEND_MODE_HARD_LIGHT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .GSK_BLEND_MODE_SOFT_LIGHT = 9;
     * }
     */
    public static int GSK_BLEND_MODE_SOFT_LIGHT() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum .GSK_BLEND_MODE_DIFFERENCE = 10;
     * }
     */
    public static int GSK_BLEND_MODE_DIFFERENCE() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum .GSK_BLEND_MODE_EXCLUSION = 11;
     * }
     */
    public static int GSK_BLEND_MODE_EXCLUSION() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum .GSK_BLEND_MODE_COLOR = 12;
     * }
     */
    public static int GSK_BLEND_MODE_COLOR() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum .GSK_BLEND_MODE_HUE = 13;
     * }
     */
    public static int GSK_BLEND_MODE_HUE() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum .GSK_BLEND_MODE_SATURATION = 14;
     * }
     */
    public static int GSK_BLEND_MODE_SATURATION() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum .GSK_BLEND_MODE_LUMINOSITY = 15;
     * }
     */
    public static int GSK_BLEND_MODE_LUMINOSITY() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum .GSK_CORNER_TOP_LEFT = 0;
     * }
     */
    public static int GSK_CORNER_TOP_LEFT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .GSK_CORNER_TOP_RIGHT = 1;
     * }
     */
    public static int GSK_CORNER_TOP_RIGHT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .GSK_CORNER_BOTTOM_RIGHT = 2;
     * }
     */
    public static int GSK_CORNER_BOTTOM_RIGHT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .GSK_CORNER_BOTTOM_LEFT = 3;
     * }
     */
    public static int GSK_CORNER_BOTTOM_LEFT() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .GSK_SERIALIZATION_UNSUPPORTED_FORMAT = 0;
     * }
     */
    public static int GSK_SERIALIZATION_UNSUPPORTED_FORMAT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .GSK_SERIALIZATION_UNSUPPORTED_VERSION = 1;
     * }
     */
    public static int GSK_SERIALIZATION_UNSUPPORTED_VERSION() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .GSK_SERIALIZATION_INVALID_DATA = 2;
     * }
     */
    public static int GSK_SERIALIZATION_INVALID_DATA() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .GSK_TRANSFORM_CATEGORY_UNKNOWN = 0;
     * }
     */
    public static int GSK_TRANSFORM_CATEGORY_UNKNOWN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .GSK_TRANSFORM_CATEGORY_ANY = 1;
     * }
     */
    public static int GSK_TRANSFORM_CATEGORY_ANY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .GSK_TRANSFORM_CATEGORY_3D = 2;
     * }
     */
    public static int GSK_TRANSFORM_CATEGORY_3D() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .GSK_TRANSFORM_CATEGORY_2D = 3;
     * }
     */
    public static int GSK_TRANSFORM_CATEGORY_2D() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .GSK_TRANSFORM_CATEGORY_2D_AFFINE = 4;
     * }
     */
    public static int GSK_TRANSFORM_CATEGORY_2D_AFFINE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .GSK_TRANSFORM_CATEGORY_2D_TRANSLATE = 5;
     * }
     */
    public static int GSK_TRANSFORM_CATEGORY_2D_TRANSLATE() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .GSK_TRANSFORM_CATEGORY_IDENTITY = 6;
     * }
     */
    public static int GSK_TRANSFORM_CATEGORY_IDENTITY() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .GSK_GL_UNIFORM_TYPE_NONE = 0;
     * }
     */
    public static int GSK_GL_UNIFORM_TYPE_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .GSK_GL_UNIFORM_TYPE_FLOAT = 1;
     * }
     */
    public static int GSK_GL_UNIFORM_TYPE_FLOAT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .GSK_GL_UNIFORM_TYPE_INT = 2;
     * }
     */
    public static int GSK_GL_UNIFORM_TYPE_INT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .GSK_GL_UNIFORM_TYPE_UINT = 3;
     * }
     */
    public static int GSK_GL_UNIFORM_TYPE_UINT() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .GSK_GL_UNIFORM_TYPE_BOOL = 4;
     * }
     */
    public static int GSK_GL_UNIFORM_TYPE_BOOL() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .GSK_GL_UNIFORM_TYPE_VEC2 = 5;
     * }
     */
    public static int GSK_GL_UNIFORM_TYPE_VEC2() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .GSK_GL_UNIFORM_TYPE_VEC3 = 6;
     * }
     */
    public static int GSK_GL_UNIFORM_TYPE_VEC3() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .GSK_GL_UNIFORM_TYPE_VEC4 = 7;
     * }
     */
    public static int GSK_GL_UNIFORM_TYPE_VEC4() {
        return (int)7L;
    }
    public static MethodHandle _mm_sfence$MH() {
        return RuntimeHelper.requireNonNull(constants$1146._mm_sfence$MH,"_mm_sfence");
    }
    /**
     * {@snippet :
     * void _mm_sfence();
     * }
     */
    public static void _mm_sfence() {
        var mh$ = _mm_sfence$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_getcsr$MH() {
        return RuntimeHelper.requireNonNull(constants$1146._mm_getcsr$MH,"_mm_getcsr");
    }
    /**
     * {@snippet :
     * unsigned int _mm_getcsr();
     * }
     */
    public static int _mm_getcsr() {
        var mh$ = _mm_getcsr$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_setcsr$MH() {
        return RuntimeHelper.requireNonNull(constants$1147._mm_setcsr$MH,"_mm_setcsr");
    }
    /**
     * {@snippet :
     * void _mm_setcsr(unsigned int __i);
     * }
     */
    public static void _mm_setcsr(int __i) {
        var mh$ = _mm_setcsr$MH();
        try {
            mh$.invokeExact(__i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_clflush$MH() {
        return RuntimeHelper.requireNonNull(constants$1147._mm_clflush$MH,"_mm_clflush");
    }
    /**
     * {@snippet :
     * void _mm_clflush(void* __p);
     * }
     */
    public static void _mm_clflush(MemorySegment __p) {
        var mh$ = _mm_clflush$MH();
        try {
            mh$.invokeExact(__p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_lfence$MH() {
        return RuntimeHelper.requireNonNull(constants$1147._mm_lfence$MH,"_mm_lfence");
    }
    /**
     * {@snippet :
     * void _mm_lfence();
     * }
     */
    public static void _mm_lfence() {
        var mh$ = _mm_lfence$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_mfence$MH() {
        return RuntimeHelper.requireNonNull(constants$1147._mm_mfence$MH,"_mm_mfence");
    }
    /**
     * {@snippet :
     * void _mm_mfence();
     * }
     */
    public static void _mm_mfence() {
        var mh$ = _mm_mfence$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_pause$MH() {
        return RuntimeHelper.requireNonNull(constants$1147._mm_pause$MH,"_mm_pause");
    }
    /**
     * {@snippet :
     * void _mm_pause();
     * }
     */
    public static void _mm_pause() {
        var mh$ = _mm_pause$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef float float_t;
     * }
     */
    public static final OfFloat float_t = Constants$root.C_FLOAT$LAYOUT;
    /**
     * {@snippet :
     * typedef double double_t;
     * }
     */
    public static final OfDouble double_t = Constants$root.C_DOUBLE$LAYOUT;
    public static MethodHandle __fpclassify$MH() {
        return RuntimeHelper.requireNonNull(constants$1147.__fpclassify$MH,"__fpclassify");
    }
    /**
     * {@snippet :
     * int __fpclassify(double __value);
     * }
     */
    public static int __fpclassify(double __value) {
        var mh$ = __fpclassify$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __signbit$MH() {
        return RuntimeHelper.requireNonNull(constants$1148.__signbit$MH,"__signbit");
    }
    /**
     * {@snippet :
     * int __signbit(double __value);
     * }
     */
    public static int __signbit(double __value) {
        var mh$ = __signbit$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __isinf$MH() {
        return RuntimeHelper.requireNonNull(constants$1148.__isinf$MH,"__isinf");
    }
    /**
     * {@snippet :
     * int __isinf(double __value);
     * }
     */
    public static int __isinf(double __value) {
        var mh$ = __isinf$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __finite$MH() {
        return RuntimeHelper.requireNonNull(constants$1148.__finite$MH,"__finite");
    }
    /**
     * {@snippet :
     * int __finite(double __value);
     * }
     */
    public static int __finite(double __value) {
        var mh$ = __finite$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __isnan$MH() {
        return RuntimeHelper.requireNonNull(constants$1148.__isnan$MH,"__isnan");
    }
    /**
     * {@snippet :
     * int __isnan(double __value);
     * }
     */
    public static int __isnan(double __value) {
        var mh$ = __isnan$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __iseqsig$MH() {
        return RuntimeHelper.requireNonNull(constants$1148.__iseqsig$MH,"__iseqsig");
    }
    /**
     * {@snippet :
     * int __iseqsig(double __x, double __y);
     * }
     */
    public static int __iseqsig(double __x, double __y) {
        var mh$ = __iseqsig$MH();
        try {
            return (int)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __issignaling$MH() {
        return RuntimeHelper.requireNonNull(constants$1148.__issignaling$MH,"__issignaling");
    }
    /**
     * {@snippet :
     * int __issignaling(double __value);
     * }
     */
    public static int __issignaling(double __value) {
        var mh$ = __issignaling$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle acos$MH() {
        return RuntimeHelper.requireNonNull(constants$1149.acos$MH,"acos");
    }
    /**
     * {@snippet :
     * double acos(double __x);
     * }
     */
    public static double acos(double __x) {
        var mh$ = acos$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __acos$MH() {
        return RuntimeHelper.requireNonNull(constants$1149.__acos$MH,"__acos");
    }
    /**
     * {@snippet :
     * double __acos(double __x);
     * }
     */
    public static double __acos(double __x) {
        var mh$ = __acos$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asin$MH() {
        return RuntimeHelper.requireNonNull(constants$1149.asin$MH,"asin");
    }
    /**
     * {@snippet :
     * double asin(double __x);
     * }
     */
    public static double asin(double __x) {
        var mh$ = asin$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __asin$MH() {
        return RuntimeHelper.requireNonNull(constants$1149.__asin$MH,"__asin");
    }
    /**
     * {@snippet :
     * double __asin(double __x);
     * }
     */
    public static double __asin(double __x) {
        var mh$ = __asin$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atan$MH() {
        return RuntimeHelper.requireNonNull(constants$1149.atan$MH,"atan");
    }
    /**
     * {@snippet :
     * double atan(double __x);
     * }
     */
    public static double atan(double __x) {
        var mh$ = atan$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __atan$MH() {
        return RuntimeHelper.requireNonNull(constants$1149.__atan$MH,"__atan");
    }
    /**
     * {@snippet :
     * double __atan(double __x);
     * }
     */
    public static double __atan(double __x) {
        var mh$ = __atan$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atan2$MH() {
        return RuntimeHelper.requireNonNull(constants$1150.atan2$MH,"atan2");
    }
    /**
     * {@snippet :
     * double atan2(double __y, double __x);
     * }
     */
    public static double atan2(double __y, double __x) {
        var mh$ = atan2$MH();
        try {
            return (double)mh$.invokeExact(__y, __x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __atan2$MH() {
        return RuntimeHelper.requireNonNull(constants$1150.__atan2$MH,"__atan2");
    }
    /**
     * {@snippet :
     * double __atan2(double __y, double __x);
     * }
     */
    public static double __atan2(double __y, double __x) {
        var mh$ = __atan2$MH();
        try {
            return (double)mh$.invokeExact(__y, __x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cos$MH() {
        return RuntimeHelper.requireNonNull(constants$1150.cos$MH,"cos");
    }
    /**
     * {@snippet :
     * double cos(double __x);
     * }
     */
    public static double cos(double __x) {
        var mh$ = cos$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __cos$MH() {
        return RuntimeHelper.requireNonNull(constants$1150.__cos$MH,"__cos");
    }
    /**
     * {@snippet :
     * double __cos(double __x);
     * }
     */
    public static double __cos(double __x) {
        var mh$ = __cos$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sin$MH() {
        return RuntimeHelper.requireNonNull(constants$1150.sin$MH,"sin");
    }
    /**
     * {@snippet :
     * double sin(double __x);
     * }
     */
    public static double sin(double __x) {
        var mh$ = sin$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sin$MH() {
        return RuntimeHelper.requireNonNull(constants$1150.__sin$MH,"__sin");
    }
    /**
     * {@snippet :
     * double __sin(double __x);
     * }
     */
    public static double __sin(double __x) {
        var mh$ = __sin$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tan$MH() {
        return RuntimeHelper.requireNonNull(constants$1151.tan$MH,"tan");
    }
    /**
     * {@snippet :
     * double tan(double __x);
     * }
     */
    public static double tan(double __x) {
        var mh$ = tan$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __tan$MH() {
        return RuntimeHelper.requireNonNull(constants$1151.__tan$MH,"__tan");
    }
    /**
     * {@snippet :
     * double __tan(double __x);
     * }
     */
    public static double __tan(double __x) {
        var mh$ = __tan$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cosh$MH() {
        return RuntimeHelper.requireNonNull(constants$1151.cosh$MH,"cosh");
    }
    /**
     * {@snippet :
     * double cosh(double __x);
     * }
     */
    public static double cosh(double __x) {
        var mh$ = cosh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __cosh$MH() {
        return RuntimeHelper.requireNonNull(constants$1151.__cosh$MH,"__cosh");
    }
    /**
     * {@snippet :
     * double __cosh(double __x);
     * }
     */
    public static double __cosh(double __x) {
        var mh$ = __cosh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sinh$MH() {
        return RuntimeHelper.requireNonNull(constants$1151.sinh$MH,"sinh");
    }
    /**
     * {@snippet :
     * double sinh(double __x);
     * }
     */
    public static double sinh(double __x) {
        var mh$ = sinh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sinh$MH() {
        return RuntimeHelper.requireNonNull(constants$1151.__sinh$MH,"__sinh");
    }
    /**
     * {@snippet :
     * double __sinh(double __x);
     * }
     */
    public static double __sinh(double __x) {
        var mh$ = __sinh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tanh$MH() {
        return RuntimeHelper.requireNonNull(constants$1152.tanh$MH,"tanh");
    }
    /**
     * {@snippet :
     * double tanh(double __x);
     * }
     */
    public static double tanh(double __x) {
        var mh$ = tanh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __tanh$MH() {
        return RuntimeHelper.requireNonNull(constants$1152.__tanh$MH,"__tanh");
    }
    /**
     * {@snippet :
     * double __tanh(double __x);
     * }
     */
    public static double __tanh(double __x) {
        var mh$ = __tanh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle acosh$MH() {
        return RuntimeHelper.requireNonNull(constants$1152.acosh$MH,"acosh");
    }
    /**
     * {@snippet :
     * double acosh(double __x);
     * }
     */
    public static double acosh(double __x) {
        var mh$ = acosh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __acosh$MH() {
        return RuntimeHelper.requireNonNull(constants$1152.__acosh$MH,"__acosh");
    }
    /**
     * {@snippet :
     * double __acosh(double __x);
     * }
     */
    public static double __acosh(double __x) {
        var mh$ = __acosh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asinh$MH() {
        return RuntimeHelper.requireNonNull(constants$1152.asinh$MH,"asinh");
    }
    /**
     * {@snippet :
     * double asinh(double __x);
     * }
     */
    public static double asinh(double __x) {
        var mh$ = asinh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __asinh$MH() {
        return RuntimeHelper.requireNonNull(constants$1152.__asinh$MH,"__asinh");
    }
    /**
     * {@snippet :
     * double __asinh(double __x);
     * }
     */
    public static double __asinh(double __x) {
        var mh$ = __asinh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atanh$MH() {
        return RuntimeHelper.requireNonNull(constants$1153.atanh$MH,"atanh");
    }
    /**
     * {@snippet :
     * double atanh(double __x);
     * }
     */
    public static double atanh(double __x) {
        var mh$ = atanh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __atanh$MH() {
        return RuntimeHelper.requireNonNull(constants$1153.__atanh$MH,"__atanh");
    }
    /**
     * {@snippet :
     * double __atanh(double __x);
     * }
     */
    public static double __atanh(double __x) {
        var mh$ = __atanh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle exp$MH() {
        return RuntimeHelper.requireNonNull(constants$1153.exp$MH,"exp");
    }
    /**
     * {@snippet :
     * double exp(double __x);
     * }
     */
    public static double exp(double __x) {
        var mh$ = exp$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __exp$MH() {
        return RuntimeHelper.requireNonNull(constants$1153.__exp$MH,"__exp");
    }
    /**
     * {@snippet :
     * double __exp(double __x);
     * }
     */
    public static double __exp(double __x) {
        var mh$ = __exp$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle frexp$MH() {
        return RuntimeHelper.requireNonNull(constants$1153.frexp$MH,"frexp");
    }
    /**
     * {@snippet :
     * double frexp(double __x, int* __exponent);
     * }
     */
    public static double frexp(double __x, MemorySegment __exponent) {
        var mh$ = frexp$MH();
        try {
            return (double)mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __frexp$MH() {
        return RuntimeHelper.requireNonNull(constants$1153.__frexp$MH,"__frexp");
    }
    /**
     * {@snippet :
     * double __frexp(double __x, int* __exponent);
     * }
     */
    public static double __frexp(double __x, MemorySegment __exponent) {
        var mh$ = __frexp$MH();
        try {
            return (double)mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ldexp$MH() {
        return RuntimeHelper.requireNonNull(constants$1154.ldexp$MH,"ldexp");
    }
    /**
     * {@snippet :
     * double ldexp(double __x, int __exponent);
     * }
     */
    public static double ldexp(double __x, int __exponent) {
        var mh$ = ldexp$MH();
        try {
            return (double)mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ldexp$MH() {
        return RuntimeHelper.requireNonNull(constants$1154.__ldexp$MH,"__ldexp");
    }
    /**
     * {@snippet :
     * double __ldexp(double __x, int __exponent);
     * }
     */
    public static double __ldexp(double __x, int __exponent) {
        var mh$ = __ldexp$MH();
        try {
            return (double)mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle log$MH() {
        return RuntimeHelper.requireNonNull(constants$1154.log$MH,"log");
    }
    /**
     * {@snippet :
     * double log(double __x);
     * }
     */
    public static double log(double __x) {
        var mh$ = log$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __log$MH() {
        return RuntimeHelper.requireNonNull(constants$1154.__log$MH,"__log");
    }
    /**
     * {@snippet :
     * double __log(double __x);
     * }
     */
    public static double __log(double __x) {
        var mh$ = __log$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle log10$MH() {
        return RuntimeHelper.requireNonNull(constants$1154.log10$MH,"log10");
    }
    /**
     * {@snippet :
     * double log10(double __x);
     * }
     */
    public static double log10(double __x) {
        var mh$ = log10$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __log10$MH() {
        return RuntimeHelper.requireNonNull(constants$1154.__log10$MH,"__log10");
    }
    /**
     * {@snippet :
     * double __log10(double __x);
     * }
     */
    public static double __log10(double __x) {
        var mh$ = __log10$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle modf$MH() {
        return RuntimeHelper.requireNonNull(constants$1155.modf$MH,"modf");
    }
    /**
     * {@snippet :
     * double modf(double __x, double* __iptr);
     * }
     */
    public static double modf(double __x, MemorySegment __iptr) {
        var mh$ = modf$MH();
        try {
            return (double)mh$.invokeExact(__x, __iptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __modf$MH() {
        return RuntimeHelper.requireNonNull(constants$1155.__modf$MH,"__modf");
    }
    /**
     * {@snippet :
     * double __modf(double __x, double* __iptr);
     * }
     */
    public static double __modf(double __x, MemorySegment __iptr) {
        var mh$ = __modf$MH();
        try {
            return (double)mh$.invokeExact(__x, __iptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle expm1$MH() {
        return RuntimeHelper.requireNonNull(constants$1155.expm1$MH,"expm1");
    }
    /**
     * {@snippet :
     * double expm1(double __x);
     * }
     */
    public static double expm1(double __x) {
        var mh$ = expm1$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __expm1$MH() {
        return RuntimeHelper.requireNonNull(constants$1155.__expm1$MH,"__expm1");
    }
    /**
     * {@snippet :
     * double __expm1(double __x);
     * }
     */
    public static double __expm1(double __x) {
        var mh$ = __expm1$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle log1p$MH() {
        return RuntimeHelper.requireNonNull(constants$1155.log1p$MH,"log1p");
    }
    /**
     * {@snippet :
     * double log1p(double __x);
     * }
     */
    public static double log1p(double __x) {
        var mh$ = log1p$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __log1p$MH() {
        return RuntimeHelper.requireNonNull(constants$1155.__log1p$MH,"__log1p");
    }
    /**
     * {@snippet :
     * double __log1p(double __x);
     * }
     */
    public static double __log1p(double __x) {
        var mh$ = __log1p$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle logb$MH() {
        return RuntimeHelper.requireNonNull(constants$1156.logb$MH,"logb");
    }
    /**
     * {@snippet :
     * double logb(double __x);
     * }
     */
    public static double logb(double __x) {
        var mh$ = logb$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __logb$MH() {
        return RuntimeHelper.requireNonNull(constants$1156.__logb$MH,"__logb");
    }
    /**
     * {@snippet :
     * double __logb(double __x);
     * }
     */
    public static double __logb(double __x) {
        var mh$ = __logb$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle exp2$MH() {
        return RuntimeHelper.requireNonNull(constants$1156.exp2$MH,"exp2");
    }
    /**
     * {@snippet :
     * double exp2(double __x);
     * }
     */
    public static double exp2(double __x) {
        var mh$ = exp2$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __exp2$MH() {
        return RuntimeHelper.requireNonNull(constants$1156.__exp2$MH,"__exp2");
    }
    /**
     * {@snippet :
     * double __exp2(double __x);
     * }
     */
    public static double __exp2(double __x) {
        var mh$ = __exp2$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle log2$MH() {
        return RuntimeHelper.requireNonNull(constants$1156.log2$MH,"log2");
    }
    /**
     * {@snippet :
     * double log2(double __x);
     * }
     */
    public static double log2(double __x) {
        var mh$ = log2$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __log2$MH() {
        return RuntimeHelper.requireNonNull(constants$1156.__log2$MH,"__log2");
    }
    /**
     * {@snippet :
     * double __log2(double __x);
     * }
     */
    public static double __log2(double __x) {
        var mh$ = __log2$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pow$MH() {
        return RuntimeHelper.requireNonNull(constants$1157.pow$MH,"pow");
    }
    /**
     * {@snippet :
     * double pow(double __x, double __y);
     * }
     */
    public static double pow(double __x, double __y) {
        var mh$ = pow$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __pow$MH() {
        return RuntimeHelper.requireNonNull(constants$1157.__pow$MH,"__pow");
    }
    /**
     * {@snippet :
     * double __pow(double __x, double __y);
     * }
     */
    public static double __pow(double __x, double __y) {
        var mh$ = __pow$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sqrt$MH() {
        return RuntimeHelper.requireNonNull(constants$1157.sqrt$MH,"sqrt");
    }
    /**
     * {@snippet :
     * double sqrt(double __x);
     * }
     */
    public static double sqrt(double __x) {
        var mh$ = sqrt$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sqrt$MH() {
        return RuntimeHelper.requireNonNull(constants$1157.__sqrt$MH,"__sqrt");
    }
    /**
     * {@snippet :
     * double __sqrt(double __x);
     * }
     */
    public static double __sqrt(double __x) {
        var mh$ = __sqrt$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle hypot$MH() {
        return RuntimeHelper.requireNonNull(constants$1157.hypot$MH,"hypot");
    }
    /**
     * {@snippet :
     * double hypot(double __x, double __y);
     * }
     */
    public static double hypot(double __x, double __y) {
        var mh$ = hypot$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __hypot$MH() {
        return RuntimeHelper.requireNonNull(constants$1157.__hypot$MH,"__hypot");
    }
    /**
     * {@snippet :
     * double __hypot(double __x, double __y);
     * }
     */
    public static double __hypot(double __x, double __y) {
        var mh$ = __hypot$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cbrt$MH() {
        return RuntimeHelper.requireNonNull(constants$1158.cbrt$MH,"cbrt");
    }
    /**
     * {@snippet :
     * double cbrt(double __x);
     * }
     */
    public static double cbrt(double __x) {
        var mh$ = cbrt$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __cbrt$MH() {
        return RuntimeHelper.requireNonNull(constants$1158.__cbrt$MH,"__cbrt");
    }
    /**
     * {@snippet :
     * double __cbrt(double __x);
     * }
     */
    public static double __cbrt(double __x) {
        var mh$ = __cbrt$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ceil$MH() {
        return RuntimeHelper.requireNonNull(constants$1158.ceil$MH,"ceil");
    }
    /**
     * {@snippet :
     * double ceil(double __x);
     * }
     */
    public static double ceil(double __x) {
        var mh$ = ceil$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ceil$MH() {
        return RuntimeHelper.requireNonNull(constants$1158.__ceil$MH,"__ceil");
    }
    /**
     * {@snippet :
     * double __ceil(double __x);
     * }
     */
    public static double __ceil(double __x) {
        var mh$ = __ceil$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fabs$MH() {
        return RuntimeHelper.requireNonNull(constants$1158.fabs$MH,"fabs");
    }
    /**
     * {@snippet :
     * double fabs(double __x);
     * }
     */
    public static double fabs(double __x) {
        var mh$ = fabs$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fabs$MH() {
        return RuntimeHelper.requireNonNull(constants$1158.__fabs$MH,"__fabs");
    }
    /**
     * {@snippet :
     * double __fabs(double __x);
     * }
     */
    public static double __fabs(double __x) {
        var mh$ = __fabs$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle floor$MH() {
        return RuntimeHelper.requireNonNull(constants$1159.floor$MH,"floor");
    }
    /**
     * {@snippet :
     * double floor(double __x);
     * }
     */
    public static double floor(double __x) {
        var mh$ = floor$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __floor$MH() {
        return RuntimeHelper.requireNonNull(constants$1159.__floor$MH,"__floor");
    }
    /**
     * {@snippet :
     * double __floor(double __x);
     * }
     */
    public static double __floor(double __x) {
        var mh$ = __floor$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmod$MH() {
        return RuntimeHelper.requireNonNull(constants$1159.fmod$MH,"fmod");
    }
    /**
     * {@snippet :
     * double fmod(double __x, double __y);
     * }
     */
    public static double fmod(double __x, double __y) {
        var mh$ = fmod$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fmod$MH() {
        return RuntimeHelper.requireNonNull(constants$1159.__fmod$MH,"__fmod");
    }
    /**
     * {@snippet :
     * double __fmod(double __x, double __y);
     * }
     */
    public static double __fmod(double __x, double __y) {
        var mh$ = __fmod$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isinf$MH() {
        return RuntimeHelper.requireNonNull(constants$1159.isinf$MH,"isinf");
    }
    /**
     * {@snippet :
     * int isinf(double __value);
     * }
     */
    public static int isinf(double __value) {
        var mh$ = isinf$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle finite$MH() {
        return RuntimeHelper.requireNonNull(constants$1159.finite$MH,"finite");
    }
    /**
     * {@snippet :
     * int finite(double __value);
     * }
     */
    public static int finite(double __value) {
        var mh$ = finite$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle drem$MH() {
        return RuntimeHelper.requireNonNull(constants$1160.drem$MH,"drem");
    }
    /**
     * {@snippet :
     * double drem(double __x, double __y);
     * }
     */
    public static double drem(double __x, double __y) {
        var mh$ = drem$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __drem$MH() {
        return RuntimeHelper.requireNonNull(constants$1160.__drem$MH,"__drem");
    }
    /**
     * {@snippet :
     * double __drem(double __x, double __y);
     * }
     */
    public static double __drem(double __x, double __y) {
        var mh$ = __drem$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle significand$MH() {
        return RuntimeHelper.requireNonNull(constants$1160.significand$MH,"significand");
    }
    /**
     * {@snippet :
     * double significand(double __x);
     * }
     */
    public static double significand(double __x) {
        var mh$ = significand$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __significand$MH() {
        return RuntimeHelper.requireNonNull(constants$1160.__significand$MH,"__significand");
    }
    /**
     * {@snippet :
     * double __significand(double __x);
     * }
     */
    public static double __significand(double __x) {
        var mh$ = __significand$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle copysign$MH() {
        return RuntimeHelper.requireNonNull(constants$1160.copysign$MH,"copysign");
    }
    /**
     * {@snippet :
     * double copysign(double __x, double __y);
     * }
     */
    public static double copysign(double __x, double __y) {
        var mh$ = copysign$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __copysign$MH() {
        return RuntimeHelper.requireNonNull(constants$1160.__copysign$MH,"__copysign");
    }
    /**
     * {@snippet :
     * double __copysign(double __x, double __y);
     * }
     */
    public static double __copysign(double __x, double __y) {
        var mh$ = __copysign$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nan$MH() {
        return RuntimeHelper.requireNonNull(constants$1161.nan$MH,"nan");
    }
    /**
     * {@snippet :
     * double nan(char* __tagb);
     * }
     */
    public static double nan(MemorySegment __tagb) {
        var mh$ = nan$MH();
        try {
            return (double)mh$.invokeExact(__tagb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __nan$MH() {
        return RuntimeHelper.requireNonNull(constants$1161.__nan$MH,"__nan");
    }
    /**
     * {@snippet :
     * double __nan(char* __tagb);
     * }
     */
    public static double __nan(MemorySegment __tagb) {
        var mh$ = __nan$MH();
        try {
            return (double)mh$.invokeExact(__tagb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isnan$MH() {
        return RuntimeHelper.requireNonNull(constants$1161.isnan$MH,"isnan");
    }
    /**
     * {@snippet :
     * int isnan(double __value);
     * }
     */
    public static int isnan(double __value) {
        var mh$ = isnan$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle j0$MH() {
        return RuntimeHelper.requireNonNull(constants$1161.j0$MH,"j0");
    }
    /**
     * {@snippet :
     * double j0(double);
     * }
     */
    public static double j0(double x0) {
        var mh$ = j0$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __j0$MH() {
        return RuntimeHelper.requireNonNull(constants$1161.__j0$MH,"__j0");
    }
    /**
     * {@snippet :
     * double __j0(double);
     * }
     */
    public static double __j0(double x0) {
        var mh$ = __j0$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle j1$MH() {
        return RuntimeHelper.requireNonNull(constants$1161.j1$MH,"j1");
    }
    /**
     * {@snippet :
     * double j1(double);
     * }
     */
    public static double j1(double x0) {
        var mh$ = j1$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __j1$MH() {
        return RuntimeHelper.requireNonNull(constants$1162.__j1$MH,"__j1");
    }
    /**
     * {@snippet :
     * double __j1(double);
     * }
     */
    public static double __j1(double x0) {
        var mh$ = __j1$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jn$MH() {
        return RuntimeHelper.requireNonNull(constants$1162.jn$MH,"jn");
    }
    /**
     * {@snippet :
     * double jn(int, double);
     * }
     */
    public static double jn(int x0, double x1) {
        var mh$ = jn$MH();
        try {
            return (double)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __jn$MH() {
        return RuntimeHelper.requireNonNull(constants$1162.__jn$MH,"__jn");
    }
    /**
     * {@snippet :
     * double __jn(int, double);
     * }
     */
    public static double __jn(int x0, double x1) {
        var mh$ = __jn$MH();
        try {
            return (double)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle y0$MH() {
        return RuntimeHelper.requireNonNull(constants$1162.y0$MH,"y0");
    }
    /**
     * {@snippet :
     * double y0(double);
     * }
     */
    public static double y0(double x0) {
        var mh$ = y0$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __y0$MH() {
        return RuntimeHelper.requireNonNull(constants$1162.__y0$MH,"__y0");
    }
    /**
     * {@snippet :
     * double __y0(double);
     * }
     */
    public static double __y0(double x0) {
        var mh$ = __y0$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle y1$MH() {
        return RuntimeHelper.requireNonNull(constants$1162.y1$MH,"y1");
    }
    /**
     * {@snippet :
     * double y1(double);
     * }
     */
    public static double y1(double x0) {
        var mh$ = y1$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __y1$MH() {
        return RuntimeHelper.requireNonNull(constants$1163.__y1$MH,"__y1");
    }
    /**
     * {@snippet :
     * double __y1(double);
     * }
     */
    public static double __y1(double x0) {
        var mh$ = __y1$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yn$MH() {
        return RuntimeHelper.requireNonNull(constants$1163.yn$MH,"yn");
    }
    /**
     * {@snippet :
     * double yn(int, double);
     * }
     */
    public static double yn(int x0, double x1) {
        var mh$ = yn$MH();
        try {
            return (double)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __yn$MH() {
        return RuntimeHelper.requireNonNull(constants$1163.__yn$MH,"__yn");
    }
    /**
     * {@snippet :
     * double __yn(int, double);
     * }
     */
    public static double __yn(int x0, double x1) {
        var mh$ = __yn$MH();
        try {
            return (double)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erf$MH() {
        return RuntimeHelper.requireNonNull(constants$1163.erf$MH,"erf");
    }
    /**
     * {@snippet :
     * double erf(double);
     * }
     */
    public static double erf(double x0) {
        var mh$ = erf$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __erf$MH() {
        return RuntimeHelper.requireNonNull(constants$1163.__erf$MH,"__erf");
    }
    /**
     * {@snippet :
     * double __erf(double);
     * }
     */
    public static double __erf(double x0) {
        var mh$ = __erf$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erfc$MH() {
        return RuntimeHelper.requireNonNull(constants$1163.erfc$MH,"erfc");
    }
    /**
     * {@snippet :
     * double erfc(double);
     * }
     */
    public static double erfc(double x0) {
        var mh$ = erfc$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __erfc$MH() {
        return RuntimeHelper.requireNonNull(constants$1164.__erfc$MH,"__erfc");
    }
    /**
     * {@snippet :
     * double __erfc(double);
     * }
     */
    public static double __erfc(double x0) {
        var mh$ = __erfc$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lgamma$MH() {
        return RuntimeHelper.requireNonNull(constants$1164.lgamma$MH,"lgamma");
    }
    /**
     * {@snippet :
     * double lgamma(double);
     * }
     */
    public static double lgamma(double x0) {
        var mh$ = lgamma$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __lgamma$MH() {
        return RuntimeHelper.requireNonNull(constants$1164.__lgamma$MH,"__lgamma");
    }
    /**
     * {@snippet :
     * double __lgamma(double);
     * }
     */
    public static double __lgamma(double x0) {
        var mh$ = __lgamma$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tgamma$MH() {
        return RuntimeHelper.requireNonNull(constants$1164.tgamma$MH,"tgamma");
    }
    /**
     * {@snippet :
     * double tgamma(double);
     * }
     */
    public static double tgamma(double x0) {
        var mh$ = tgamma$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __tgamma$MH() {
        return RuntimeHelper.requireNonNull(constants$1164.__tgamma$MH,"__tgamma");
    }
    /**
     * {@snippet :
     * double __tgamma(double);
     * }
     */
    public static double __tgamma(double x0) {
        var mh$ = __tgamma$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gamma$MH() {
        return RuntimeHelper.requireNonNull(constants$1164.gamma$MH,"gamma");
    }
    /**
     * {@snippet :
     * double gamma(double);
     * }
     */
    public static double gamma(double x0) {
        var mh$ = gamma$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __gamma$MH() {
        return RuntimeHelper.requireNonNull(constants$1165.__gamma$MH,"__gamma");
    }
    /**
     * {@snippet :
     * double __gamma(double);
     * }
     */
    public static double __gamma(double x0) {
        var mh$ = __gamma$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lgamma_r$MH() {
        return RuntimeHelper.requireNonNull(constants$1165.lgamma_r$MH,"lgamma_r");
    }
    /**
     * {@snippet :
     * double lgamma_r(double, int* __signgamp);
     * }
     */
    public static double lgamma_r(double x0, MemorySegment __signgamp) {
        var mh$ = lgamma_r$MH();
        try {
            return (double)mh$.invokeExact(x0, __signgamp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __lgamma_r$MH() {
        return RuntimeHelper.requireNonNull(constants$1165.__lgamma_r$MH,"__lgamma_r");
    }
    /**
     * {@snippet :
     * double __lgamma_r(double, int* __signgamp);
     * }
     */
    public static double __lgamma_r(double x0, MemorySegment __signgamp) {
        var mh$ = __lgamma_r$MH();
        try {
            return (double)mh$.invokeExact(x0, __signgamp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rint$MH() {
        return RuntimeHelper.requireNonNull(constants$1165.rint$MH,"rint");
    }
    /**
     * {@snippet :
     * double rint(double __x);
     * }
     */
    public static double rint(double __x) {
        var mh$ = rint$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __rint$MH() {
        return RuntimeHelper.requireNonNull(constants$1165.__rint$MH,"__rint");
    }
    /**
     * {@snippet :
     * double __rint(double __x);
     * }
     */
    public static double __rint(double __x) {
        var mh$ = __rint$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nextafter$MH() {
        return RuntimeHelper.requireNonNull(constants$1165.nextafter$MH,"nextafter");
    }
    /**
     * {@snippet :
     * double nextafter(double __x, double __y);
     * }
     */
    public static double nextafter(double __x, double __y) {
        var mh$ = nextafter$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __nextafter$MH() {
        return RuntimeHelper.requireNonNull(constants$1166.__nextafter$MH,"__nextafter");
    }
    /**
     * {@snippet :
     * double __nextafter(double __x, double __y);
     * }
     */
    public static double __nextafter(double __x, double __y) {
        var mh$ = __nextafter$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle remainder$MH() {
        return RuntimeHelper.requireNonNull(constants$1166.remainder$MH,"remainder");
    }
    /**
     * {@snippet :
     * double remainder(double __x, double __y);
     * }
     */
    public static double remainder(double __x, double __y) {
        var mh$ = remainder$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __remainder$MH() {
        return RuntimeHelper.requireNonNull(constants$1166.__remainder$MH,"__remainder");
    }
    /**
     * {@snippet :
     * double __remainder(double __x, double __y);
     * }
     */
    public static double __remainder(double __x, double __y) {
        var mh$ = __remainder$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scalbn$MH() {
        return RuntimeHelper.requireNonNull(constants$1166.scalbn$MH,"scalbn");
    }
    /**
     * {@snippet :
     * double scalbn(double __x, int __n);
     * }
     */
    public static double scalbn(double __x, int __n) {
        var mh$ = scalbn$MH();
        try {
            return (double)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __scalbn$MH() {
        return RuntimeHelper.requireNonNull(constants$1166.__scalbn$MH,"__scalbn");
    }
    /**
     * {@snippet :
     * double __scalbn(double __x, int __n);
     * }
     */
    public static double __scalbn(double __x, int __n) {
        var mh$ = __scalbn$MH();
        try {
            return (double)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ilogb$MH() {
        return RuntimeHelper.requireNonNull(constants$1166.ilogb$MH,"ilogb");
    }
    /**
     * {@snippet :
     * int ilogb(double __x);
     * }
     */
    public static int ilogb(double __x) {
        var mh$ = ilogb$MH();
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ilogb$MH() {
        return RuntimeHelper.requireNonNull(constants$1167.__ilogb$MH,"__ilogb");
    }
    /**
     * {@snippet :
     * int __ilogb(double __x);
     * }
     */
    public static int __ilogb(double __x) {
        var mh$ = __ilogb$MH();
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scalbln$MH() {
        return RuntimeHelper.requireNonNull(constants$1167.scalbln$MH,"scalbln");
    }
    /**
     * {@snippet :
     * double scalbln(double __x, long __n);
     * }
     */
    public static double scalbln(double __x, long __n) {
        var mh$ = scalbln$MH();
        try {
            return (double)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __scalbln$MH() {
        return RuntimeHelper.requireNonNull(constants$1167.__scalbln$MH,"__scalbln");
    }
    /**
     * {@snippet :
     * double __scalbln(double __x, long __n);
     * }
     */
    public static double __scalbln(double __x, long __n) {
        var mh$ = __scalbln$MH();
        try {
            return (double)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nearbyint$MH() {
        return RuntimeHelper.requireNonNull(constants$1167.nearbyint$MH,"nearbyint");
    }
    /**
     * {@snippet :
     * double nearbyint(double __x);
     * }
     */
    public static double nearbyint(double __x) {
        var mh$ = nearbyint$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __nearbyint$MH() {
        return RuntimeHelper.requireNonNull(constants$1167.__nearbyint$MH,"__nearbyint");
    }
    /**
     * {@snippet :
     * double __nearbyint(double __x);
     * }
     */
    public static double __nearbyint(double __x) {
        var mh$ = __nearbyint$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle round$MH() {
        return RuntimeHelper.requireNonNull(constants$1167.round$MH,"round");
    }
    /**
     * {@snippet :
     * double round(double __x);
     * }
     */
    public static double round(double __x) {
        var mh$ = round$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __round$MH() {
        return RuntimeHelper.requireNonNull(constants$1168.__round$MH,"__round");
    }
    /**
     * {@snippet :
     * double __round(double __x);
     * }
     */
    public static double __round(double __x) {
        var mh$ = __round$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle trunc$MH() {
        return RuntimeHelper.requireNonNull(constants$1168.trunc$MH,"trunc");
    }
    /**
     * {@snippet :
     * double trunc(double __x);
     * }
     */
    public static double trunc(double __x) {
        var mh$ = trunc$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __trunc$MH() {
        return RuntimeHelper.requireNonNull(constants$1168.__trunc$MH,"__trunc");
    }
    /**
     * {@snippet :
     * double __trunc(double __x);
     * }
     */
    public static double __trunc(double __x) {
        var mh$ = __trunc$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle remquo$MH() {
        return RuntimeHelper.requireNonNull(constants$1168.remquo$MH,"remquo");
    }
    /**
     * {@snippet :
     * double remquo(double __x, double __y, int* __quo);
     * }
     */
    public static double remquo(double __x, double __y, MemorySegment __quo) {
        var mh$ = remquo$MH();
        try {
            return (double)mh$.invokeExact(__x, __y, __quo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __remquo$MH() {
        return RuntimeHelper.requireNonNull(constants$1168.__remquo$MH,"__remquo");
    }
    /**
     * {@snippet :
     * double __remquo(double __x, double __y, int* __quo);
     * }
     */
    public static double __remquo(double __x, double __y, MemorySegment __quo) {
        var mh$ = __remquo$MH();
        try {
            return (double)mh$.invokeExact(__x, __y, __quo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrint$MH() {
        return RuntimeHelper.requireNonNull(constants$1168.lrint$MH,"lrint");
    }
    /**
     * {@snippet :
     * long lrint(double __x);
     * }
     */
    public static long lrint(double __x) {
        var mh$ = lrint$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __lrint$MH() {
        return RuntimeHelper.requireNonNull(constants$1169.__lrint$MH,"__lrint");
    }
    /**
     * {@snippet :
     * long __lrint(double __x);
     * }
     */
    public static long __lrint(double __x) {
        var mh$ = __lrint$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llrint$MH() {
        return RuntimeHelper.requireNonNull(constants$1169.llrint$MH,"llrint");
    }
    /**
     * {@snippet :
     * long long llrint(double __x);
     * }
     */
    public static long llrint(double __x) {
        var mh$ = llrint$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __llrint$MH() {
        return RuntimeHelper.requireNonNull(constants$1169.__llrint$MH,"__llrint");
    }
    /**
     * {@snippet :
     * long long __llrint(double __x);
     * }
     */
    public static long __llrint(double __x) {
        var mh$ = __llrint$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lround$MH() {
        return RuntimeHelper.requireNonNull(constants$1169.lround$MH,"lround");
    }
    /**
     * {@snippet :
     * long lround(double __x);
     * }
     */
    public static long lround(double __x) {
        var mh$ = lround$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __lround$MH() {
        return RuntimeHelper.requireNonNull(constants$1169.__lround$MH,"__lround");
    }
    /**
     * {@snippet :
     * long __lround(double __x);
     * }
     */
    public static long __lround(double __x) {
        var mh$ = __lround$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llround$MH() {
        return RuntimeHelper.requireNonNull(constants$1169.llround$MH,"llround");
    }
    /**
     * {@snippet :
     * long long llround(double __x);
     * }
     */
    public static long llround(double __x) {
        var mh$ = llround$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __llround$MH() {
        return RuntimeHelper.requireNonNull(constants$1170.__llround$MH,"__llround");
    }
    /**
     * {@snippet :
     * long long __llround(double __x);
     * }
     */
    public static long __llround(double __x) {
        var mh$ = __llround$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fdim$MH() {
        return RuntimeHelper.requireNonNull(constants$1170.fdim$MH,"fdim");
    }
    /**
     * {@snippet :
     * double fdim(double __x, double __y);
     * }
     */
    public static double fdim(double __x, double __y) {
        var mh$ = fdim$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fdim$MH() {
        return RuntimeHelper.requireNonNull(constants$1170.__fdim$MH,"__fdim");
    }
    /**
     * {@snippet :
     * double __fdim(double __x, double __y);
     * }
     */
    public static double __fdim(double __x, double __y) {
        var mh$ = __fdim$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmax$MH() {
        return RuntimeHelper.requireNonNull(constants$1170.fmax$MH,"fmax");
    }
    /**
     * {@snippet :
     * double fmax(double __x, double __y);
     * }
     */
    public static double fmax(double __x, double __y) {
        var mh$ = fmax$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fmax$MH() {
        return RuntimeHelper.requireNonNull(constants$1170.__fmax$MH,"__fmax");
    }
    /**
     * {@snippet :
     * double __fmax(double __x, double __y);
     * }
     */
    public static double __fmax(double __x, double __y) {
        var mh$ = __fmax$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmin$MH() {
        return RuntimeHelper.requireNonNull(constants$1170.fmin$MH,"fmin");
    }
    /**
     * {@snippet :
     * double fmin(double __x, double __y);
     * }
     */
    public static double fmin(double __x, double __y) {
        var mh$ = fmin$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fmin$MH() {
        return RuntimeHelper.requireNonNull(constants$1171.__fmin$MH,"__fmin");
    }
    /**
     * {@snippet :
     * double __fmin(double __x, double __y);
     * }
     */
    public static double __fmin(double __x, double __y) {
        var mh$ = __fmin$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fma$MH() {
        return RuntimeHelper.requireNonNull(constants$1171.fma$MH,"fma");
    }
    /**
     * {@snippet :
     * double fma(double __x, double __y, double __z);
     * }
     */
    public static double fma(double __x, double __y, double __z) {
        var mh$ = fma$MH();
        try {
            return (double)mh$.invokeExact(__x, __y, __z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fma$MH() {
        return RuntimeHelper.requireNonNull(constants$1171.__fma$MH,"__fma");
    }
    /**
     * {@snippet :
     * double __fma(double __x, double __y, double __z);
     * }
     */
    public static double __fma(double __x, double __y, double __z) {
        var mh$ = __fma$MH();
        try {
            return (double)mh$.invokeExact(__x, __y, __z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scalb$MH() {
        return RuntimeHelper.requireNonNull(constants$1171.scalb$MH,"scalb");
    }
    /**
     * {@snippet :
     * double scalb(double __x, double __n);
     * }
     */
    public static double scalb(double __x, double __n) {
        var mh$ = scalb$MH();
        try {
            return (double)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __scalb$MH() {
        return RuntimeHelper.requireNonNull(constants$1171.__scalb$MH,"__scalb");
    }
    /**
     * {@snippet :
     * double __scalb(double __x, double __n);
     * }
     */
    public static double __scalb(double __x, double __n) {
        var mh$ = __scalb$MH();
        try {
            return (double)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fpclassifyf$MH() {
        return RuntimeHelper.requireNonNull(constants$1171.__fpclassifyf$MH,"__fpclassifyf");
    }
    /**
     * {@snippet :
     * int __fpclassifyf(float __value);
     * }
     */
    public static int __fpclassifyf(float __value) {
        var mh$ = __fpclassifyf$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __signbitf$MH() {
        return RuntimeHelper.requireNonNull(constants$1172.__signbitf$MH,"__signbitf");
    }
    /**
     * {@snippet :
     * int __signbitf(float __value);
     * }
     */
    public static int __signbitf(float __value) {
        var mh$ = __signbitf$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __isinff$MH() {
        return RuntimeHelper.requireNonNull(constants$1172.__isinff$MH,"__isinff");
    }
    /**
     * {@snippet :
     * int __isinff(float __value);
     * }
     */
    public static int __isinff(float __value) {
        var mh$ = __isinff$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __finitef$MH() {
        return RuntimeHelper.requireNonNull(constants$1172.__finitef$MH,"__finitef");
    }
    /**
     * {@snippet :
     * int __finitef(float __value);
     * }
     */
    public static int __finitef(float __value) {
        var mh$ = __finitef$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __isnanf$MH() {
        return RuntimeHelper.requireNonNull(constants$1172.__isnanf$MH,"__isnanf");
    }
    /**
     * {@snippet :
     * int __isnanf(float __value);
     * }
     */
    public static int __isnanf(float __value) {
        var mh$ = __isnanf$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __iseqsigf$MH() {
        return RuntimeHelper.requireNonNull(constants$1172.__iseqsigf$MH,"__iseqsigf");
    }
    /**
     * {@snippet :
     * int __iseqsigf(float __x, float __y);
     * }
     */
    public static int __iseqsigf(float __x, float __y) {
        var mh$ = __iseqsigf$MH();
        try {
            return (int)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __issignalingf$MH() {
        return RuntimeHelper.requireNonNull(constants$1172.__issignalingf$MH,"__issignalingf");
    }
    /**
     * {@snippet :
     * int __issignalingf(float __value);
     * }
     */
    public static int __issignalingf(float __value) {
        var mh$ = __issignalingf$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle acosf$MH() {
        return RuntimeHelper.requireNonNull(constants$1173.acosf$MH,"acosf");
    }
    /**
     * {@snippet :
     * float acosf(float __x);
     * }
     */
    public static float acosf(float __x) {
        var mh$ = acosf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __acosf$MH() {
        return RuntimeHelper.requireNonNull(constants$1173.__acosf$MH,"__acosf");
    }
    /**
     * {@snippet :
     * float __acosf(float __x);
     * }
     */
    public static float __acosf(float __x) {
        var mh$ = __acosf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asinf$MH() {
        return RuntimeHelper.requireNonNull(constants$1173.asinf$MH,"asinf");
    }
    /**
     * {@snippet :
     * float asinf(float __x);
     * }
     */
    public static float asinf(float __x) {
        var mh$ = asinf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __asinf$MH() {
        return RuntimeHelper.requireNonNull(constants$1173.__asinf$MH,"__asinf");
    }
    /**
     * {@snippet :
     * float __asinf(float __x);
     * }
     */
    public static float __asinf(float __x) {
        var mh$ = __asinf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atanf$MH() {
        return RuntimeHelper.requireNonNull(constants$1173.atanf$MH,"atanf");
    }
    /**
     * {@snippet :
     * float atanf(float __x);
     * }
     */
    public static float atanf(float __x) {
        var mh$ = atanf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __atanf$MH() {
        return RuntimeHelper.requireNonNull(constants$1173.__atanf$MH,"__atanf");
    }
    /**
     * {@snippet :
     * float __atanf(float __x);
     * }
     */
    public static float __atanf(float __x) {
        var mh$ = __atanf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atan2f$MH() {
        return RuntimeHelper.requireNonNull(constants$1174.atan2f$MH,"atan2f");
    }
    /**
     * {@snippet :
     * float atan2f(float __y, float __x);
     * }
     */
    public static float atan2f(float __y, float __x) {
        var mh$ = atan2f$MH();
        try {
            return (float)mh$.invokeExact(__y, __x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __atan2f$MH() {
        return RuntimeHelper.requireNonNull(constants$1174.__atan2f$MH,"__atan2f");
    }
    /**
     * {@snippet :
     * float __atan2f(float __y, float __x);
     * }
     */
    public static float __atan2f(float __y, float __x) {
        var mh$ = __atan2f$MH();
        try {
            return (float)mh$.invokeExact(__y, __x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cosf$MH() {
        return RuntimeHelper.requireNonNull(constants$1174.cosf$MH,"cosf");
    }
    /**
     * {@snippet :
     * float cosf(float __x);
     * }
     */
    public static float cosf(float __x) {
        var mh$ = cosf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __cosf$MH() {
        return RuntimeHelper.requireNonNull(constants$1174.__cosf$MH,"__cosf");
    }
    /**
     * {@snippet :
     * float __cosf(float __x);
     * }
     */
    public static float __cosf(float __x) {
        var mh$ = __cosf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sinf$MH() {
        return RuntimeHelper.requireNonNull(constants$1174.sinf$MH,"sinf");
    }
    /**
     * {@snippet :
     * float sinf(float __x);
     * }
     */
    public static float sinf(float __x) {
        var mh$ = sinf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sinf$MH() {
        return RuntimeHelper.requireNonNull(constants$1174.__sinf$MH,"__sinf");
    }
    /**
     * {@snippet :
     * float __sinf(float __x);
     * }
     */
    public static float __sinf(float __x) {
        var mh$ = __sinf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tanf$MH() {
        return RuntimeHelper.requireNonNull(constants$1175.tanf$MH,"tanf");
    }
    /**
     * {@snippet :
     * float tanf(float __x);
     * }
     */
    public static float tanf(float __x) {
        var mh$ = tanf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __tanf$MH() {
        return RuntimeHelper.requireNonNull(constants$1175.__tanf$MH,"__tanf");
    }
    /**
     * {@snippet :
     * float __tanf(float __x);
     * }
     */
    public static float __tanf(float __x) {
        var mh$ = __tanf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle coshf$MH() {
        return RuntimeHelper.requireNonNull(constants$1175.coshf$MH,"coshf");
    }
    /**
     * {@snippet :
     * float coshf(float __x);
     * }
     */
    public static float coshf(float __x) {
        var mh$ = coshf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __coshf$MH() {
        return RuntimeHelper.requireNonNull(constants$1175.__coshf$MH,"__coshf");
    }
    /**
     * {@snippet :
     * float __coshf(float __x);
     * }
     */
    public static float __coshf(float __x) {
        var mh$ = __coshf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sinhf$MH() {
        return RuntimeHelper.requireNonNull(constants$1175.sinhf$MH,"sinhf");
    }
    /**
     * {@snippet :
     * float sinhf(float __x);
     * }
     */
    public static float sinhf(float __x) {
        var mh$ = sinhf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sinhf$MH() {
        return RuntimeHelper.requireNonNull(constants$1175.__sinhf$MH,"__sinhf");
    }
    /**
     * {@snippet :
     * float __sinhf(float __x);
     * }
     */
    public static float __sinhf(float __x) {
        var mh$ = __sinhf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tanhf$MH() {
        return RuntimeHelper.requireNonNull(constants$1176.tanhf$MH,"tanhf");
    }
    /**
     * {@snippet :
     * float tanhf(float __x);
     * }
     */
    public static float tanhf(float __x) {
        var mh$ = tanhf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __tanhf$MH() {
        return RuntimeHelper.requireNonNull(constants$1176.__tanhf$MH,"__tanhf");
    }
    /**
     * {@snippet :
     * float __tanhf(float __x);
     * }
     */
    public static float __tanhf(float __x) {
        var mh$ = __tanhf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle acoshf$MH() {
        return RuntimeHelper.requireNonNull(constants$1176.acoshf$MH,"acoshf");
    }
    /**
     * {@snippet :
     * float acoshf(float __x);
     * }
     */
    public static float acoshf(float __x) {
        var mh$ = acoshf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __acoshf$MH() {
        return RuntimeHelper.requireNonNull(constants$1176.__acoshf$MH,"__acoshf");
    }
    /**
     * {@snippet :
     * float __acoshf(float __x);
     * }
     */
    public static float __acoshf(float __x) {
        var mh$ = __acoshf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asinhf$MH() {
        return RuntimeHelper.requireNonNull(constants$1176.asinhf$MH,"asinhf");
    }
    /**
     * {@snippet :
     * float asinhf(float __x);
     * }
     */
    public static float asinhf(float __x) {
        var mh$ = asinhf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __asinhf$MH() {
        return RuntimeHelper.requireNonNull(constants$1176.__asinhf$MH,"__asinhf");
    }
    /**
     * {@snippet :
     * float __asinhf(float __x);
     * }
     */
    public static float __asinhf(float __x) {
        var mh$ = __asinhf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atanhf$MH() {
        return RuntimeHelper.requireNonNull(constants$1177.atanhf$MH,"atanhf");
    }
    /**
     * {@snippet :
     * float atanhf(float __x);
     * }
     */
    public static float atanhf(float __x) {
        var mh$ = atanhf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __atanhf$MH() {
        return RuntimeHelper.requireNonNull(constants$1177.__atanhf$MH,"__atanhf");
    }
    /**
     * {@snippet :
     * float __atanhf(float __x);
     * }
     */
    public static float __atanhf(float __x) {
        var mh$ = __atanhf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle expf$MH() {
        return RuntimeHelper.requireNonNull(constants$1177.expf$MH,"expf");
    }
    /**
     * {@snippet :
     * float expf(float __x);
     * }
     */
    public static float expf(float __x) {
        var mh$ = expf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __expf$MH() {
        return RuntimeHelper.requireNonNull(constants$1177.__expf$MH,"__expf");
    }
    /**
     * {@snippet :
     * float __expf(float __x);
     * }
     */
    public static float __expf(float __x) {
        var mh$ = __expf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle frexpf$MH() {
        return RuntimeHelper.requireNonNull(constants$1177.frexpf$MH,"frexpf");
    }
    /**
     * {@snippet :
     * float frexpf(float __x, int* __exponent);
     * }
     */
    public static float frexpf(float __x, MemorySegment __exponent) {
        var mh$ = frexpf$MH();
        try {
            return (float)mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __frexpf$MH() {
        return RuntimeHelper.requireNonNull(constants$1177.__frexpf$MH,"__frexpf");
    }
    /**
     * {@snippet :
     * float __frexpf(float __x, int* __exponent);
     * }
     */
    public static float __frexpf(float __x, MemorySegment __exponent) {
        var mh$ = __frexpf$MH();
        try {
            return (float)mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ldexpf$MH() {
        return RuntimeHelper.requireNonNull(constants$1178.ldexpf$MH,"ldexpf");
    }
    /**
     * {@snippet :
     * float ldexpf(float __x, int __exponent);
     * }
     */
    public static float ldexpf(float __x, int __exponent) {
        var mh$ = ldexpf$MH();
        try {
            return (float)mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ldexpf$MH() {
        return RuntimeHelper.requireNonNull(constants$1178.__ldexpf$MH,"__ldexpf");
    }
    /**
     * {@snippet :
     * float __ldexpf(float __x, int __exponent);
     * }
     */
    public static float __ldexpf(float __x, int __exponent) {
        var mh$ = __ldexpf$MH();
        try {
            return (float)mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle logf$MH() {
        return RuntimeHelper.requireNonNull(constants$1178.logf$MH,"logf");
    }
    /**
     * {@snippet :
     * float logf(float __x);
     * }
     */
    public static float logf(float __x) {
        var mh$ = logf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __logf$MH() {
        return RuntimeHelper.requireNonNull(constants$1178.__logf$MH,"__logf");
    }
    /**
     * {@snippet :
     * float __logf(float __x);
     * }
     */
    public static float __logf(float __x) {
        var mh$ = __logf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle log10f$MH() {
        return RuntimeHelper.requireNonNull(constants$1178.log10f$MH,"log10f");
    }
    /**
     * {@snippet :
     * float log10f(float __x);
     * }
     */
    public static float log10f(float __x) {
        var mh$ = log10f$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __log10f$MH() {
        return RuntimeHelper.requireNonNull(constants$1178.__log10f$MH,"__log10f");
    }
    /**
     * {@snippet :
     * float __log10f(float __x);
     * }
     */
    public static float __log10f(float __x) {
        var mh$ = __log10f$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle modff$MH() {
        return RuntimeHelper.requireNonNull(constants$1179.modff$MH,"modff");
    }
    /**
     * {@snippet :
     * float modff(float __x, float* __iptr);
     * }
     */
    public static float modff(float __x, MemorySegment __iptr) {
        var mh$ = modff$MH();
        try {
            return (float)mh$.invokeExact(__x, __iptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __modff$MH() {
        return RuntimeHelper.requireNonNull(constants$1179.__modff$MH,"__modff");
    }
    /**
     * {@snippet :
     * float __modff(float __x, float* __iptr);
     * }
     */
    public static float __modff(float __x, MemorySegment __iptr) {
        var mh$ = __modff$MH();
        try {
            return (float)mh$.invokeExact(__x, __iptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle expm1f$MH() {
        return RuntimeHelper.requireNonNull(constants$1179.expm1f$MH,"expm1f");
    }
    /**
     * {@snippet :
     * float expm1f(float __x);
     * }
     */
    public static float expm1f(float __x) {
        var mh$ = expm1f$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __expm1f$MH() {
        return RuntimeHelper.requireNonNull(constants$1179.__expm1f$MH,"__expm1f");
    }
    /**
     * {@snippet :
     * float __expm1f(float __x);
     * }
     */
    public static float __expm1f(float __x) {
        var mh$ = __expm1f$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle log1pf$MH() {
        return RuntimeHelper.requireNonNull(constants$1179.log1pf$MH,"log1pf");
    }
    /**
     * {@snippet :
     * float log1pf(float __x);
     * }
     */
    public static float log1pf(float __x) {
        var mh$ = log1pf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __log1pf$MH() {
        return RuntimeHelper.requireNonNull(constants$1179.__log1pf$MH,"__log1pf");
    }
    /**
     * {@snippet :
     * float __log1pf(float __x);
     * }
     */
    public static float __log1pf(float __x) {
        var mh$ = __log1pf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle logbf$MH() {
        return RuntimeHelper.requireNonNull(constants$1180.logbf$MH,"logbf");
    }
    /**
     * {@snippet :
     * float logbf(float __x);
     * }
     */
    public static float logbf(float __x) {
        var mh$ = logbf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __logbf$MH() {
        return RuntimeHelper.requireNonNull(constants$1180.__logbf$MH,"__logbf");
    }
    /**
     * {@snippet :
     * float __logbf(float __x);
     * }
     */
    public static float __logbf(float __x) {
        var mh$ = __logbf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle exp2f$MH() {
        return RuntimeHelper.requireNonNull(constants$1180.exp2f$MH,"exp2f");
    }
    /**
     * {@snippet :
     * float exp2f(float __x);
     * }
     */
    public static float exp2f(float __x) {
        var mh$ = exp2f$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __exp2f$MH() {
        return RuntimeHelper.requireNonNull(constants$1180.__exp2f$MH,"__exp2f");
    }
    /**
     * {@snippet :
     * float __exp2f(float __x);
     * }
     */
    public static float __exp2f(float __x) {
        var mh$ = __exp2f$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle log2f$MH() {
        return RuntimeHelper.requireNonNull(constants$1180.log2f$MH,"log2f");
    }
    /**
     * {@snippet :
     * float log2f(float __x);
     * }
     */
    public static float log2f(float __x) {
        var mh$ = log2f$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __log2f$MH() {
        return RuntimeHelper.requireNonNull(constants$1180.__log2f$MH,"__log2f");
    }
    /**
     * {@snippet :
     * float __log2f(float __x);
     * }
     */
    public static float __log2f(float __x) {
        var mh$ = __log2f$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle powf$MH() {
        return RuntimeHelper.requireNonNull(constants$1181.powf$MH,"powf");
    }
    /**
     * {@snippet :
     * float powf(float __x, float __y);
     * }
     */
    public static float powf(float __x, float __y) {
        var mh$ = powf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __powf$MH() {
        return RuntimeHelper.requireNonNull(constants$1181.__powf$MH,"__powf");
    }
    /**
     * {@snippet :
     * float __powf(float __x, float __y);
     * }
     */
    public static float __powf(float __x, float __y) {
        var mh$ = __powf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sqrtf$MH() {
        return RuntimeHelper.requireNonNull(constants$1181.sqrtf$MH,"sqrtf");
    }
    /**
     * {@snippet :
     * float sqrtf(float __x);
     * }
     */
    public static float sqrtf(float __x) {
        var mh$ = sqrtf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sqrtf$MH() {
        return RuntimeHelper.requireNonNull(constants$1181.__sqrtf$MH,"__sqrtf");
    }
    /**
     * {@snippet :
     * float __sqrtf(float __x);
     * }
     */
    public static float __sqrtf(float __x) {
        var mh$ = __sqrtf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle hypotf$MH() {
        return RuntimeHelper.requireNonNull(constants$1181.hypotf$MH,"hypotf");
    }
    /**
     * {@snippet :
     * float hypotf(float __x, float __y);
     * }
     */
    public static float hypotf(float __x, float __y) {
        var mh$ = hypotf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __hypotf$MH() {
        return RuntimeHelper.requireNonNull(constants$1181.__hypotf$MH,"__hypotf");
    }
    /**
     * {@snippet :
     * float __hypotf(float __x, float __y);
     * }
     */
    public static float __hypotf(float __x, float __y) {
        var mh$ = __hypotf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cbrtf$MH() {
        return RuntimeHelper.requireNonNull(constants$1182.cbrtf$MH,"cbrtf");
    }
    /**
     * {@snippet :
     * float cbrtf(float __x);
     * }
     */
    public static float cbrtf(float __x) {
        var mh$ = cbrtf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __cbrtf$MH() {
        return RuntimeHelper.requireNonNull(constants$1182.__cbrtf$MH,"__cbrtf");
    }
    /**
     * {@snippet :
     * float __cbrtf(float __x);
     * }
     */
    public static float __cbrtf(float __x) {
        var mh$ = __cbrtf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ceilf$MH() {
        return RuntimeHelper.requireNonNull(constants$1182.ceilf$MH,"ceilf");
    }
    /**
     * {@snippet :
     * float ceilf(float __x);
     * }
     */
    public static float ceilf(float __x) {
        var mh$ = ceilf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ceilf$MH() {
        return RuntimeHelper.requireNonNull(constants$1182.__ceilf$MH,"__ceilf");
    }
    /**
     * {@snippet :
     * float __ceilf(float __x);
     * }
     */
    public static float __ceilf(float __x) {
        var mh$ = __ceilf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fabsf$MH() {
        return RuntimeHelper.requireNonNull(constants$1182.fabsf$MH,"fabsf");
    }
    /**
     * {@snippet :
     * float fabsf(float __x);
     * }
     */
    public static float fabsf(float __x) {
        var mh$ = fabsf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fabsf$MH() {
        return RuntimeHelper.requireNonNull(constants$1182.__fabsf$MH,"__fabsf");
    }
    /**
     * {@snippet :
     * float __fabsf(float __x);
     * }
     */
    public static float __fabsf(float __x) {
        var mh$ = __fabsf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle floorf$MH() {
        return RuntimeHelper.requireNonNull(constants$1183.floorf$MH,"floorf");
    }
    /**
     * {@snippet :
     * float floorf(float __x);
     * }
     */
    public static float floorf(float __x) {
        var mh$ = floorf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __floorf$MH() {
        return RuntimeHelper.requireNonNull(constants$1183.__floorf$MH,"__floorf");
    }
    /**
     * {@snippet :
     * float __floorf(float __x);
     * }
     */
    public static float __floorf(float __x) {
        var mh$ = __floorf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmodf$MH() {
        return RuntimeHelper.requireNonNull(constants$1183.fmodf$MH,"fmodf");
    }
    /**
     * {@snippet :
     * float fmodf(float __x, float __y);
     * }
     */
    public static float fmodf(float __x, float __y) {
        var mh$ = fmodf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fmodf$MH() {
        return RuntimeHelper.requireNonNull(constants$1183.__fmodf$MH,"__fmodf");
    }
    /**
     * {@snippet :
     * float __fmodf(float __x, float __y);
     * }
     */
    public static float __fmodf(float __x, float __y) {
        var mh$ = __fmodf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isinff$MH() {
        return RuntimeHelper.requireNonNull(constants$1183.isinff$MH,"isinff");
    }
    /**
     * {@snippet :
     * int isinff(float __value);
     * }
     */
    public static int isinff(float __value) {
        var mh$ = isinff$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle finitef$MH() {
        return RuntimeHelper.requireNonNull(constants$1183.finitef$MH,"finitef");
    }
    /**
     * {@snippet :
     * int finitef(float __value);
     * }
     */
    public static int finitef(float __value) {
        var mh$ = finitef$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dremf$MH() {
        return RuntimeHelper.requireNonNull(constants$1184.dremf$MH,"dremf");
    }
    /**
     * {@snippet :
     * float dremf(float __x, float __y);
     * }
     */
    public static float dremf(float __x, float __y) {
        var mh$ = dremf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __dremf$MH() {
        return RuntimeHelper.requireNonNull(constants$1184.__dremf$MH,"__dremf");
    }
    /**
     * {@snippet :
     * float __dremf(float __x, float __y);
     * }
     */
    public static float __dremf(float __x, float __y) {
        var mh$ = __dremf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle significandf$MH() {
        return RuntimeHelper.requireNonNull(constants$1184.significandf$MH,"significandf");
    }
    /**
     * {@snippet :
     * float significandf(float __x);
     * }
     */
    public static float significandf(float __x) {
        var mh$ = significandf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __significandf$MH() {
        return RuntimeHelper.requireNonNull(constants$1184.__significandf$MH,"__significandf");
    }
    /**
     * {@snippet :
     * float __significandf(float __x);
     * }
     */
    public static float __significandf(float __x) {
        var mh$ = __significandf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle copysignf$MH() {
        return RuntimeHelper.requireNonNull(constants$1184.copysignf$MH,"copysignf");
    }
    /**
     * {@snippet :
     * float copysignf(float __x, float __y);
     * }
     */
    public static float copysignf(float __x, float __y) {
        var mh$ = copysignf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __copysignf$MH() {
        return RuntimeHelper.requireNonNull(constants$1184.__copysignf$MH,"__copysignf");
    }
    /**
     * {@snippet :
     * float __copysignf(float __x, float __y);
     * }
     */
    public static float __copysignf(float __x, float __y) {
        var mh$ = __copysignf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nanf$MH() {
        return RuntimeHelper.requireNonNull(constants$1185.nanf$MH,"nanf");
    }
    /**
     * {@snippet :
     * float nanf(char* __tagb);
     * }
     */
    public static float nanf(MemorySegment __tagb) {
        var mh$ = nanf$MH();
        try {
            return (float)mh$.invokeExact(__tagb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __nanf$MH() {
        return RuntimeHelper.requireNonNull(constants$1185.__nanf$MH,"__nanf");
    }
    /**
     * {@snippet :
     * float __nanf(char* __tagb);
     * }
     */
    public static float __nanf(MemorySegment __tagb) {
        var mh$ = __nanf$MH();
        try {
            return (float)mh$.invokeExact(__tagb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isnanf$MH() {
        return RuntimeHelper.requireNonNull(constants$1185.isnanf$MH,"isnanf");
    }
    /**
     * {@snippet :
     * int isnanf(float __value);
     * }
     */
    public static int isnanf(float __value) {
        var mh$ = isnanf$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle j0f$MH() {
        return RuntimeHelper.requireNonNull(constants$1185.j0f$MH,"j0f");
    }
    /**
     * {@snippet :
     * float j0f(float);
     * }
     */
    public static float j0f(float x0) {
        var mh$ = j0f$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __j0f$MH() {
        return RuntimeHelper.requireNonNull(constants$1185.__j0f$MH,"__j0f");
    }
    /**
     * {@snippet :
     * float __j0f(float);
     * }
     */
    public static float __j0f(float x0) {
        var mh$ = __j0f$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle j1f$MH() {
        return RuntimeHelper.requireNonNull(constants$1185.j1f$MH,"j1f");
    }
    /**
     * {@snippet :
     * float j1f(float);
     * }
     */
    public static float j1f(float x0) {
        var mh$ = j1f$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __j1f$MH() {
        return RuntimeHelper.requireNonNull(constants$1186.__j1f$MH,"__j1f");
    }
    /**
     * {@snippet :
     * float __j1f(float);
     * }
     */
    public static float __j1f(float x0) {
        var mh$ = __j1f$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jnf$MH() {
        return RuntimeHelper.requireNonNull(constants$1186.jnf$MH,"jnf");
    }
    /**
     * {@snippet :
     * float jnf(int, float);
     * }
     */
    public static float jnf(int x0, float x1) {
        var mh$ = jnf$MH();
        try {
            return (float)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __jnf$MH() {
        return RuntimeHelper.requireNonNull(constants$1186.__jnf$MH,"__jnf");
    }
    /**
     * {@snippet :
     * float __jnf(int, float);
     * }
     */
    public static float __jnf(int x0, float x1) {
        var mh$ = __jnf$MH();
        try {
            return (float)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle y0f$MH() {
        return RuntimeHelper.requireNonNull(constants$1186.y0f$MH,"y0f");
    }
    /**
     * {@snippet :
     * float y0f(float);
     * }
     */
    public static float y0f(float x0) {
        var mh$ = y0f$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __y0f$MH() {
        return RuntimeHelper.requireNonNull(constants$1186.__y0f$MH,"__y0f");
    }
    /**
     * {@snippet :
     * float __y0f(float);
     * }
     */
    public static float __y0f(float x0) {
        var mh$ = __y0f$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle y1f$MH() {
        return RuntimeHelper.requireNonNull(constants$1186.y1f$MH,"y1f");
    }
    /**
     * {@snippet :
     * float y1f(float);
     * }
     */
    public static float y1f(float x0) {
        var mh$ = y1f$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __y1f$MH() {
        return RuntimeHelper.requireNonNull(constants$1187.__y1f$MH,"__y1f");
    }
    /**
     * {@snippet :
     * float __y1f(float);
     * }
     */
    public static float __y1f(float x0) {
        var mh$ = __y1f$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ynf$MH() {
        return RuntimeHelper.requireNonNull(constants$1187.ynf$MH,"ynf");
    }
    /**
     * {@snippet :
     * float ynf(int, float);
     * }
     */
    public static float ynf(int x0, float x1) {
        var mh$ = ynf$MH();
        try {
            return (float)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ynf$MH() {
        return RuntimeHelper.requireNonNull(constants$1187.__ynf$MH,"__ynf");
    }
    /**
     * {@snippet :
     * float __ynf(int, float);
     * }
     */
    public static float __ynf(int x0, float x1) {
        var mh$ = __ynf$MH();
        try {
            return (float)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erff$MH() {
        return RuntimeHelper.requireNonNull(constants$1187.erff$MH,"erff");
    }
    /**
     * {@snippet :
     * float erff(float);
     * }
     */
    public static float erff(float x0) {
        var mh$ = erff$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __erff$MH() {
        return RuntimeHelper.requireNonNull(constants$1187.__erff$MH,"__erff");
    }
    /**
     * {@snippet :
     * float __erff(float);
     * }
     */
    public static float __erff(float x0) {
        var mh$ = __erff$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erfcf$MH() {
        return RuntimeHelper.requireNonNull(constants$1187.erfcf$MH,"erfcf");
    }
    /**
     * {@snippet :
     * float erfcf(float);
     * }
     */
    public static float erfcf(float x0) {
        var mh$ = erfcf$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __erfcf$MH() {
        return RuntimeHelper.requireNonNull(constants$1188.__erfcf$MH,"__erfcf");
    }
    /**
     * {@snippet :
     * float __erfcf(float);
     * }
     */
    public static float __erfcf(float x0) {
        var mh$ = __erfcf$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lgammaf$MH() {
        return RuntimeHelper.requireNonNull(constants$1188.lgammaf$MH,"lgammaf");
    }
    /**
     * {@snippet :
     * float lgammaf(float);
     * }
     */
    public static float lgammaf(float x0) {
        var mh$ = lgammaf$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __lgammaf$MH() {
        return RuntimeHelper.requireNonNull(constants$1188.__lgammaf$MH,"__lgammaf");
    }
    /**
     * {@snippet :
     * float __lgammaf(float);
     * }
     */
    public static float __lgammaf(float x0) {
        var mh$ = __lgammaf$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tgammaf$MH() {
        return RuntimeHelper.requireNonNull(constants$1188.tgammaf$MH,"tgammaf");
    }
    /**
     * {@snippet :
     * float tgammaf(float);
     * }
     */
    public static float tgammaf(float x0) {
        var mh$ = tgammaf$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __tgammaf$MH() {
        return RuntimeHelper.requireNonNull(constants$1188.__tgammaf$MH,"__tgammaf");
    }
    /**
     * {@snippet :
     * float __tgammaf(float);
     * }
     */
    public static float __tgammaf(float x0) {
        var mh$ = __tgammaf$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gammaf$MH() {
        return RuntimeHelper.requireNonNull(constants$1188.gammaf$MH,"gammaf");
    }
    /**
     * {@snippet :
     * float gammaf(float);
     * }
     */
    public static float gammaf(float x0) {
        var mh$ = gammaf$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __gammaf$MH() {
        return RuntimeHelper.requireNonNull(constants$1189.__gammaf$MH,"__gammaf");
    }
    /**
     * {@snippet :
     * float __gammaf(float);
     * }
     */
    public static float __gammaf(float x0) {
        var mh$ = __gammaf$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lgammaf_r$MH() {
        return RuntimeHelper.requireNonNull(constants$1189.lgammaf_r$MH,"lgammaf_r");
    }
    /**
     * {@snippet :
     * float lgammaf_r(float, int* __signgamp);
     * }
     */
    public static float lgammaf_r(float x0, MemorySegment __signgamp) {
        var mh$ = lgammaf_r$MH();
        try {
            return (float)mh$.invokeExact(x0, __signgamp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __lgammaf_r$MH() {
        return RuntimeHelper.requireNonNull(constants$1189.__lgammaf_r$MH,"__lgammaf_r");
    }
    /**
     * {@snippet :
     * float __lgammaf_r(float, int* __signgamp);
     * }
     */
    public static float __lgammaf_r(float x0, MemorySegment __signgamp) {
        var mh$ = __lgammaf_r$MH();
        try {
            return (float)mh$.invokeExact(x0, __signgamp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rintf$MH() {
        return RuntimeHelper.requireNonNull(constants$1189.rintf$MH,"rintf");
    }
    /**
     * {@snippet :
     * float rintf(float __x);
     * }
     */
    public static float rintf(float __x) {
        var mh$ = rintf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __rintf$MH() {
        return RuntimeHelper.requireNonNull(constants$1189.__rintf$MH,"__rintf");
    }
    /**
     * {@snippet :
     * float __rintf(float __x);
     * }
     */
    public static float __rintf(float __x) {
        var mh$ = __rintf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nextafterf$MH() {
        return RuntimeHelper.requireNonNull(constants$1189.nextafterf$MH,"nextafterf");
    }
    /**
     * {@snippet :
     * float nextafterf(float __x, float __y);
     * }
     */
    public static float nextafterf(float __x, float __y) {
        var mh$ = nextafterf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __nextafterf$MH() {
        return RuntimeHelper.requireNonNull(constants$1190.__nextafterf$MH,"__nextafterf");
    }
    /**
     * {@snippet :
     * float __nextafterf(float __x, float __y);
     * }
     */
    public static float __nextafterf(float __x, float __y) {
        var mh$ = __nextafterf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle remainderf$MH() {
        return RuntimeHelper.requireNonNull(constants$1190.remainderf$MH,"remainderf");
    }
    /**
     * {@snippet :
     * float remainderf(float __x, float __y);
     * }
     */
    public static float remainderf(float __x, float __y) {
        var mh$ = remainderf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __remainderf$MH() {
        return RuntimeHelper.requireNonNull(constants$1190.__remainderf$MH,"__remainderf");
    }
    /**
     * {@snippet :
     * float __remainderf(float __x, float __y);
     * }
     */
    public static float __remainderf(float __x, float __y) {
        var mh$ = __remainderf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scalbnf$MH() {
        return RuntimeHelper.requireNonNull(constants$1190.scalbnf$MH,"scalbnf");
    }
    /**
     * {@snippet :
     * float scalbnf(float __x, int __n);
     * }
     */
    public static float scalbnf(float __x, int __n) {
        var mh$ = scalbnf$MH();
        try {
            return (float)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __scalbnf$MH() {
        return RuntimeHelper.requireNonNull(constants$1190.__scalbnf$MH,"__scalbnf");
    }
    /**
     * {@snippet :
     * float __scalbnf(float __x, int __n);
     * }
     */
    public static float __scalbnf(float __x, int __n) {
        var mh$ = __scalbnf$MH();
        try {
            return (float)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ilogbf$MH() {
        return RuntimeHelper.requireNonNull(constants$1190.ilogbf$MH,"ilogbf");
    }
    /**
     * {@snippet :
     * int ilogbf(float __x);
     * }
     */
    public static int ilogbf(float __x) {
        var mh$ = ilogbf$MH();
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ilogbf$MH() {
        return RuntimeHelper.requireNonNull(constants$1191.__ilogbf$MH,"__ilogbf");
    }
    /**
     * {@snippet :
     * int __ilogbf(float __x);
     * }
     */
    public static int __ilogbf(float __x) {
        var mh$ = __ilogbf$MH();
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scalblnf$MH() {
        return RuntimeHelper.requireNonNull(constants$1191.scalblnf$MH,"scalblnf");
    }
    /**
     * {@snippet :
     * float scalblnf(float __x, long __n);
     * }
     */
    public static float scalblnf(float __x, long __n) {
        var mh$ = scalblnf$MH();
        try {
            return (float)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __scalblnf$MH() {
        return RuntimeHelper.requireNonNull(constants$1191.__scalblnf$MH,"__scalblnf");
    }
    /**
     * {@snippet :
     * float __scalblnf(float __x, long __n);
     * }
     */
    public static float __scalblnf(float __x, long __n) {
        var mh$ = __scalblnf$MH();
        try {
            return (float)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nearbyintf$MH() {
        return RuntimeHelper.requireNonNull(constants$1191.nearbyintf$MH,"nearbyintf");
    }
    /**
     * {@snippet :
     * float nearbyintf(float __x);
     * }
     */
    public static float nearbyintf(float __x) {
        var mh$ = nearbyintf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __nearbyintf$MH() {
        return RuntimeHelper.requireNonNull(constants$1191.__nearbyintf$MH,"__nearbyintf");
    }
    /**
     * {@snippet :
     * float __nearbyintf(float __x);
     * }
     */
    public static float __nearbyintf(float __x) {
        var mh$ = __nearbyintf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle roundf$MH() {
        return RuntimeHelper.requireNonNull(constants$1191.roundf$MH,"roundf");
    }
    /**
     * {@snippet :
     * float roundf(float __x);
     * }
     */
    public static float roundf(float __x) {
        var mh$ = roundf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __roundf$MH() {
        return RuntimeHelper.requireNonNull(constants$1192.__roundf$MH,"__roundf");
    }
    /**
     * {@snippet :
     * float __roundf(float __x);
     * }
     */
    public static float __roundf(float __x) {
        var mh$ = __roundf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle truncf$MH() {
        return RuntimeHelper.requireNonNull(constants$1192.truncf$MH,"truncf");
    }
    /**
     * {@snippet :
     * float truncf(float __x);
     * }
     */
    public static float truncf(float __x) {
        var mh$ = truncf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __truncf$MH() {
        return RuntimeHelper.requireNonNull(constants$1192.__truncf$MH,"__truncf");
    }
    /**
     * {@snippet :
     * float __truncf(float __x);
     * }
     */
    public static float __truncf(float __x) {
        var mh$ = __truncf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle remquof$MH() {
        return RuntimeHelper.requireNonNull(constants$1192.remquof$MH,"remquof");
    }
    /**
     * {@snippet :
     * float remquof(float __x, float __y, int* __quo);
     * }
     */
    public static float remquof(float __x, float __y, MemorySegment __quo) {
        var mh$ = remquof$MH();
        try {
            return (float)mh$.invokeExact(__x, __y, __quo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __remquof$MH() {
        return RuntimeHelper.requireNonNull(constants$1192.__remquof$MH,"__remquof");
    }
    /**
     * {@snippet :
     * float __remquof(float __x, float __y, int* __quo);
     * }
     */
    public static float __remquof(float __x, float __y, MemorySegment __quo) {
        var mh$ = __remquof$MH();
        try {
            return (float)mh$.invokeExact(__x, __y, __quo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrintf$MH() {
        return RuntimeHelper.requireNonNull(constants$1192.lrintf$MH,"lrintf");
    }
    /**
     * {@snippet :
     * long lrintf(float __x);
     * }
     */
    public static long lrintf(float __x) {
        var mh$ = lrintf$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __lrintf$MH() {
        return RuntimeHelper.requireNonNull(constants$1193.__lrintf$MH,"__lrintf");
    }
    /**
     * {@snippet :
     * long __lrintf(float __x);
     * }
     */
    public static long __lrintf(float __x) {
        var mh$ = __lrintf$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llrintf$MH() {
        return RuntimeHelper.requireNonNull(constants$1193.llrintf$MH,"llrintf");
    }
    /**
     * {@snippet :
     * long long llrintf(float __x);
     * }
     */
    public static long llrintf(float __x) {
        var mh$ = llrintf$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __llrintf$MH() {
        return RuntimeHelper.requireNonNull(constants$1193.__llrintf$MH,"__llrintf");
    }
    /**
     * {@snippet :
     * long long __llrintf(float __x);
     * }
     */
    public static long __llrintf(float __x) {
        var mh$ = __llrintf$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lroundf$MH() {
        return RuntimeHelper.requireNonNull(constants$1193.lroundf$MH,"lroundf");
    }
    /**
     * {@snippet :
     * long lroundf(float __x);
     * }
     */
    public static long lroundf(float __x) {
        var mh$ = lroundf$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __lroundf$MH() {
        return RuntimeHelper.requireNonNull(constants$1193.__lroundf$MH,"__lroundf");
    }
    /**
     * {@snippet :
     * long __lroundf(float __x);
     * }
     */
    public static long __lroundf(float __x) {
        var mh$ = __lroundf$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llroundf$MH() {
        return RuntimeHelper.requireNonNull(constants$1193.llroundf$MH,"llroundf");
    }
    /**
     * {@snippet :
     * long long llroundf(float __x);
     * }
     */
    public static long llroundf(float __x) {
        var mh$ = llroundf$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __llroundf$MH() {
        return RuntimeHelper.requireNonNull(constants$1194.__llroundf$MH,"__llroundf");
    }
    /**
     * {@snippet :
     * long long __llroundf(float __x);
     * }
     */
    public static long __llroundf(float __x) {
        var mh$ = __llroundf$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fdimf$MH() {
        return RuntimeHelper.requireNonNull(constants$1194.fdimf$MH,"fdimf");
    }
    /**
     * {@snippet :
     * float fdimf(float __x, float __y);
     * }
     */
    public static float fdimf(float __x, float __y) {
        var mh$ = fdimf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fdimf$MH() {
        return RuntimeHelper.requireNonNull(constants$1194.__fdimf$MH,"__fdimf");
    }
    /**
     * {@snippet :
     * float __fdimf(float __x, float __y);
     * }
     */
    public static float __fdimf(float __x, float __y) {
        var mh$ = __fdimf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmaxf$MH() {
        return RuntimeHelper.requireNonNull(constants$1194.fmaxf$MH,"fmaxf");
    }
    /**
     * {@snippet :
     * float fmaxf(float __x, float __y);
     * }
     */
    public static float fmaxf(float __x, float __y) {
        var mh$ = fmaxf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fmaxf$MH() {
        return RuntimeHelper.requireNonNull(constants$1194.__fmaxf$MH,"__fmaxf");
    }
    /**
     * {@snippet :
     * float __fmaxf(float __x, float __y);
     * }
     */
    public static float __fmaxf(float __x, float __y) {
        var mh$ = __fmaxf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fminf$MH() {
        return RuntimeHelper.requireNonNull(constants$1194.fminf$MH,"fminf");
    }
    /**
     * {@snippet :
     * float fminf(float __x, float __y);
     * }
     */
    public static float fminf(float __x, float __y) {
        var mh$ = fminf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fminf$MH() {
        return RuntimeHelper.requireNonNull(constants$1195.__fminf$MH,"__fminf");
    }
    /**
     * {@snippet :
     * float __fminf(float __x, float __y);
     * }
     */
    public static float __fminf(float __x, float __y) {
        var mh$ = __fminf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmaf$MH() {
        return RuntimeHelper.requireNonNull(constants$1195.fmaf$MH,"fmaf");
    }
    /**
     * {@snippet :
     * float fmaf(float __x, float __y, float __z);
     * }
     */
    public static float fmaf(float __x, float __y, float __z) {
        var mh$ = fmaf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y, __z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fmaf$MH() {
        return RuntimeHelper.requireNonNull(constants$1195.__fmaf$MH,"__fmaf");
    }
    /**
     * {@snippet :
     * float __fmaf(float __x, float __y, float __z);
     * }
     */
    public static float __fmaf(float __x, float __y, float __z) {
        var mh$ = __fmaf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y, __z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scalbf$MH() {
        return RuntimeHelper.requireNonNull(constants$1195.scalbf$MH,"scalbf");
    }
    /**
     * {@snippet :
     * float scalbf(float __x, float __n);
     * }
     */
    public static float scalbf(float __x, float __n) {
        var mh$ = scalbf$MH();
        try {
            return (float)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __scalbf$MH() {
        return RuntimeHelper.requireNonNull(constants$1195.__scalbf$MH,"__scalbf");
    }
    /**
     * {@snippet :
     * float __scalbf(float __x, float __n);
     * }
     */
    public static float __scalbf(float __x, float __n) {
        var mh$ = __scalbf$MH();
        try {
            return (float)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout signgam$LAYOUT() {
        return constants$1195.signgam$LAYOUT;
    }
    public static VarHandle signgam$VH() {
        return constants$1195.signgam$VH;
    }
    public static MemorySegment signgam$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1195.signgam$SEGMENT,"signgam");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * int signgam;
     * }
     */
    public static int signgam$get() {
        return (int) constants$1195.signgam$VH.get(RuntimeHelper.requireNonNull(constants$1195.signgam$SEGMENT, "signgam"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * int signgam;
     * }
     */
    public static void signgam$set(int x) {
        constants$1195.signgam$VH.set(RuntimeHelper.requireNonNull(constants$1195.signgam$SEGMENT, "signgam"), x);
    }
    public static MethodHandle graphene_simd4f_init$MH() {
        return RuntimeHelper.requireNonNull(constants$1196.graphene_simd4f_init$MH,"graphene_simd4f_init");
    }
    /**
     * {@snippet :
     * float* graphene_simd4f_init(float x, float y, float z, float w);
     * }
     */
    public static MemorySegment graphene_simd4f_init(float x, float y, float z, float w) {
        var mh$ = graphene_simd4f_init$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_init_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$1196.graphene_simd4f_init_zero$MH,"graphene_simd4f_init_zero");
    }
    /**
     * {@snippet :
     * float* graphene_simd4f_init_zero();
     * }
     */
    public static MemorySegment graphene_simd4f_init_zero() {
        var mh$ = graphene_simd4f_init_zero$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_init_4f$MH() {
        return RuntimeHelper.requireNonNull(constants$1196.graphene_simd4f_init_4f$MH,"graphene_simd4f_init_4f");
    }
    /**
     * {@snippet :
     * float* graphene_simd4f_init_4f(float* v);
     * }
     */
    public static MemorySegment graphene_simd4f_init_4f(MemorySegment v) {
        var mh$ = graphene_simd4f_init_4f$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_init_3f$MH() {
        return RuntimeHelper.requireNonNull(constants$1196.graphene_simd4f_init_3f$MH,"graphene_simd4f_init_3f");
    }
    /**
     * {@snippet :
     * float* graphene_simd4f_init_3f(float* v);
     * }
     */
    public static MemorySegment graphene_simd4f_init_3f(MemorySegment v) {
        var mh$ = graphene_simd4f_init_3f$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_init_2f$MH() {
        return RuntimeHelper.requireNonNull(constants$1196.graphene_simd4f_init_2f$MH,"graphene_simd4f_init_2f");
    }
    /**
     * {@snippet :
     * float* graphene_simd4f_init_2f(float* v);
     * }
     */
    public static MemorySegment graphene_simd4f_init_2f(MemorySegment v) {
        var mh$ = graphene_simd4f_init_2f$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_dup_4f$MH() {
        return RuntimeHelper.requireNonNull(constants$1196.graphene_simd4f_dup_4f$MH,"graphene_simd4f_dup_4f");
    }
    /**
     * {@snippet :
     * void graphene_simd4f_dup_4f(const graphene_simd4f_t s, float* v);
     * }
     */
    public static void graphene_simd4f_dup_4f(MemorySegment s, MemorySegment v) {
        var mh$ = graphene_simd4f_dup_4f$MH();
        try {
            mh$.invokeExact(s, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_dup_3f$MH() {
        return RuntimeHelper.requireNonNull(constants$1197.graphene_simd4f_dup_3f$MH,"graphene_simd4f_dup_3f");
    }
    /**
     * {@snippet :
     * void graphene_simd4f_dup_3f(const graphene_simd4f_t s, float* v);
     * }
     */
    public static void graphene_simd4f_dup_3f(MemorySegment s, MemorySegment v) {
        var mh$ = graphene_simd4f_dup_3f$MH();
        try {
            mh$.invokeExact(s, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_dup_2f$MH() {
        return RuntimeHelper.requireNonNull(constants$1197.graphene_simd4f_dup_2f$MH,"graphene_simd4f_dup_2f");
    }
    /**
     * {@snippet :
     * void graphene_simd4f_dup_2f(const graphene_simd4f_t s, float* v);
     * }
     */
    public static void graphene_simd4f_dup_2f(MemorySegment s, MemorySegment v) {
        var mh$ = graphene_simd4f_dup_2f$MH();
        try {
            mh$.invokeExact(s, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_get$MH() {
        return RuntimeHelper.requireNonNull(constants$1197.graphene_simd4f_get$MH,"graphene_simd4f_get");
    }
    /**
     * {@snippet :
     * float graphene_simd4f_get(const graphene_simd4f_t s, unsigned int i);
     * }
     */
    public static float graphene_simd4f_get(MemorySegment s, int i) {
        var mh$ = graphene_simd4f_get$MH();
        try {
            return (float)mh$.invokeExact(s, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_get_x$MH() {
        return RuntimeHelper.requireNonNull(constants$1197.graphene_simd4f_get_x$MH,"graphene_simd4f_get_x");
    }
    /**
     * {@snippet :
     * float graphene_simd4f_get_x(const graphene_simd4f_t s);
     * }
     */
    public static float graphene_simd4f_get_x(MemorySegment s) {
        var mh$ = graphene_simd4f_get_x$MH();
        try {
            return (float)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_get_y$MH() {
        return RuntimeHelper.requireNonNull(constants$1197.graphene_simd4f_get_y$MH,"graphene_simd4f_get_y");
    }
    /**
     * {@snippet :
     * float graphene_simd4f_get_y(const graphene_simd4f_t s);
     * }
     */
    public static float graphene_simd4f_get_y(MemorySegment s) {
        var mh$ = graphene_simd4f_get_y$MH();
        try {
            return (float)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_get_z$MH() {
        return RuntimeHelper.requireNonNull(constants$1197.graphene_simd4f_get_z$MH,"graphene_simd4f_get_z");
    }
    /**
     * {@snippet :
     * float graphene_simd4f_get_z(const graphene_simd4f_t s);
     * }
     */
    public static float graphene_simd4f_get_z(MemorySegment s) {
        var mh$ = graphene_simd4f_get_z$MH();
        try {
            return (float)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_get_w$MH() {
        return RuntimeHelper.requireNonNull(constants$1198.graphene_simd4f_get_w$MH,"graphene_simd4f_get_w");
    }
    /**
     * {@snippet :
     * float graphene_simd4f_get_w(const graphene_simd4f_t s);
     * }
     */
    public static float graphene_simd4f_get_w(MemorySegment s) {
        var mh$ = graphene_simd4f_get_w$MH();
        try {
            return (float)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_splat$MH() {
        return RuntimeHelper.requireNonNull(constants$1198.graphene_simd4f_splat$MH,"graphene_simd4f_splat");
    }
    /**
     * {@snippet :
     * float* graphene_simd4f_splat(float v);
     * }
     */
    public static MemorySegment graphene_simd4f_splat(float v) {
        var mh$ = graphene_simd4f_splat$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_splat_x$MH() {
        return RuntimeHelper.requireNonNull(constants$1198.graphene_simd4f_splat_x$MH,"graphene_simd4f_splat_x");
    }
    /**
     * {@snippet :
     * float* graphene_simd4f_splat_x(const graphene_simd4f_t s);
     * }
     */
    public static MemorySegment graphene_simd4f_splat_x(MemorySegment s) {
        var mh$ = graphene_simd4f_splat_x$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_splat_y$MH() {
        return RuntimeHelper.requireNonNull(constants$1198.graphene_simd4f_splat_y$MH,"graphene_simd4f_splat_y");
    }
    /**
     * {@snippet :
     * float* graphene_simd4f_splat_y(const graphene_simd4f_t s);
     * }
     */
    public static MemorySegment graphene_simd4f_splat_y(MemorySegment s) {
        var mh$ = graphene_simd4f_splat_y$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_splat_z$MH() {
        return RuntimeHelper.requireNonNull(constants$1198.graphene_simd4f_splat_z$MH,"graphene_simd4f_splat_z");
    }
    /**
     * {@snippet :
     * float* graphene_simd4f_splat_z(const graphene_simd4f_t s);
     * }
     */
    public static MemorySegment graphene_simd4f_splat_z(MemorySegment s) {
        var mh$ = graphene_simd4f_splat_z$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_splat_w$MH() {
        return RuntimeHelper.requireNonNull(constants$1198.graphene_simd4f_splat_w$MH,"graphene_simd4f_splat_w");
    }
    /**
     * {@snippet :
     * float* graphene_simd4f_splat_w(const graphene_simd4f_t s);
     * }
     */
    public static MemorySegment graphene_simd4f_splat_w(MemorySegment s) {
        var mh$ = graphene_simd4f_splat_w$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_add$MH() {
        return RuntimeHelper.requireNonNull(constants$1199.graphene_simd4f_add$MH,"graphene_simd4f_add");
    }
    /**
     * {@snippet :
     * float* graphene_simd4f_add(const graphene_simd4f_t a, const graphene_simd4f_t b);
     * }
     */
    public static MemorySegment graphene_simd4f_add(MemorySegment a, MemorySegment b) {
        var mh$ = graphene_simd4f_add$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_sub$MH() {
        return RuntimeHelper.requireNonNull(constants$1199.graphene_simd4f_sub$MH,"graphene_simd4f_sub");
    }
    /**
     * {@snippet :
     * float* graphene_simd4f_sub(const graphene_simd4f_t a, const graphene_simd4f_t b);
     * }
     */
    public static MemorySegment graphene_simd4f_sub(MemorySegment a, MemorySegment b) {
        var mh$ = graphene_simd4f_sub$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_mul$MH() {
        return RuntimeHelper.requireNonNull(constants$1199.graphene_simd4f_mul$MH,"graphene_simd4f_mul");
    }
    /**
     * {@snippet :
     * float* graphene_simd4f_mul(const graphene_simd4f_t a, const graphene_simd4f_t b);
     * }
     */
    public static MemorySegment graphene_simd4f_mul(MemorySegment a, MemorySegment b) {
        var mh$ = graphene_simd4f_mul$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_div$MH() {
        return RuntimeHelper.requireNonNull(constants$1199.graphene_simd4f_div$MH,"graphene_simd4f_div");
    }
    /**
     * {@snippet :
     * float* graphene_simd4f_div(const graphene_simd4f_t a, const graphene_simd4f_t b);
     * }
     */
    public static MemorySegment graphene_simd4f_div(MemorySegment a, MemorySegment b) {
        var mh$ = graphene_simd4f_div$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_sqrt$MH() {
        return RuntimeHelper.requireNonNull(constants$1199.graphene_simd4f_sqrt$MH,"graphene_simd4f_sqrt");
    }
    /**
     * {@snippet :
     * float* graphene_simd4f_sqrt(const graphene_simd4f_t s);
     * }
     */
    public static MemorySegment graphene_simd4f_sqrt(MemorySegment s) {
        var mh$ = graphene_simd4f_sqrt$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_reciprocal$MH() {
        return RuntimeHelper.requireNonNull(constants$1199.graphene_simd4f_reciprocal$MH,"graphene_simd4f_reciprocal");
    }
    /**
     * {@snippet :
     * float* graphene_simd4f_reciprocal(const graphene_simd4f_t s);
     * }
     */
    public static MemorySegment graphene_simd4f_reciprocal(MemorySegment s) {
        var mh$ = graphene_simd4f_reciprocal$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_rsqrt$MH() {
        return RuntimeHelper.requireNonNull(constants$1200.graphene_simd4f_rsqrt$MH,"graphene_simd4f_rsqrt");
    }
    /**
     * {@snippet :
     * float* graphene_simd4f_rsqrt(const graphene_simd4f_t s);
     * }
     */
    public static MemorySegment graphene_simd4f_rsqrt(MemorySegment s) {
        var mh$ = graphene_simd4f_rsqrt$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_cross3$MH() {
        return RuntimeHelper.requireNonNull(constants$1200.graphene_simd4f_cross3$MH,"graphene_simd4f_cross3");
    }
    /**
     * {@snippet :
     * float* graphene_simd4f_cross3(const graphene_simd4f_t a, const graphene_simd4f_t b);
     * }
     */
    public static MemorySegment graphene_simd4f_cross3(MemorySegment a, MemorySegment b) {
        var mh$ = graphene_simd4f_cross3$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_dot3$MH() {
        return RuntimeHelper.requireNonNull(constants$1200.graphene_simd4f_dot3$MH,"graphene_simd4f_dot3");
    }
    /**
     * {@snippet :
     * float* graphene_simd4f_dot3(const graphene_simd4f_t a, const graphene_simd4f_t b);
     * }
     */
    public static MemorySegment graphene_simd4f_dot3(MemorySegment a, MemorySegment b) {
        var mh$ = graphene_simd4f_dot3$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_dot3_scalar$MH() {
        return RuntimeHelper.requireNonNull(constants$1200.graphene_simd4f_dot3_scalar$MH,"graphene_simd4f_dot3_scalar");
    }
    /**
     * {@snippet :
     * float graphene_simd4f_dot3_scalar(const graphene_simd4f_t a, const graphene_simd4f_t b);
     * }
     */
    public static float graphene_simd4f_dot3_scalar(MemorySegment a, MemorySegment b) {
        var mh$ = graphene_simd4f_dot3_scalar$MH();
        try {
            return (float)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_min$MH() {
        return RuntimeHelper.requireNonNull(constants$1200.graphene_simd4f_min$MH,"graphene_simd4f_min");
    }
    /**
     * {@snippet :
     * float* graphene_simd4f_min(const graphene_simd4f_t a, const graphene_simd4f_t b);
     * }
     */
    public static MemorySegment graphene_simd4f_min(MemorySegment a, MemorySegment b) {
        var mh$ = graphene_simd4f_min$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_max$MH() {
        return RuntimeHelper.requireNonNull(constants$1200.graphene_simd4f_max$MH,"graphene_simd4f_max");
    }
    /**
     * {@snippet :
     * float* graphene_simd4f_max(const graphene_simd4f_t a, const graphene_simd4f_t b);
     * }
     */
    public static MemorySegment graphene_simd4f_max(MemorySegment a, MemorySegment b) {
        var mh$ = graphene_simd4f_max$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_shuffle_wxyz$MH() {
        return RuntimeHelper.requireNonNull(constants$1201.graphene_simd4f_shuffle_wxyz$MH,"graphene_simd4f_shuffle_wxyz");
    }
    /**
     * {@snippet :
     * float* graphene_simd4f_shuffle_wxyz(const graphene_simd4f_t s);
     * }
     */
    public static MemorySegment graphene_simd4f_shuffle_wxyz(MemorySegment s) {
        var mh$ = graphene_simd4f_shuffle_wxyz$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_shuffle_zwxy$MH() {
        return RuntimeHelper.requireNonNull(constants$1201.graphene_simd4f_shuffle_zwxy$MH,"graphene_simd4f_shuffle_zwxy");
    }
    /**
     * {@snippet :
     * float* graphene_simd4f_shuffle_zwxy(const graphene_simd4f_t s);
     * }
     */
    public static MemorySegment graphene_simd4f_shuffle_zwxy(MemorySegment s) {
        var mh$ = graphene_simd4f_shuffle_zwxy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_shuffle_yzwx$MH() {
        return RuntimeHelper.requireNonNull(constants$1201.graphene_simd4f_shuffle_yzwx$MH,"graphene_simd4f_shuffle_yzwx");
    }
    /**
     * {@snippet :
     * float* graphene_simd4f_shuffle_yzwx(const graphene_simd4f_t s);
     * }
     */
    public static MemorySegment graphene_simd4f_shuffle_yzwx(MemorySegment s) {
        var mh$ = graphene_simd4f_shuffle_yzwx$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_zero_w$MH() {
        return RuntimeHelper.requireNonNull(constants$1201.graphene_simd4f_zero_w$MH,"graphene_simd4f_zero_w");
    }
    /**
     * {@snippet :
     * float* graphene_simd4f_zero_w(const graphene_simd4f_t s);
     * }
     */
    public static MemorySegment graphene_simd4f_zero_w(MemorySegment s) {
        var mh$ = graphene_simd4f_zero_w$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_zero_zw$MH() {
        return RuntimeHelper.requireNonNull(constants$1201.graphene_simd4f_zero_zw$MH,"graphene_simd4f_zero_zw");
    }
    /**
     * {@snippet :
     * float* graphene_simd4f_zero_zw(const graphene_simd4f_t s);
     * }
     */
    public static MemorySegment graphene_simd4f_zero_zw(MemorySegment s) {
        var mh$ = graphene_simd4f_zero_zw$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_merge_high$MH() {
        return RuntimeHelper.requireNonNull(constants$1201.graphene_simd4f_merge_high$MH,"graphene_simd4f_merge_high");
    }
    /**
     * {@snippet :
     * float* graphene_simd4f_merge_high(const graphene_simd4f_t a, const graphene_simd4f_t b);
     * }
     */
    public static MemorySegment graphene_simd4f_merge_high(MemorySegment a, MemorySegment b) {
        var mh$ = graphene_simd4f_merge_high$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_merge_low$MH() {
        return RuntimeHelper.requireNonNull(constants$1202.graphene_simd4f_merge_low$MH,"graphene_simd4f_merge_low");
    }
    /**
     * {@snippet :
     * float* graphene_simd4f_merge_low(const graphene_simd4f_t a, const graphene_simd4f_t b);
     * }
     */
    public static MemorySegment graphene_simd4f_merge_low(MemorySegment a, MemorySegment b) {
        var mh$ = graphene_simd4f_merge_low$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_merge_w$MH() {
        return RuntimeHelper.requireNonNull(constants$1202.graphene_simd4f_merge_w$MH,"graphene_simd4f_merge_w");
    }
    /**
     * {@snippet :
     * float* graphene_simd4f_merge_w(const graphene_simd4f_t s, float v);
     * }
     */
    public static MemorySegment graphene_simd4f_merge_w(MemorySegment s, float v) {
        var mh$ = graphene_simd4f_merge_w$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(s, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_flip_sign_0101$MH() {
        return RuntimeHelper.requireNonNull(constants$1202.graphene_simd4f_flip_sign_0101$MH,"graphene_simd4f_flip_sign_0101");
    }
    /**
     * {@snippet :
     * float* graphene_simd4f_flip_sign_0101(const graphene_simd4f_t s);
     * }
     */
    public static MemorySegment graphene_simd4f_flip_sign_0101(MemorySegment s) {
        var mh$ = graphene_simd4f_flip_sign_0101$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_flip_sign_1010$MH() {
        return RuntimeHelper.requireNonNull(constants$1202.graphene_simd4f_flip_sign_1010$MH,"graphene_simd4f_flip_sign_1010");
    }
    /**
     * {@snippet :
     * float* graphene_simd4f_flip_sign_1010(const graphene_simd4f_t s);
     * }
     */
    public static MemorySegment graphene_simd4f_flip_sign_1010(MemorySegment s) {
        var mh$ = graphene_simd4f_flip_sign_1010$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_cmp_eq$MH() {
        return RuntimeHelper.requireNonNull(constants$1202.graphene_simd4f_cmp_eq$MH,"graphene_simd4f_cmp_eq");
    }
    /**
     * {@snippet :
     * _Bool graphene_simd4f_cmp_eq(const graphene_simd4f_t a, const graphene_simd4f_t b);
     * }
     */
    public static boolean graphene_simd4f_cmp_eq(MemorySegment a, MemorySegment b) {
        var mh$ = graphene_simd4f_cmp_eq$MH();
        try {
            return (boolean)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_cmp_neq$MH() {
        return RuntimeHelper.requireNonNull(constants$1202.graphene_simd4f_cmp_neq$MH,"graphene_simd4f_cmp_neq");
    }
    /**
     * {@snippet :
     * _Bool graphene_simd4f_cmp_neq(const graphene_simd4f_t a, const graphene_simd4f_t b);
     * }
     */
    public static boolean graphene_simd4f_cmp_neq(MemorySegment a, MemorySegment b) {
        var mh$ = graphene_simd4f_cmp_neq$MH();
        try {
            return (boolean)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_cmp_lt$MH() {
        return RuntimeHelper.requireNonNull(constants$1203.graphene_simd4f_cmp_lt$MH,"graphene_simd4f_cmp_lt");
    }
    /**
     * {@snippet :
     * _Bool graphene_simd4f_cmp_lt(const graphene_simd4f_t a, const graphene_simd4f_t b);
     * }
     */
    public static boolean graphene_simd4f_cmp_lt(MemorySegment a, MemorySegment b) {
        var mh$ = graphene_simd4f_cmp_lt$MH();
        try {
            return (boolean)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_cmp_le$MH() {
        return RuntimeHelper.requireNonNull(constants$1203.graphene_simd4f_cmp_le$MH,"graphene_simd4f_cmp_le");
    }
    /**
     * {@snippet :
     * _Bool graphene_simd4f_cmp_le(const graphene_simd4f_t a, const graphene_simd4f_t b);
     * }
     */
    public static boolean graphene_simd4f_cmp_le(MemorySegment a, MemorySegment b) {
        var mh$ = graphene_simd4f_cmp_le$MH();
        try {
            return (boolean)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_cmp_ge$MH() {
        return RuntimeHelper.requireNonNull(constants$1203.graphene_simd4f_cmp_ge$MH,"graphene_simd4f_cmp_ge");
    }
    /**
     * {@snippet :
     * _Bool graphene_simd4f_cmp_ge(const graphene_simd4f_t a, const graphene_simd4f_t b);
     * }
     */
    public static boolean graphene_simd4f_cmp_ge(MemorySegment a, MemorySegment b) {
        var mh$ = graphene_simd4f_cmp_ge$MH();
        try {
            return (boolean)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_cmp_gt$MH() {
        return RuntimeHelper.requireNonNull(constants$1203.graphene_simd4f_cmp_gt$MH,"graphene_simd4f_cmp_gt");
    }
    /**
     * {@snippet :
     * _Bool graphene_simd4f_cmp_gt(const graphene_simd4f_t a, const graphene_simd4f_t b);
     * }
     */
    public static boolean graphene_simd4f_cmp_gt(MemorySegment a, MemorySegment b) {
        var mh$ = graphene_simd4f_cmp_gt$MH();
        try {
            return (boolean)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4f_neg$MH() {
        return RuntimeHelper.requireNonNull(constants$1203.graphene_simd4f_neg$MH,"graphene_simd4f_neg");
    }
    /**
     * {@snippet :
     * float* graphene_simd4f_neg(const graphene_simd4f_t s);
     * }
     */
    public static MemorySegment graphene_simd4f_neg(MemorySegment s) {
        var mh$ = graphene_simd4f_neg$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_simd4x4f_transpose_in_place$MH() {
        return RuntimeHelper.requireNonNull(constants$1203.graphene_simd4x4f_transpose_in_place$MH,"graphene_simd4x4f_transpose_in_place");
    }
    /**
     * {@snippet :
     * void graphene_simd4x4f_transpose_in_place(graphene_simd4x4f_t* s);
     * }
     */
    public static void graphene_simd4x4f_transpose_in_place(MemorySegment s) {
        var mh$ = graphene_simd4x4f_transpose_in_place$MH();
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec2_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$1204.graphene_vec2_alloc$MH,"graphene_vec2_alloc");
    }
    /**
     * {@snippet :
     * graphene_vec2_t* graphene_vec2_alloc();
     * }
     */
    public static MemorySegment graphene_vec2_alloc() {
        var mh$ = graphene_vec2_alloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec2_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1204.graphene_vec2_free$MH,"graphene_vec2_free");
    }
    /**
     * {@snippet :
     * void graphene_vec2_free(graphene_vec2_t* v);
     * }
     */
    public static void graphene_vec2_free(MemorySegment v) {
        var mh$ = graphene_vec2_free$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec2_init$MH() {
        return RuntimeHelper.requireNonNull(constants$1204.graphene_vec2_init$MH,"graphene_vec2_init");
    }
    /**
     * {@snippet :
     * graphene_vec2_t* graphene_vec2_init(graphene_vec2_t* v, float x, float y);
     * }
     */
    public static MemorySegment graphene_vec2_init(MemorySegment v, float x, float y) {
        var mh$ = graphene_vec2_init$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(v, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec2_init_from_vec2$MH() {
        return RuntimeHelper.requireNonNull(constants$1204.graphene_vec2_init_from_vec2$MH,"graphene_vec2_init_from_vec2");
    }
    /**
     * {@snippet :
     * graphene_vec2_t* graphene_vec2_init_from_vec2(graphene_vec2_t* v, const graphene_vec2_t* src);
     * }
     */
    public static MemorySegment graphene_vec2_init_from_vec2(MemorySegment v, MemorySegment src) {
        var mh$ = graphene_vec2_init_from_vec2$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(v, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec2_init_from_float$MH() {
        return RuntimeHelper.requireNonNull(constants$1204.graphene_vec2_init_from_float$MH,"graphene_vec2_init_from_float");
    }
    /**
     * {@snippet :
     * graphene_vec2_t* graphene_vec2_init_from_float(graphene_vec2_t* v, float* src);
     * }
     */
    public static MemorySegment graphene_vec2_init_from_float(MemorySegment v, MemorySegment src) {
        var mh$ = graphene_vec2_init_from_float$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(v, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec2_to_float$MH() {
        return RuntimeHelper.requireNonNull(constants$1204.graphene_vec2_to_float$MH,"graphene_vec2_to_float");
    }
    /**
     * {@snippet :
     * void graphene_vec2_to_float(const graphene_vec2_t* v, float* dest);
     * }
     */
    public static void graphene_vec2_to_float(MemorySegment v, MemorySegment dest) {
        var mh$ = graphene_vec2_to_float$MH();
        try {
            mh$.invokeExact(v, dest);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec2_add$MH() {
        return RuntimeHelper.requireNonNull(constants$1205.graphene_vec2_add$MH,"graphene_vec2_add");
    }
    /**
     * {@snippet :
     * void graphene_vec2_add(const graphene_vec2_t* a, const graphene_vec2_t* b, graphene_vec2_t* res);
     * }
     */
    public static void graphene_vec2_add(MemorySegment a, MemorySegment b, MemorySegment res) {
        var mh$ = graphene_vec2_add$MH();
        try {
            mh$.invokeExact(a, b, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec2_subtract$MH() {
        return RuntimeHelper.requireNonNull(constants$1205.graphene_vec2_subtract$MH,"graphene_vec2_subtract");
    }
    /**
     * {@snippet :
     * void graphene_vec2_subtract(const graphene_vec2_t* a, const graphene_vec2_t* b, graphene_vec2_t* res);
     * }
     */
    public static void graphene_vec2_subtract(MemorySegment a, MemorySegment b, MemorySegment res) {
        var mh$ = graphene_vec2_subtract$MH();
        try {
            mh$.invokeExact(a, b, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec2_multiply$MH() {
        return RuntimeHelper.requireNonNull(constants$1205.graphene_vec2_multiply$MH,"graphene_vec2_multiply");
    }
    /**
     * {@snippet :
     * void graphene_vec2_multiply(const graphene_vec2_t* a, const graphene_vec2_t* b, graphene_vec2_t* res);
     * }
     */
    public static void graphene_vec2_multiply(MemorySegment a, MemorySegment b, MemorySegment res) {
        var mh$ = graphene_vec2_multiply$MH();
        try {
            mh$.invokeExact(a, b, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec2_divide$MH() {
        return RuntimeHelper.requireNonNull(constants$1205.graphene_vec2_divide$MH,"graphene_vec2_divide");
    }
    /**
     * {@snippet :
     * void graphene_vec2_divide(const graphene_vec2_t* a, const graphene_vec2_t* b, graphene_vec2_t* res);
     * }
     */
    public static void graphene_vec2_divide(MemorySegment a, MemorySegment b, MemorySegment res) {
        var mh$ = graphene_vec2_divide$MH();
        try {
            mh$.invokeExact(a, b, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec2_dot$MH() {
        return RuntimeHelper.requireNonNull(constants$1205.graphene_vec2_dot$MH,"graphene_vec2_dot");
    }
    /**
     * {@snippet :
     * float graphene_vec2_dot(const graphene_vec2_t* a, const graphene_vec2_t* b);
     * }
     */
    public static float graphene_vec2_dot(MemorySegment a, MemorySegment b) {
        var mh$ = graphene_vec2_dot$MH();
        try {
            return (float)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec2_length$MH() {
        return RuntimeHelper.requireNonNull(constants$1205.graphene_vec2_length$MH,"graphene_vec2_length");
    }
    /**
     * {@snippet :
     * float graphene_vec2_length(const graphene_vec2_t* v);
     * }
     */
    public static float graphene_vec2_length(MemorySegment v) {
        var mh$ = graphene_vec2_length$MH();
        try {
            return (float)mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec2_normalize$MH() {
        return RuntimeHelper.requireNonNull(constants$1206.graphene_vec2_normalize$MH,"graphene_vec2_normalize");
    }
    /**
     * {@snippet :
     * void graphene_vec2_normalize(const graphene_vec2_t* v, graphene_vec2_t* res);
     * }
     */
    public static void graphene_vec2_normalize(MemorySegment v, MemorySegment res) {
        var mh$ = graphene_vec2_normalize$MH();
        try {
            mh$.invokeExact(v, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec2_scale$MH() {
        return RuntimeHelper.requireNonNull(constants$1206.graphene_vec2_scale$MH,"graphene_vec2_scale");
    }
    /**
     * {@snippet :
     * void graphene_vec2_scale(const graphene_vec2_t* v, float factor, graphene_vec2_t* res);
     * }
     */
    public static void graphene_vec2_scale(MemorySegment v, float factor, MemorySegment res) {
        var mh$ = graphene_vec2_scale$MH();
        try {
            mh$.invokeExact(v, factor, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec2_negate$MH() {
        return RuntimeHelper.requireNonNull(constants$1206.graphene_vec2_negate$MH,"graphene_vec2_negate");
    }
    /**
     * {@snippet :
     * void graphene_vec2_negate(const graphene_vec2_t* v, graphene_vec2_t* res);
     * }
     */
    public static void graphene_vec2_negate(MemorySegment v, MemorySegment res) {
        var mh$ = graphene_vec2_negate$MH();
        try {
            mh$.invokeExact(v, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec2_near$MH() {
        return RuntimeHelper.requireNonNull(constants$1206.graphene_vec2_near$MH,"graphene_vec2_near");
    }
    /**
     * {@snippet :
     * _Bool graphene_vec2_near(const graphene_vec2_t* v1, const graphene_vec2_t* v2, float epsilon);
     * }
     */
    public static boolean graphene_vec2_near(MemorySegment v1, MemorySegment v2, float epsilon) {
        var mh$ = graphene_vec2_near$MH();
        try {
            return (boolean)mh$.invokeExact(v1, v2, epsilon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec2_equal$MH() {
        return RuntimeHelper.requireNonNull(constants$1206.graphene_vec2_equal$MH,"graphene_vec2_equal");
    }
    /**
     * {@snippet :
     * _Bool graphene_vec2_equal(const graphene_vec2_t* v1, const graphene_vec2_t* v2);
     * }
     */
    public static boolean graphene_vec2_equal(MemorySegment v1, MemorySegment v2) {
        var mh$ = graphene_vec2_equal$MH();
        try {
            return (boolean)mh$.invokeExact(v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec2_min$MH() {
        return RuntimeHelper.requireNonNull(constants$1206.graphene_vec2_min$MH,"graphene_vec2_min");
    }
    /**
     * {@snippet :
     * void graphene_vec2_min(const graphene_vec2_t* a, const graphene_vec2_t* b, graphene_vec2_t* res);
     * }
     */
    public static void graphene_vec2_min(MemorySegment a, MemorySegment b, MemorySegment res) {
        var mh$ = graphene_vec2_min$MH();
        try {
            mh$.invokeExact(a, b, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec2_max$MH() {
        return RuntimeHelper.requireNonNull(constants$1207.graphene_vec2_max$MH,"graphene_vec2_max");
    }
    /**
     * {@snippet :
     * void graphene_vec2_max(const graphene_vec2_t* a, const graphene_vec2_t* b, graphene_vec2_t* res);
     * }
     */
    public static void graphene_vec2_max(MemorySegment a, MemorySegment b, MemorySegment res) {
        var mh$ = graphene_vec2_max$MH();
        try {
            mh$.invokeExact(a, b, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec2_interpolate$MH() {
        return RuntimeHelper.requireNonNull(constants$1207.graphene_vec2_interpolate$MH,"graphene_vec2_interpolate");
    }
    /**
     * {@snippet :
     * void graphene_vec2_interpolate(const graphene_vec2_t* v1, const graphene_vec2_t* v2, double factor, graphene_vec2_t* res);
     * }
     */
    public static void graphene_vec2_interpolate(MemorySegment v1, MemorySegment v2, double factor, MemorySegment res) {
        var mh$ = graphene_vec2_interpolate$MH();
        try {
            mh$.invokeExact(v1, v2, factor, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec2_get_x$MH() {
        return RuntimeHelper.requireNonNull(constants$1207.graphene_vec2_get_x$MH,"graphene_vec2_get_x");
    }
    /**
     * {@snippet :
     * float graphene_vec2_get_x(const graphene_vec2_t* v);
     * }
     */
    public static float graphene_vec2_get_x(MemorySegment v) {
        var mh$ = graphene_vec2_get_x$MH();
        try {
            return (float)mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec2_get_y$MH() {
        return RuntimeHelper.requireNonNull(constants$1207.graphene_vec2_get_y$MH,"graphene_vec2_get_y");
    }
    /**
     * {@snippet :
     * float graphene_vec2_get_y(const graphene_vec2_t* v);
     * }
     */
    public static float graphene_vec2_get_y(MemorySegment v) {
        var mh$ = graphene_vec2_get_y$MH();
        try {
            return (float)mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec2_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$1207.graphene_vec2_zero$MH,"graphene_vec2_zero");
    }
    /**
     * {@snippet :
     * const graphene_vec2_t* graphene_vec2_zero();
     * }
     */
    public static MemorySegment graphene_vec2_zero() {
        var mh$ = graphene_vec2_zero$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec2_one$MH() {
        return RuntimeHelper.requireNonNull(constants$1207.graphene_vec2_one$MH,"graphene_vec2_one");
    }
    /**
     * {@snippet :
     * const graphene_vec2_t* graphene_vec2_one();
     * }
     */
    public static MemorySegment graphene_vec2_one() {
        var mh$ = graphene_vec2_one$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec2_x_axis$MH() {
        return RuntimeHelper.requireNonNull(constants$1208.graphene_vec2_x_axis$MH,"graphene_vec2_x_axis");
    }
    /**
     * {@snippet :
     * const graphene_vec2_t* graphene_vec2_x_axis();
     * }
     */
    public static MemorySegment graphene_vec2_x_axis() {
        var mh$ = graphene_vec2_x_axis$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec2_y_axis$MH() {
        return RuntimeHelper.requireNonNull(constants$1208.graphene_vec2_y_axis$MH,"graphene_vec2_y_axis");
    }
    /**
     * {@snippet :
     * const graphene_vec2_t* graphene_vec2_y_axis();
     * }
     */
    public static MemorySegment graphene_vec2_y_axis() {
        var mh$ = graphene_vec2_y_axis$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec3_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$1208.graphene_vec3_alloc$MH,"graphene_vec3_alloc");
    }
    /**
     * {@snippet :
     * graphene_vec3_t* graphene_vec3_alloc();
     * }
     */
    public static MemorySegment graphene_vec3_alloc() {
        var mh$ = graphene_vec3_alloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec3_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1208.graphene_vec3_free$MH,"graphene_vec3_free");
    }
    /**
     * {@snippet :
     * void graphene_vec3_free(graphene_vec3_t* v);
     * }
     */
    public static void graphene_vec3_free(MemorySegment v) {
        var mh$ = graphene_vec3_free$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec3_init$MH() {
        return RuntimeHelper.requireNonNull(constants$1208.graphene_vec3_init$MH,"graphene_vec3_init");
    }
    /**
     * {@snippet :
     * graphene_vec3_t* graphene_vec3_init(graphene_vec3_t* v, float x, float y, float z);
     * }
     */
    public static MemorySegment graphene_vec3_init(MemorySegment v, float x, float y, float z) {
        var mh$ = graphene_vec3_init$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(v, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec3_init_from_vec3$MH() {
        return RuntimeHelper.requireNonNull(constants$1208.graphene_vec3_init_from_vec3$MH,"graphene_vec3_init_from_vec3");
    }
    /**
     * {@snippet :
     * graphene_vec3_t* graphene_vec3_init_from_vec3(graphene_vec3_t* v, const graphene_vec3_t* src);
     * }
     */
    public static MemorySegment graphene_vec3_init_from_vec3(MemorySegment v, MemorySegment src) {
        var mh$ = graphene_vec3_init_from_vec3$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(v, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec3_init_from_float$MH() {
        return RuntimeHelper.requireNonNull(constants$1209.graphene_vec3_init_from_float$MH,"graphene_vec3_init_from_float");
    }
    /**
     * {@snippet :
     * graphene_vec3_t* graphene_vec3_init_from_float(graphene_vec3_t* v, float* src);
     * }
     */
    public static MemorySegment graphene_vec3_init_from_float(MemorySegment v, MemorySegment src) {
        var mh$ = graphene_vec3_init_from_float$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(v, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec3_to_float$MH() {
        return RuntimeHelper.requireNonNull(constants$1209.graphene_vec3_to_float$MH,"graphene_vec3_to_float");
    }
    /**
     * {@snippet :
     * void graphene_vec3_to_float(const graphene_vec3_t* v, float* dest);
     * }
     */
    public static void graphene_vec3_to_float(MemorySegment v, MemorySegment dest) {
        var mh$ = graphene_vec3_to_float$MH();
        try {
            mh$.invokeExact(v, dest);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec3_add$MH() {
        return RuntimeHelper.requireNonNull(constants$1209.graphene_vec3_add$MH,"graphene_vec3_add");
    }
    /**
     * {@snippet :
     * void graphene_vec3_add(const graphene_vec3_t* a, const graphene_vec3_t* b, graphene_vec3_t* res);
     * }
     */
    public static void graphene_vec3_add(MemorySegment a, MemorySegment b, MemorySegment res) {
        var mh$ = graphene_vec3_add$MH();
        try {
            mh$.invokeExact(a, b, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec3_subtract$MH() {
        return RuntimeHelper.requireNonNull(constants$1209.graphene_vec3_subtract$MH,"graphene_vec3_subtract");
    }
    /**
     * {@snippet :
     * void graphene_vec3_subtract(const graphene_vec3_t* a, const graphene_vec3_t* b, graphene_vec3_t* res);
     * }
     */
    public static void graphene_vec3_subtract(MemorySegment a, MemorySegment b, MemorySegment res) {
        var mh$ = graphene_vec3_subtract$MH();
        try {
            mh$.invokeExact(a, b, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec3_multiply$MH() {
        return RuntimeHelper.requireNonNull(constants$1209.graphene_vec3_multiply$MH,"graphene_vec3_multiply");
    }
    /**
     * {@snippet :
     * void graphene_vec3_multiply(const graphene_vec3_t* a, const graphene_vec3_t* b, graphene_vec3_t* res);
     * }
     */
    public static void graphene_vec3_multiply(MemorySegment a, MemorySegment b, MemorySegment res) {
        var mh$ = graphene_vec3_multiply$MH();
        try {
            mh$.invokeExact(a, b, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec3_divide$MH() {
        return RuntimeHelper.requireNonNull(constants$1209.graphene_vec3_divide$MH,"graphene_vec3_divide");
    }
    /**
     * {@snippet :
     * void graphene_vec3_divide(const graphene_vec3_t* a, const graphene_vec3_t* b, graphene_vec3_t* res);
     * }
     */
    public static void graphene_vec3_divide(MemorySegment a, MemorySegment b, MemorySegment res) {
        var mh$ = graphene_vec3_divide$MH();
        try {
            mh$.invokeExact(a, b, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec3_cross$MH() {
        return RuntimeHelper.requireNonNull(constants$1210.graphene_vec3_cross$MH,"graphene_vec3_cross");
    }
    /**
     * {@snippet :
     * void graphene_vec3_cross(const graphene_vec3_t* a, const graphene_vec3_t* b, graphene_vec3_t* res);
     * }
     */
    public static void graphene_vec3_cross(MemorySegment a, MemorySegment b, MemorySegment res) {
        var mh$ = graphene_vec3_cross$MH();
        try {
            mh$.invokeExact(a, b, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec3_dot$MH() {
        return RuntimeHelper.requireNonNull(constants$1210.graphene_vec3_dot$MH,"graphene_vec3_dot");
    }
    /**
     * {@snippet :
     * float graphene_vec3_dot(const graphene_vec3_t* a, const graphene_vec3_t* b);
     * }
     */
    public static float graphene_vec3_dot(MemorySegment a, MemorySegment b) {
        var mh$ = graphene_vec3_dot$MH();
        try {
            return (float)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec3_length$MH() {
        return RuntimeHelper.requireNonNull(constants$1210.graphene_vec3_length$MH,"graphene_vec3_length");
    }
    /**
     * {@snippet :
     * float graphene_vec3_length(const graphene_vec3_t* v);
     * }
     */
    public static float graphene_vec3_length(MemorySegment v) {
        var mh$ = graphene_vec3_length$MH();
        try {
            return (float)mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec3_normalize$MH() {
        return RuntimeHelper.requireNonNull(constants$1210.graphene_vec3_normalize$MH,"graphene_vec3_normalize");
    }
    /**
     * {@snippet :
     * void graphene_vec3_normalize(const graphene_vec3_t* v, graphene_vec3_t* res);
     * }
     */
    public static void graphene_vec3_normalize(MemorySegment v, MemorySegment res) {
        var mh$ = graphene_vec3_normalize$MH();
        try {
            mh$.invokeExact(v, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec3_scale$MH() {
        return RuntimeHelper.requireNonNull(constants$1210.graphene_vec3_scale$MH,"graphene_vec3_scale");
    }
    /**
     * {@snippet :
     * void graphene_vec3_scale(const graphene_vec3_t* v, float factor, graphene_vec3_t* res);
     * }
     */
    public static void graphene_vec3_scale(MemorySegment v, float factor, MemorySegment res) {
        var mh$ = graphene_vec3_scale$MH();
        try {
            mh$.invokeExact(v, factor, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec3_negate$MH() {
        return RuntimeHelper.requireNonNull(constants$1210.graphene_vec3_negate$MH,"graphene_vec3_negate");
    }
    /**
     * {@snippet :
     * void graphene_vec3_negate(const graphene_vec3_t* v, graphene_vec3_t* res);
     * }
     */
    public static void graphene_vec3_negate(MemorySegment v, MemorySegment res) {
        var mh$ = graphene_vec3_negate$MH();
        try {
            mh$.invokeExact(v, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec3_equal$MH() {
        return RuntimeHelper.requireNonNull(constants$1211.graphene_vec3_equal$MH,"graphene_vec3_equal");
    }
    /**
     * {@snippet :
     * _Bool graphene_vec3_equal(const graphene_vec3_t* v1, const graphene_vec3_t* v2);
     * }
     */
    public static boolean graphene_vec3_equal(MemorySegment v1, MemorySegment v2) {
        var mh$ = graphene_vec3_equal$MH();
        try {
            return (boolean)mh$.invokeExact(v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec3_near$MH() {
        return RuntimeHelper.requireNonNull(constants$1211.graphene_vec3_near$MH,"graphene_vec3_near");
    }
    /**
     * {@snippet :
     * _Bool graphene_vec3_near(const graphene_vec3_t* v1, const graphene_vec3_t* v2, float epsilon);
     * }
     */
    public static boolean graphene_vec3_near(MemorySegment v1, MemorySegment v2, float epsilon) {
        var mh$ = graphene_vec3_near$MH();
        try {
            return (boolean)mh$.invokeExact(v1, v2, epsilon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec3_min$MH() {
        return RuntimeHelper.requireNonNull(constants$1211.graphene_vec3_min$MH,"graphene_vec3_min");
    }
    /**
     * {@snippet :
     * void graphene_vec3_min(const graphene_vec3_t* a, const graphene_vec3_t* b, graphene_vec3_t* res);
     * }
     */
    public static void graphene_vec3_min(MemorySegment a, MemorySegment b, MemorySegment res) {
        var mh$ = graphene_vec3_min$MH();
        try {
            mh$.invokeExact(a, b, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec3_max$MH() {
        return RuntimeHelper.requireNonNull(constants$1211.graphene_vec3_max$MH,"graphene_vec3_max");
    }
    /**
     * {@snippet :
     * void graphene_vec3_max(const graphene_vec3_t* a, const graphene_vec3_t* b, graphene_vec3_t* res);
     * }
     */
    public static void graphene_vec3_max(MemorySegment a, MemorySegment b, MemorySegment res) {
        var mh$ = graphene_vec3_max$MH();
        try {
            mh$.invokeExact(a, b, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec3_interpolate$MH() {
        return RuntimeHelper.requireNonNull(constants$1211.graphene_vec3_interpolate$MH,"graphene_vec3_interpolate");
    }
    /**
     * {@snippet :
     * void graphene_vec3_interpolate(const graphene_vec3_t* v1, const graphene_vec3_t* v2, double factor, graphene_vec3_t* res);
     * }
     */
    public static void graphene_vec3_interpolate(MemorySegment v1, MemorySegment v2, double factor, MemorySegment res) {
        var mh$ = graphene_vec3_interpolate$MH();
        try {
            mh$.invokeExact(v1, v2, factor, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec3_get_x$MH() {
        return RuntimeHelper.requireNonNull(constants$1211.graphene_vec3_get_x$MH,"graphene_vec3_get_x");
    }
    /**
     * {@snippet :
     * float graphene_vec3_get_x(const graphene_vec3_t* v);
     * }
     */
    public static float graphene_vec3_get_x(MemorySegment v) {
        var mh$ = graphene_vec3_get_x$MH();
        try {
            return (float)mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec3_get_y$MH() {
        return RuntimeHelper.requireNonNull(constants$1212.graphene_vec3_get_y$MH,"graphene_vec3_get_y");
    }
    /**
     * {@snippet :
     * float graphene_vec3_get_y(const graphene_vec3_t* v);
     * }
     */
    public static float graphene_vec3_get_y(MemorySegment v) {
        var mh$ = graphene_vec3_get_y$MH();
        try {
            return (float)mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec3_get_z$MH() {
        return RuntimeHelper.requireNonNull(constants$1212.graphene_vec3_get_z$MH,"graphene_vec3_get_z");
    }
    /**
     * {@snippet :
     * float graphene_vec3_get_z(const graphene_vec3_t* v);
     * }
     */
    public static float graphene_vec3_get_z(MemorySegment v) {
        var mh$ = graphene_vec3_get_z$MH();
        try {
            return (float)mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec3_get_xy$MH() {
        return RuntimeHelper.requireNonNull(constants$1212.graphene_vec3_get_xy$MH,"graphene_vec3_get_xy");
    }
    /**
     * {@snippet :
     * void graphene_vec3_get_xy(const graphene_vec3_t* v, graphene_vec2_t* res);
     * }
     */
    public static void graphene_vec3_get_xy(MemorySegment v, MemorySegment res) {
        var mh$ = graphene_vec3_get_xy$MH();
        try {
            mh$.invokeExact(v, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec3_get_xy0$MH() {
        return RuntimeHelper.requireNonNull(constants$1212.graphene_vec3_get_xy0$MH,"graphene_vec3_get_xy0");
    }
    /**
     * {@snippet :
     * void graphene_vec3_get_xy0(const graphene_vec3_t* v, graphene_vec3_t* res);
     * }
     */
    public static void graphene_vec3_get_xy0(MemorySegment v, MemorySegment res) {
        var mh$ = graphene_vec3_get_xy0$MH();
        try {
            mh$.invokeExact(v, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec3_get_xyz0$MH() {
        return RuntimeHelper.requireNonNull(constants$1212.graphene_vec3_get_xyz0$MH,"graphene_vec3_get_xyz0");
    }
    /**
     * {@snippet :
     * void graphene_vec3_get_xyz0(const graphene_vec3_t* v, graphene_vec4_t* res);
     * }
     */
    public static void graphene_vec3_get_xyz0(MemorySegment v, MemorySegment res) {
        var mh$ = graphene_vec3_get_xyz0$MH();
        try {
            mh$.invokeExact(v, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec3_get_xyz1$MH() {
        return RuntimeHelper.requireNonNull(constants$1212.graphene_vec3_get_xyz1$MH,"graphene_vec3_get_xyz1");
    }
    /**
     * {@snippet :
     * void graphene_vec3_get_xyz1(const graphene_vec3_t* v, graphene_vec4_t* res);
     * }
     */
    public static void graphene_vec3_get_xyz1(MemorySegment v, MemorySegment res) {
        var mh$ = graphene_vec3_get_xyz1$MH();
        try {
            mh$.invokeExact(v, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec3_get_xyzw$MH() {
        return RuntimeHelper.requireNonNull(constants$1213.graphene_vec3_get_xyzw$MH,"graphene_vec3_get_xyzw");
    }
    /**
     * {@snippet :
     * void graphene_vec3_get_xyzw(const graphene_vec3_t* v, float w, graphene_vec4_t* res);
     * }
     */
    public static void graphene_vec3_get_xyzw(MemorySegment v, float w, MemorySegment res) {
        var mh$ = graphene_vec3_get_xyzw$MH();
        try {
            mh$.invokeExact(v, w, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec3_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$1213.graphene_vec3_zero$MH,"graphene_vec3_zero");
    }
    /**
     * {@snippet :
     * const graphene_vec3_t* graphene_vec3_zero();
     * }
     */
    public static MemorySegment graphene_vec3_zero() {
        var mh$ = graphene_vec3_zero$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec3_one$MH() {
        return RuntimeHelper.requireNonNull(constants$1213.graphene_vec3_one$MH,"graphene_vec3_one");
    }
    /**
     * {@snippet :
     * const graphene_vec3_t* graphene_vec3_one();
     * }
     */
    public static MemorySegment graphene_vec3_one() {
        var mh$ = graphene_vec3_one$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec3_x_axis$MH() {
        return RuntimeHelper.requireNonNull(constants$1213.graphene_vec3_x_axis$MH,"graphene_vec3_x_axis");
    }
    /**
     * {@snippet :
     * const graphene_vec3_t* graphene_vec3_x_axis();
     * }
     */
    public static MemorySegment graphene_vec3_x_axis() {
        var mh$ = graphene_vec3_x_axis$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec3_y_axis$MH() {
        return RuntimeHelper.requireNonNull(constants$1213.graphene_vec3_y_axis$MH,"graphene_vec3_y_axis");
    }
    /**
     * {@snippet :
     * const graphene_vec3_t* graphene_vec3_y_axis();
     * }
     */
    public static MemorySegment graphene_vec3_y_axis() {
        var mh$ = graphene_vec3_y_axis$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec3_z_axis$MH() {
        return RuntimeHelper.requireNonNull(constants$1213.graphene_vec3_z_axis$MH,"graphene_vec3_z_axis");
    }
    /**
     * {@snippet :
     * const graphene_vec3_t* graphene_vec3_z_axis();
     * }
     */
    public static MemorySegment graphene_vec3_z_axis() {
        var mh$ = graphene_vec3_z_axis$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec4_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$1214.graphene_vec4_alloc$MH,"graphene_vec4_alloc");
    }
    /**
     * {@snippet :
     * graphene_vec4_t* graphene_vec4_alloc();
     * }
     */
    public static MemorySegment graphene_vec4_alloc() {
        var mh$ = graphene_vec4_alloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec4_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1214.graphene_vec4_free$MH,"graphene_vec4_free");
    }
    /**
     * {@snippet :
     * void graphene_vec4_free(graphene_vec4_t* v);
     * }
     */
    public static void graphene_vec4_free(MemorySegment v) {
        var mh$ = graphene_vec4_free$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec4_init$MH() {
        return RuntimeHelper.requireNonNull(constants$1214.graphene_vec4_init$MH,"graphene_vec4_init");
    }
    /**
     * {@snippet :
     * graphene_vec4_t* graphene_vec4_init(graphene_vec4_t* v, float x, float y, float z, float w);
     * }
     */
    public static MemorySegment graphene_vec4_init(MemorySegment v, float x, float y, float z, float w) {
        var mh$ = graphene_vec4_init$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(v, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec4_init_from_vec4$MH() {
        return RuntimeHelper.requireNonNull(constants$1214.graphene_vec4_init_from_vec4$MH,"graphene_vec4_init_from_vec4");
    }
    /**
     * {@snippet :
     * graphene_vec4_t* graphene_vec4_init_from_vec4(graphene_vec4_t* v, const graphene_vec4_t* src);
     * }
     */
    public static MemorySegment graphene_vec4_init_from_vec4(MemorySegment v, MemorySegment src) {
        var mh$ = graphene_vec4_init_from_vec4$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(v, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec4_init_from_vec3$MH() {
        return RuntimeHelper.requireNonNull(constants$1214.graphene_vec4_init_from_vec3$MH,"graphene_vec4_init_from_vec3");
    }
    /**
     * {@snippet :
     * graphene_vec4_t* graphene_vec4_init_from_vec3(graphene_vec4_t* v, const graphene_vec3_t* src, float w);
     * }
     */
    public static MemorySegment graphene_vec4_init_from_vec3(MemorySegment v, MemorySegment src, float w) {
        var mh$ = graphene_vec4_init_from_vec3$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(v, src, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec4_init_from_vec2$MH() {
        return RuntimeHelper.requireNonNull(constants$1214.graphene_vec4_init_from_vec2$MH,"graphene_vec4_init_from_vec2");
    }
    /**
     * {@snippet :
     * graphene_vec4_t* graphene_vec4_init_from_vec2(graphene_vec4_t* v, const graphene_vec2_t* src, float z, float w);
     * }
     */
    public static MemorySegment graphene_vec4_init_from_vec2(MemorySegment v, MemorySegment src, float z, float w) {
        var mh$ = graphene_vec4_init_from_vec2$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(v, src, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec4_init_from_float$MH() {
        return RuntimeHelper.requireNonNull(constants$1215.graphene_vec4_init_from_float$MH,"graphene_vec4_init_from_float");
    }
    /**
     * {@snippet :
     * graphene_vec4_t* graphene_vec4_init_from_float(graphene_vec4_t* v, float* src);
     * }
     */
    public static MemorySegment graphene_vec4_init_from_float(MemorySegment v, MemorySegment src) {
        var mh$ = graphene_vec4_init_from_float$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(v, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec4_to_float$MH() {
        return RuntimeHelper.requireNonNull(constants$1215.graphene_vec4_to_float$MH,"graphene_vec4_to_float");
    }
    /**
     * {@snippet :
     * void graphene_vec4_to_float(const graphene_vec4_t* v, float* dest);
     * }
     */
    public static void graphene_vec4_to_float(MemorySegment v, MemorySegment dest) {
        var mh$ = graphene_vec4_to_float$MH();
        try {
            mh$.invokeExact(v, dest);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec4_add$MH() {
        return RuntimeHelper.requireNonNull(constants$1215.graphene_vec4_add$MH,"graphene_vec4_add");
    }
    /**
     * {@snippet :
     * void graphene_vec4_add(const graphene_vec4_t* a, const graphene_vec4_t* b, graphene_vec4_t* res);
     * }
     */
    public static void graphene_vec4_add(MemorySegment a, MemorySegment b, MemorySegment res) {
        var mh$ = graphene_vec4_add$MH();
        try {
            mh$.invokeExact(a, b, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec4_subtract$MH() {
        return RuntimeHelper.requireNonNull(constants$1215.graphene_vec4_subtract$MH,"graphene_vec4_subtract");
    }
    /**
     * {@snippet :
     * void graphene_vec4_subtract(const graphene_vec4_t* a, const graphene_vec4_t* b, graphene_vec4_t* res);
     * }
     */
    public static void graphene_vec4_subtract(MemorySegment a, MemorySegment b, MemorySegment res) {
        var mh$ = graphene_vec4_subtract$MH();
        try {
            mh$.invokeExact(a, b, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec4_multiply$MH() {
        return RuntimeHelper.requireNonNull(constants$1215.graphene_vec4_multiply$MH,"graphene_vec4_multiply");
    }
    /**
     * {@snippet :
     * void graphene_vec4_multiply(const graphene_vec4_t* a, const graphene_vec4_t* b, graphene_vec4_t* res);
     * }
     */
    public static void graphene_vec4_multiply(MemorySegment a, MemorySegment b, MemorySegment res) {
        var mh$ = graphene_vec4_multiply$MH();
        try {
            mh$.invokeExact(a, b, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec4_divide$MH() {
        return RuntimeHelper.requireNonNull(constants$1215.graphene_vec4_divide$MH,"graphene_vec4_divide");
    }
    /**
     * {@snippet :
     * void graphene_vec4_divide(const graphene_vec4_t* a, const graphene_vec4_t* b, graphene_vec4_t* res);
     * }
     */
    public static void graphene_vec4_divide(MemorySegment a, MemorySegment b, MemorySegment res) {
        var mh$ = graphene_vec4_divide$MH();
        try {
            mh$.invokeExact(a, b, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec4_dot$MH() {
        return RuntimeHelper.requireNonNull(constants$1216.graphene_vec4_dot$MH,"graphene_vec4_dot");
    }
    /**
     * {@snippet :
     * float graphene_vec4_dot(const graphene_vec4_t* a, const graphene_vec4_t* b);
     * }
     */
    public static float graphene_vec4_dot(MemorySegment a, MemorySegment b) {
        var mh$ = graphene_vec4_dot$MH();
        try {
            return (float)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec4_length$MH() {
        return RuntimeHelper.requireNonNull(constants$1216.graphene_vec4_length$MH,"graphene_vec4_length");
    }
    /**
     * {@snippet :
     * float graphene_vec4_length(const graphene_vec4_t* v);
     * }
     */
    public static float graphene_vec4_length(MemorySegment v) {
        var mh$ = graphene_vec4_length$MH();
        try {
            return (float)mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec4_normalize$MH() {
        return RuntimeHelper.requireNonNull(constants$1216.graphene_vec4_normalize$MH,"graphene_vec4_normalize");
    }
    /**
     * {@snippet :
     * void graphene_vec4_normalize(const graphene_vec4_t* v, graphene_vec4_t* res);
     * }
     */
    public static void graphene_vec4_normalize(MemorySegment v, MemorySegment res) {
        var mh$ = graphene_vec4_normalize$MH();
        try {
            mh$.invokeExact(v, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec4_scale$MH() {
        return RuntimeHelper.requireNonNull(constants$1216.graphene_vec4_scale$MH,"graphene_vec4_scale");
    }
    /**
     * {@snippet :
     * void graphene_vec4_scale(const graphene_vec4_t* v, float factor, graphene_vec4_t* res);
     * }
     */
    public static void graphene_vec4_scale(MemorySegment v, float factor, MemorySegment res) {
        var mh$ = graphene_vec4_scale$MH();
        try {
            mh$.invokeExact(v, factor, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec4_negate$MH() {
        return RuntimeHelper.requireNonNull(constants$1216.graphene_vec4_negate$MH,"graphene_vec4_negate");
    }
    /**
     * {@snippet :
     * void graphene_vec4_negate(const graphene_vec4_t* v, graphene_vec4_t* res);
     * }
     */
    public static void graphene_vec4_negate(MemorySegment v, MemorySegment res) {
        var mh$ = graphene_vec4_negate$MH();
        try {
            mh$.invokeExact(v, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec4_equal$MH() {
        return RuntimeHelper.requireNonNull(constants$1216.graphene_vec4_equal$MH,"graphene_vec4_equal");
    }
    /**
     * {@snippet :
     * _Bool graphene_vec4_equal(const graphene_vec4_t* v1, const graphene_vec4_t* v2);
     * }
     */
    public static boolean graphene_vec4_equal(MemorySegment v1, MemorySegment v2) {
        var mh$ = graphene_vec4_equal$MH();
        try {
            return (boolean)mh$.invokeExact(v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec4_near$MH() {
        return RuntimeHelper.requireNonNull(constants$1217.graphene_vec4_near$MH,"graphene_vec4_near");
    }
    /**
     * {@snippet :
     * _Bool graphene_vec4_near(const graphene_vec4_t* v1, const graphene_vec4_t* v2, float epsilon);
     * }
     */
    public static boolean graphene_vec4_near(MemorySegment v1, MemorySegment v2, float epsilon) {
        var mh$ = graphene_vec4_near$MH();
        try {
            return (boolean)mh$.invokeExact(v1, v2, epsilon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec4_min$MH() {
        return RuntimeHelper.requireNonNull(constants$1217.graphene_vec4_min$MH,"graphene_vec4_min");
    }
    /**
     * {@snippet :
     * void graphene_vec4_min(const graphene_vec4_t* a, const graphene_vec4_t* b, graphene_vec4_t* res);
     * }
     */
    public static void graphene_vec4_min(MemorySegment a, MemorySegment b, MemorySegment res) {
        var mh$ = graphene_vec4_min$MH();
        try {
            mh$.invokeExact(a, b, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec4_max$MH() {
        return RuntimeHelper.requireNonNull(constants$1217.graphene_vec4_max$MH,"graphene_vec4_max");
    }
    /**
     * {@snippet :
     * void graphene_vec4_max(const graphene_vec4_t* a, const graphene_vec4_t* b, graphene_vec4_t* res);
     * }
     */
    public static void graphene_vec4_max(MemorySegment a, MemorySegment b, MemorySegment res) {
        var mh$ = graphene_vec4_max$MH();
        try {
            mh$.invokeExact(a, b, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec4_interpolate$MH() {
        return RuntimeHelper.requireNonNull(constants$1217.graphene_vec4_interpolate$MH,"graphene_vec4_interpolate");
    }
    /**
     * {@snippet :
     * void graphene_vec4_interpolate(const graphene_vec4_t* v1, const graphene_vec4_t* v2, double factor, graphene_vec4_t* res);
     * }
     */
    public static void graphene_vec4_interpolate(MemorySegment v1, MemorySegment v2, double factor, MemorySegment res) {
        var mh$ = graphene_vec4_interpolate$MH();
        try {
            mh$.invokeExact(v1, v2, factor, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec4_get_x$MH() {
        return RuntimeHelper.requireNonNull(constants$1217.graphene_vec4_get_x$MH,"graphene_vec4_get_x");
    }
    /**
     * {@snippet :
     * float graphene_vec4_get_x(const graphene_vec4_t* v);
     * }
     */
    public static float graphene_vec4_get_x(MemorySegment v) {
        var mh$ = graphene_vec4_get_x$MH();
        try {
            return (float)mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec4_get_y$MH() {
        return RuntimeHelper.requireNonNull(constants$1217.graphene_vec4_get_y$MH,"graphene_vec4_get_y");
    }
    /**
     * {@snippet :
     * float graphene_vec4_get_y(const graphene_vec4_t* v);
     * }
     */
    public static float graphene_vec4_get_y(MemorySegment v) {
        var mh$ = graphene_vec4_get_y$MH();
        try {
            return (float)mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec4_get_z$MH() {
        return RuntimeHelper.requireNonNull(constants$1218.graphene_vec4_get_z$MH,"graphene_vec4_get_z");
    }
    /**
     * {@snippet :
     * float graphene_vec4_get_z(const graphene_vec4_t* v);
     * }
     */
    public static float graphene_vec4_get_z(MemorySegment v) {
        var mh$ = graphene_vec4_get_z$MH();
        try {
            return (float)mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec4_get_w$MH() {
        return RuntimeHelper.requireNonNull(constants$1218.graphene_vec4_get_w$MH,"graphene_vec4_get_w");
    }
    /**
     * {@snippet :
     * float graphene_vec4_get_w(const graphene_vec4_t* v);
     * }
     */
    public static float graphene_vec4_get_w(MemorySegment v) {
        var mh$ = graphene_vec4_get_w$MH();
        try {
            return (float)mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec4_get_xy$MH() {
        return RuntimeHelper.requireNonNull(constants$1218.graphene_vec4_get_xy$MH,"graphene_vec4_get_xy");
    }
    /**
     * {@snippet :
     * void graphene_vec4_get_xy(const graphene_vec4_t* v, graphene_vec2_t* res);
     * }
     */
    public static void graphene_vec4_get_xy(MemorySegment v, MemorySegment res) {
        var mh$ = graphene_vec4_get_xy$MH();
        try {
            mh$.invokeExact(v, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec4_get_xyz$MH() {
        return RuntimeHelper.requireNonNull(constants$1218.graphene_vec4_get_xyz$MH,"graphene_vec4_get_xyz");
    }
    /**
     * {@snippet :
     * void graphene_vec4_get_xyz(const graphene_vec4_t* v, graphene_vec3_t* res);
     * }
     */
    public static void graphene_vec4_get_xyz(MemorySegment v, MemorySegment res) {
        var mh$ = graphene_vec4_get_xyz$MH();
        try {
            mh$.invokeExact(v, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec4_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$1218.graphene_vec4_zero$MH,"graphene_vec4_zero");
    }
    /**
     * {@snippet :
     * const graphene_vec4_t* graphene_vec4_zero();
     * }
     */
    public static MemorySegment graphene_vec4_zero() {
        var mh$ = graphene_vec4_zero$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec4_one$MH() {
        return RuntimeHelper.requireNonNull(constants$1218.graphene_vec4_one$MH,"graphene_vec4_one");
    }
    /**
     * {@snippet :
     * const graphene_vec4_t* graphene_vec4_one();
     * }
     */
    public static MemorySegment graphene_vec4_one() {
        var mh$ = graphene_vec4_one$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec4_x_axis$MH() {
        return RuntimeHelper.requireNonNull(constants$1219.graphene_vec4_x_axis$MH,"graphene_vec4_x_axis");
    }
    /**
     * {@snippet :
     * const graphene_vec4_t* graphene_vec4_x_axis();
     * }
     */
    public static MemorySegment graphene_vec4_x_axis() {
        var mh$ = graphene_vec4_x_axis$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec4_y_axis$MH() {
        return RuntimeHelper.requireNonNull(constants$1219.graphene_vec4_y_axis$MH,"graphene_vec4_y_axis");
    }
    /**
     * {@snippet :
     * const graphene_vec4_t* graphene_vec4_y_axis();
     * }
     */
    public static MemorySegment graphene_vec4_y_axis() {
        var mh$ = graphene_vec4_y_axis$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec4_z_axis$MH() {
        return RuntimeHelper.requireNonNull(constants$1219.graphene_vec4_z_axis$MH,"graphene_vec4_z_axis");
    }
    /**
     * {@snippet :
     * const graphene_vec4_t* graphene_vec4_z_axis();
     * }
     */
    public static MemorySegment graphene_vec4_z_axis() {
        var mh$ = graphene_vec4_z_axis$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_vec4_w_axis$MH() {
        return RuntimeHelper.requireNonNull(constants$1219.graphene_vec4_w_axis$MH,"graphene_vec4_w_axis");
    }
    /**
     * {@snippet :
     * const graphene_vec4_t* graphene_vec4_w_axis();
     * }
     */
    public static MemorySegment graphene_vec4_w_axis() {
        var mh$ = graphene_vec4_w_axis$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$1219.graphene_matrix_alloc$MH,"graphene_matrix_alloc");
    }
    /**
     * {@snippet :
     * graphene_matrix_t* graphene_matrix_alloc();
     * }
     */
    public static MemorySegment graphene_matrix_alloc() {
        var mh$ = graphene_matrix_alloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1219.graphene_matrix_free$MH,"graphene_matrix_free");
    }
    /**
     * {@snippet :
     * void graphene_matrix_free(graphene_matrix_t* m);
     * }
     */
    public static void graphene_matrix_free(MemorySegment m) {
        var mh$ = graphene_matrix_free$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_init_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$1220.graphene_matrix_init_identity$MH,"graphene_matrix_init_identity");
    }
    /**
     * {@snippet :
     * graphene_matrix_t* graphene_matrix_init_identity(graphene_matrix_t* m);
     * }
     */
    public static MemorySegment graphene_matrix_init_identity(MemorySegment m) {
        var mh$ = graphene_matrix_init_identity$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_init_from_float$MH() {
        return RuntimeHelper.requireNonNull(constants$1220.graphene_matrix_init_from_float$MH,"graphene_matrix_init_from_float");
    }
    /**
     * {@snippet :
     * graphene_matrix_t* graphene_matrix_init_from_float(graphene_matrix_t* m, float* v);
     * }
     */
    public static MemorySegment graphene_matrix_init_from_float(MemorySegment m, MemorySegment v) {
        var mh$ = graphene_matrix_init_from_float$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(m, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_init_from_vec4$MH() {
        return RuntimeHelper.requireNonNull(constants$1220.graphene_matrix_init_from_vec4$MH,"graphene_matrix_init_from_vec4");
    }
    /**
     * {@snippet :
     * graphene_matrix_t* graphene_matrix_init_from_vec4(graphene_matrix_t* m, const graphene_vec4_t* v0, const graphene_vec4_t* v1, const graphene_vec4_t* v2, const graphene_vec4_t* v3);
     * }
     */
    public static MemorySegment graphene_matrix_init_from_vec4(MemorySegment m, MemorySegment v0, MemorySegment v1, MemorySegment v2, MemorySegment v3) {
        var mh$ = graphene_matrix_init_from_vec4$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(m, v0, v1, v2, v3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_init_from_matrix$MH() {
        return RuntimeHelper.requireNonNull(constants$1220.graphene_matrix_init_from_matrix$MH,"graphene_matrix_init_from_matrix");
    }
    /**
     * {@snippet :
     * graphene_matrix_t* graphene_matrix_init_from_matrix(graphene_matrix_t* m, const graphene_matrix_t* src);
     * }
     */
    public static MemorySegment graphene_matrix_init_from_matrix(MemorySegment m, MemorySegment src) {
        var mh$ = graphene_matrix_init_from_matrix$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(m, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_init_perspective$MH() {
        return RuntimeHelper.requireNonNull(constants$1220.graphene_matrix_init_perspective$MH,"graphene_matrix_init_perspective");
    }
    /**
     * {@snippet :
     * graphene_matrix_t* graphene_matrix_init_perspective(graphene_matrix_t* m, float fovy, float aspect, float z_near, float z_far);
     * }
     */
    public static MemorySegment graphene_matrix_init_perspective(MemorySegment m, float fovy, float aspect, float z_near, float z_far) {
        var mh$ = graphene_matrix_init_perspective$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(m, fovy, aspect, z_near, z_far);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_init_ortho$MH() {
        return RuntimeHelper.requireNonNull(constants$1220.graphene_matrix_init_ortho$MH,"graphene_matrix_init_ortho");
    }
    /**
     * {@snippet :
     * graphene_matrix_t* graphene_matrix_init_ortho(graphene_matrix_t* m, float left, float right, float top, float bottom, float z_near, float z_far);
     * }
     */
    public static MemorySegment graphene_matrix_init_ortho(MemorySegment m, float left, float right, float top, float bottom, float z_near, float z_far) {
        var mh$ = graphene_matrix_init_ortho$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(m, left, right, top, bottom, z_near, z_far);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_init_look_at$MH() {
        return RuntimeHelper.requireNonNull(constants$1221.graphene_matrix_init_look_at$MH,"graphene_matrix_init_look_at");
    }
    /**
     * {@snippet :
     * graphene_matrix_t* graphene_matrix_init_look_at(graphene_matrix_t* m, const graphene_vec3_t* eye, const graphene_vec3_t* center, const graphene_vec3_t* up);
     * }
     */
    public static MemorySegment graphene_matrix_init_look_at(MemorySegment m, MemorySegment eye, MemorySegment center, MemorySegment up) {
        var mh$ = graphene_matrix_init_look_at$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(m, eye, center, up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_init_frustum$MH() {
        return RuntimeHelper.requireNonNull(constants$1221.graphene_matrix_init_frustum$MH,"graphene_matrix_init_frustum");
    }
    /**
     * {@snippet :
     * graphene_matrix_t* graphene_matrix_init_frustum(graphene_matrix_t* m, float left, float right, float bottom, float top, float z_near, float z_far);
     * }
     */
    public static MemorySegment graphene_matrix_init_frustum(MemorySegment m, float left, float right, float bottom, float top, float z_near, float z_far) {
        var mh$ = graphene_matrix_init_frustum$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(m, left, right, bottom, top, z_near, z_far);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_init_scale$MH() {
        return RuntimeHelper.requireNonNull(constants$1221.graphene_matrix_init_scale$MH,"graphene_matrix_init_scale");
    }
    /**
     * {@snippet :
     * graphene_matrix_t* graphene_matrix_init_scale(graphene_matrix_t* m, float x, float y, float z);
     * }
     */
    public static MemorySegment graphene_matrix_init_scale(MemorySegment m, float x, float y, float z) {
        var mh$ = graphene_matrix_init_scale$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(m, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_init_translate$MH() {
        return RuntimeHelper.requireNonNull(constants$1221.graphene_matrix_init_translate$MH,"graphene_matrix_init_translate");
    }
    /**
     * {@snippet :
     * graphene_matrix_t* graphene_matrix_init_translate(graphene_matrix_t* m, const graphene_point3d_t* p);
     * }
     */
    public static MemorySegment graphene_matrix_init_translate(MemorySegment m, MemorySegment p) {
        var mh$ = graphene_matrix_init_translate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(m, p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_init_rotate$MH() {
        return RuntimeHelper.requireNonNull(constants$1221.graphene_matrix_init_rotate$MH,"graphene_matrix_init_rotate");
    }
    /**
     * {@snippet :
     * graphene_matrix_t* graphene_matrix_init_rotate(graphene_matrix_t* m, float angle, const graphene_vec3_t* axis);
     * }
     */
    public static MemorySegment graphene_matrix_init_rotate(MemorySegment m, float angle, MemorySegment axis) {
        var mh$ = graphene_matrix_init_rotate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(m, angle, axis);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_init_skew$MH() {
        return RuntimeHelper.requireNonNull(constants$1221.graphene_matrix_init_skew$MH,"graphene_matrix_init_skew");
    }
    /**
     * {@snippet :
     * graphene_matrix_t* graphene_matrix_init_skew(graphene_matrix_t* m, float x_skew, float y_skew);
     * }
     */
    public static MemorySegment graphene_matrix_init_skew(MemorySegment m, float x_skew, float y_skew) {
        var mh$ = graphene_matrix_init_skew$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(m, x_skew, y_skew);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_init_from_2d$MH() {
        return RuntimeHelper.requireNonNull(constants$1222.graphene_matrix_init_from_2d$MH,"graphene_matrix_init_from_2d");
    }
    /**
     * {@snippet :
     * graphene_matrix_t* graphene_matrix_init_from_2d(graphene_matrix_t* m, double xx, double yx, double xy, double yy, double x_0, double y_0);
     * }
     */
    public static MemorySegment graphene_matrix_init_from_2d(MemorySegment m, double xx, double yx, double xy, double yy, double x_0, double y_0) {
        var mh$ = graphene_matrix_init_from_2d$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(m, xx, yx, xy, yy, x_0, y_0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_is_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$1222.graphene_matrix_is_identity$MH,"graphene_matrix_is_identity");
    }
    /**
     * {@snippet :
     * _Bool graphene_matrix_is_identity(const graphene_matrix_t* m);
     * }
     */
    public static boolean graphene_matrix_is_identity(MemorySegment m) {
        var mh$ = graphene_matrix_is_identity$MH();
        try {
            return (boolean)mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_is_2d$MH() {
        return RuntimeHelper.requireNonNull(constants$1222.graphene_matrix_is_2d$MH,"graphene_matrix_is_2d");
    }
    /**
     * {@snippet :
     * _Bool graphene_matrix_is_2d(const graphene_matrix_t* m);
     * }
     */
    public static boolean graphene_matrix_is_2d(MemorySegment m) {
        var mh$ = graphene_matrix_is_2d$MH();
        try {
            return (boolean)mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_is_backface_visible$MH() {
        return RuntimeHelper.requireNonNull(constants$1222.graphene_matrix_is_backface_visible$MH,"graphene_matrix_is_backface_visible");
    }
    /**
     * {@snippet :
     * _Bool graphene_matrix_is_backface_visible(const graphene_matrix_t* m);
     * }
     */
    public static boolean graphene_matrix_is_backface_visible(MemorySegment m) {
        var mh$ = graphene_matrix_is_backface_visible$MH();
        try {
            return (boolean)mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_is_singular$MH() {
        return RuntimeHelper.requireNonNull(constants$1222.graphene_matrix_is_singular$MH,"graphene_matrix_is_singular");
    }
    /**
     * {@snippet :
     * _Bool graphene_matrix_is_singular(const graphene_matrix_t* m);
     * }
     */
    public static boolean graphene_matrix_is_singular(MemorySegment m) {
        var mh$ = graphene_matrix_is_singular$MH();
        try {
            return (boolean)mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_to_float$MH() {
        return RuntimeHelper.requireNonNull(constants$1222.graphene_matrix_to_float$MH,"graphene_matrix_to_float");
    }
    /**
     * {@snippet :
     * void graphene_matrix_to_float(const graphene_matrix_t* m, float* v);
     * }
     */
    public static void graphene_matrix_to_float(MemorySegment m, MemorySegment v) {
        var mh$ = graphene_matrix_to_float$MH();
        try {
            mh$.invokeExact(m, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_to_2d$MH() {
        return RuntimeHelper.requireNonNull(constants$1223.graphene_matrix_to_2d$MH,"graphene_matrix_to_2d");
    }
    /**
     * {@snippet :
     * _Bool graphene_matrix_to_2d(const graphene_matrix_t* m, double* xx, double* yx, double* xy, double* yy, double* x_0, double* y_0);
     * }
     */
    public static boolean graphene_matrix_to_2d(MemorySegment m, MemorySegment xx, MemorySegment yx, MemorySegment xy, MemorySegment yy, MemorySegment x_0, MemorySegment y_0) {
        var mh$ = graphene_matrix_to_2d$MH();
        try {
            return (boolean)mh$.invokeExact(m, xx, yx, xy, yy, x_0, y_0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_get_row$MH() {
        return RuntimeHelper.requireNonNull(constants$1223.graphene_matrix_get_row$MH,"graphene_matrix_get_row");
    }
    /**
     * {@snippet :
     * void graphene_matrix_get_row(const graphene_matrix_t* m, unsigned int index_, graphene_vec4_t* res);
     * }
     */
    public static void graphene_matrix_get_row(MemorySegment m, int index_, MemorySegment res) {
        var mh$ = graphene_matrix_get_row$MH();
        try {
            mh$.invokeExact(m, index_, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_get_value$MH() {
        return RuntimeHelper.requireNonNull(constants$1223.graphene_matrix_get_value$MH,"graphene_matrix_get_value");
    }
    /**
     * {@snippet :
     * float graphene_matrix_get_value(const graphene_matrix_t* m, unsigned int row, unsigned int col);
     * }
     */
    public static float graphene_matrix_get_value(MemorySegment m, int row, int col) {
        var mh$ = graphene_matrix_get_value$MH();
        try {
            return (float)mh$.invokeExact(m, row, col);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_multiply$MH() {
        return RuntimeHelper.requireNonNull(constants$1223.graphene_matrix_multiply$MH,"graphene_matrix_multiply");
    }
    /**
     * {@snippet :
     * void graphene_matrix_multiply(const graphene_matrix_t* a, const graphene_matrix_t* b, graphene_matrix_t* res);
     * }
     */
    public static void graphene_matrix_multiply(MemorySegment a, MemorySegment b, MemorySegment res) {
        var mh$ = graphene_matrix_multiply$MH();
        try {
            mh$.invokeExact(a, b, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_determinant$MH() {
        return RuntimeHelper.requireNonNull(constants$1223.graphene_matrix_determinant$MH,"graphene_matrix_determinant");
    }
    /**
     * {@snippet :
     * float graphene_matrix_determinant(const graphene_matrix_t* m);
     * }
     */
    public static float graphene_matrix_determinant(MemorySegment m) {
        var mh$ = graphene_matrix_determinant$MH();
        try {
            return (float)mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_transform_vec4$MH() {
        return RuntimeHelper.requireNonNull(constants$1223.graphene_matrix_transform_vec4$MH,"graphene_matrix_transform_vec4");
    }
    /**
     * {@snippet :
     * void graphene_matrix_transform_vec4(const graphene_matrix_t* m, const graphene_vec4_t* v, graphene_vec4_t* res);
     * }
     */
    public static void graphene_matrix_transform_vec4(MemorySegment m, MemorySegment v, MemorySegment res) {
        var mh$ = graphene_matrix_transform_vec4$MH();
        try {
            mh$.invokeExact(m, v, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_transform_vec3$MH() {
        return RuntimeHelper.requireNonNull(constants$1224.graphene_matrix_transform_vec3$MH,"graphene_matrix_transform_vec3");
    }
    /**
     * {@snippet :
     * void graphene_matrix_transform_vec3(const graphene_matrix_t* m, const graphene_vec3_t* v, graphene_vec3_t* res);
     * }
     */
    public static void graphene_matrix_transform_vec3(MemorySegment m, MemorySegment v, MemorySegment res) {
        var mh$ = graphene_matrix_transform_vec3$MH();
        try {
            mh$.invokeExact(m, v, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_transform_point$MH() {
        return RuntimeHelper.requireNonNull(constants$1224.graphene_matrix_transform_point$MH,"graphene_matrix_transform_point");
    }
    /**
     * {@snippet :
     * void graphene_matrix_transform_point(const graphene_matrix_t* m, const graphene_point_t* p, graphene_point_t* res);
     * }
     */
    public static void graphene_matrix_transform_point(MemorySegment m, MemorySegment p, MemorySegment res) {
        var mh$ = graphene_matrix_transform_point$MH();
        try {
            mh$.invokeExact(m, p, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_transform_point3d$MH() {
        return RuntimeHelper.requireNonNull(constants$1224.graphene_matrix_transform_point3d$MH,"graphene_matrix_transform_point3d");
    }
    /**
     * {@snippet :
     * void graphene_matrix_transform_point3d(const graphene_matrix_t* m, const graphene_point3d_t* p, graphene_point3d_t* res);
     * }
     */
    public static void graphene_matrix_transform_point3d(MemorySegment m, MemorySegment p, MemorySegment res) {
        var mh$ = graphene_matrix_transform_point3d$MH();
        try {
            mh$.invokeExact(m, p, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_transform_rect$MH() {
        return RuntimeHelper.requireNonNull(constants$1224.graphene_matrix_transform_rect$MH,"graphene_matrix_transform_rect");
    }
    /**
     * {@snippet :
     * void graphene_matrix_transform_rect(const graphene_matrix_t* m, const graphene_rect_t* r, graphene_quad_t* res);
     * }
     */
    public static void graphene_matrix_transform_rect(MemorySegment m, MemorySegment r, MemorySegment res) {
        var mh$ = graphene_matrix_transform_rect$MH();
        try {
            mh$.invokeExact(m, r, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_transform_bounds$MH() {
        return RuntimeHelper.requireNonNull(constants$1224.graphene_matrix_transform_bounds$MH,"graphene_matrix_transform_bounds");
    }
    /**
     * {@snippet :
     * void graphene_matrix_transform_bounds(const graphene_matrix_t* m, const graphene_rect_t* r, graphene_rect_t* res);
     * }
     */
    public static void graphene_matrix_transform_bounds(MemorySegment m, MemorySegment r, MemorySegment res) {
        var mh$ = graphene_matrix_transform_bounds$MH();
        try {
            mh$.invokeExact(m, r, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_transform_sphere$MH() {
        return RuntimeHelper.requireNonNull(constants$1224.graphene_matrix_transform_sphere$MH,"graphene_matrix_transform_sphere");
    }
    /**
     * {@snippet :
     * void graphene_matrix_transform_sphere(const graphene_matrix_t* m, const graphene_sphere_t* s, graphene_sphere_t* res);
     * }
     */
    public static void graphene_matrix_transform_sphere(MemorySegment m, MemorySegment s, MemorySegment res) {
        var mh$ = graphene_matrix_transform_sphere$MH();
        try {
            mh$.invokeExact(m, s, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_transform_box$MH() {
        return RuntimeHelper.requireNonNull(constants$1225.graphene_matrix_transform_box$MH,"graphene_matrix_transform_box");
    }
    /**
     * {@snippet :
     * void graphene_matrix_transform_box(const graphene_matrix_t* m, const graphene_box_t* b, graphene_box_t* res);
     * }
     */
    public static void graphene_matrix_transform_box(MemorySegment m, MemorySegment b, MemorySegment res) {
        var mh$ = graphene_matrix_transform_box$MH();
        try {
            mh$.invokeExact(m, b, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_transform_ray$MH() {
        return RuntimeHelper.requireNonNull(constants$1225.graphene_matrix_transform_ray$MH,"graphene_matrix_transform_ray");
    }
    /**
     * {@snippet :
     * void graphene_matrix_transform_ray(const graphene_matrix_t* m, const graphene_ray_t* r, graphene_ray_t* res);
     * }
     */
    public static void graphene_matrix_transform_ray(MemorySegment m, MemorySegment r, MemorySegment res) {
        var mh$ = graphene_matrix_transform_ray$MH();
        try {
            mh$.invokeExact(m, r, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_project_point$MH() {
        return RuntimeHelper.requireNonNull(constants$1225.graphene_matrix_project_point$MH,"graphene_matrix_project_point");
    }
    /**
     * {@snippet :
     * void graphene_matrix_project_point(const graphene_matrix_t* m, const graphene_point_t* p, graphene_point_t* res);
     * }
     */
    public static void graphene_matrix_project_point(MemorySegment m, MemorySegment p, MemorySegment res) {
        var mh$ = graphene_matrix_project_point$MH();
        try {
            mh$.invokeExact(m, p, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_project_rect_bounds$MH() {
        return RuntimeHelper.requireNonNull(constants$1225.graphene_matrix_project_rect_bounds$MH,"graphene_matrix_project_rect_bounds");
    }
    /**
     * {@snippet :
     * void graphene_matrix_project_rect_bounds(const graphene_matrix_t* m, const graphene_rect_t* r, graphene_rect_t* res);
     * }
     */
    public static void graphene_matrix_project_rect_bounds(MemorySegment m, MemorySegment r, MemorySegment res) {
        var mh$ = graphene_matrix_project_rect_bounds$MH();
        try {
            mh$.invokeExact(m, r, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_project_rect$MH() {
        return RuntimeHelper.requireNonNull(constants$1225.graphene_matrix_project_rect$MH,"graphene_matrix_project_rect");
    }
    /**
     * {@snippet :
     * void graphene_matrix_project_rect(const graphene_matrix_t* m, const graphene_rect_t* r, graphene_quad_t* res);
     * }
     */
    public static void graphene_matrix_project_rect(MemorySegment m, MemorySegment r, MemorySegment res) {
        var mh$ = graphene_matrix_project_rect$MH();
        try {
            mh$.invokeExact(m, r, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_untransform_point$MH() {
        return RuntimeHelper.requireNonNull(constants$1225.graphene_matrix_untransform_point$MH,"graphene_matrix_untransform_point");
    }
    /**
     * {@snippet :
     * _Bool graphene_matrix_untransform_point(const graphene_matrix_t* m, const graphene_point_t* p, const graphene_rect_t* bounds, graphene_point_t* res);
     * }
     */
    public static boolean graphene_matrix_untransform_point(MemorySegment m, MemorySegment p, MemorySegment bounds, MemorySegment res) {
        var mh$ = graphene_matrix_untransform_point$MH();
        try {
            return (boolean)mh$.invokeExact(m, p, bounds, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_untransform_bounds$MH() {
        return RuntimeHelper.requireNonNull(constants$1226.graphene_matrix_untransform_bounds$MH,"graphene_matrix_untransform_bounds");
    }
    /**
     * {@snippet :
     * void graphene_matrix_untransform_bounds(const graphene_matrix_t* m, const graphene_rect_t* r, const graphene_rect_t* bounds, graphene_rect_t* res);
     * }
     */
    public static void graphene_matrix_untransform_bounds(MemorySegment m, MemorySegment r, MemorySegment bounds, MemorySegment res) {
        var mh$ = graphene_matrix_untransform_bounds$MH();
        try {
            mh$.invokeExact(m, r, bounds, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_unproject_point3d$MH() {
        return RuntimeHelper.requireNonNull(constants$1226.graphene_matrix_unproject_point3d$MH,"graphene_matrix_unproject_point3d");
    }
    /**
     * {@snippet :
     * void graphene_matrix_unproject_point3d(const graphene_matrix_t* projection, const graphene_matrix_t* modelview, const graphene_point3d_t* point, graphene_point3d_t* res);
     * }
     */
    public static void graphene_matrix_unproject_point3d(MemorySegment projection, MemorySegment modelview, MemorySegment point, MemorySegment res) {
        var mh$ = graphene_matrix_unproject_point3d$MH();
        try {
            mh$.invokeExact(projection, modelview, point, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_translate$MH() {
        return RuntimeHelper.requireNonNull(constants$1226.graphene_matrix_translate$MH,"graphene_matrix_translate");
    }
    /**
     * {@snippet :
     * void graphene_matrix_translate(graphene_matrix_t* m, const graphene_point3d_t* pos);
     * }
     */
    public static void graphene_matrix_translate(MemorySegment m, MemorySegment pos) {
        var mh$ = graphene_matrix_translate$MH();
        try {
            mh$.invokeExact(m, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_rotate$MH() {
        return RuntimeHelper.requireNonNull(constants$1226.graphene_matrix_rotate$MH,"graphene_matrix_rotate");
    }
    /**
     * {@snippet :
     * void graphene_matrix_rotate(graphene_matrix_t* m, float angle, const graphene_vec3_t* axis);
     * }
     */
    public static void graphene_matrix_rotate(MemorySegment m, float angle, MemorySegment axis) {
        var mh$ = graphene_matrix_rotate$MH();
        try {
            mh$.invokeExact(m, angle, axis);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_rotate_x$MH() {
        return RuntimeHelper.requireNonNull(constants$1226.graphene_matrix_rotate_x$MH,"graphene_matrix_rotate_x");
    }
    /**
     * {@snippet :
     * void graphene_matrix_rotate_x(graphene_matrix_t* m, float angle);
     * }
     */
    public static void graphene_matrix_rotate_x(MemorySegment m, float angle) {
        var mh$ = graphene_matrix_rotate_x$MH();
        try {
            mh$.invokeExact(m, angle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_rotate_y$MH() {
        return RuntimeHelper.requireNonNull(constants$1226.graphene_matrix_rotate_y$MH,"graphene_matrix_rotate_y");
    }
    /**
     * {@snippet :
     * void graphene_matrix_rotate_y(graphene_matrix_t* m, float angle);
     * }
     */
    public static void graphene_matrix_rotate_y(MemorySegment m, float angle) {
        var mh$ = graphene_matrix_rotate_y$MH();
        try {
            mh$.invokeExact(m, angle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_rotate_z$MH() {
        return RuntimeHelper.requireNonNull(constants$1227.graphene_matrix_rotate_z$MH,"graphene_matrix_rotate_z");
    }
    /**
     * {@snippet :
     * void graphene_matrix_rotate_z(graphene_matrix_t* m, float angle);
     * }
     */
    public static void graphene_matrix_rotate_z(MemorySegment m, float angle) {
        var mh$ = graphene_matrix_rotate_z$MH();
        try {
            mh$.invokeExact(m, angle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_rotate_quaternion$MH() {
        return RuntimeHelper.requireNonNull(constants$1227.graphene_matrix_rotate_quaternion$MH,"graphene_matrix_rotate_quaternion");
    }
    /**
     * {@snippet :
     * void graphene_matrix_rotate_quaternion(graphene_matrix_t* m, const graphene_quaternion_t* q);
     * }
     */
    public static void graphene_matrix_rotate_quaternion(MemorySegment m, MemorySegment q) {
        var mh$ = graphene_matrix_rotate_quaternion$MH();
        try {
            mh$.invokeExact(m, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_rotate_euler$MH() {
        return RuntimeHelper.requireNonNull(constants$1227.graphene_matrix_rotate_euler$MH,"graphene_matrix_rotate_euler");
    }
    /**
     * {@snippet :
     * void graphene_matrix_rotate_euler(graphene_matrix_t* m, const graphene_euler_t* e);
     * }
     */
    public static void graphene_matrix_rotate_euler(MemorySegment m, MemorySegment e) {
        var mh$ = graphene_matrix_rotate_euler$MH();
        try {
            mh$.invokeExact(m, e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_scale$MH() {
        return RuntimeHelper.requireNonNull(constants$1227.graphene_matrix_scale$MH,"graphene_matrix_scale");
    }
    /**
     * {@snippet :
     * void graphene_matrix_scale(graphene_matrix_t* m, float factor_x, float factor_y, float factor_z);
     * }
     */
    public static void graphene_matrix_scale(MemorySegment m, float factor_x, float factor_y, float factor_z) {
        var mh$ = graphene_matrix_scale$MH();
        try {
            mh$.invokeExact(m, factor_x, factor_y, factor_z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_skew_xy$MH() {
        return RuntimeHelper.requireNonNull(constants$1227.graphene_matrix_skew_xy$MH,"graphene_matrix_skew_xy");
    }
    /**
     * {@snippet :
     * void graphene_matrix_skew_xy(graphene_matrix_t* m, float factor);
     * }
     */
    public static void graphene_matrix_skew_xy(MemorySegment m, float factor) {
        var mh$ = graphene_matrix_skew_xy$MH();
        try {
            mh$.invokeExact(m, factor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_skew_xz$MH() {
        return RuntimeHelper.requireNonNull(constants$1227.graphene_matrix_skew_xz$MH,"graphene_matrix_skew_xz");
    }
    /**
     * {@snippet :
     * void graphene_matrix_skew_xz(graphene_matrix_t* m, float factor);
     * }
     */
    public static void graphene_matrix_skew_xz(MemorySegment m, float factor) {
        var mh$ = graphene_matrix_skew_xz$MH();
        try {
            mh$.invokeExact(m, factor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_skew_yz$MH() {
        return RuntimeHelper.requireNonNull(constants$1228.graphene_matrix_skew_yz$MH,"graphene_matrix_skew_yz");
    }
    /**
     * {@snippet :
     * void graphene_matrix_skew_yz(graphene_matrix_t* m, float factor);
     * }
     */
    public static void graphene_matrix_skew_yz(MemorySegment m, float factor) {
        var mh$ = graphene_matrix_skew_yz$MH();
        try {
            mh$.invokeExact(m, factor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_transpose$MH() {
        return RuntimeHelper.requireNonNull(constants$1228.graphene_matrix_transpose$MH,"graphene_matrix_transpose");
    }
    /**
     * {@snippet :
     * void graphene_matrix_transpose(const graphene_matrix_t* m, graphene_matrix_t* res);
     * }
     */
    public static void graphene_matrix_transpose(MemorySegment m, MemorySegment res) {
        var mh$ = graphene_matrix_transpose$MH();
        try {
            mh$.invokeExact(m, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_inverse$MH() {
        return RuntimeHelper.requireNonNull(constants$1228.graphene_matrix_inverse$MH,"graphene_matrix_inverse");
    }
    /**
     * {@snippet :
     * _Bool graphene_matrix_inverse(const graphene_matrix_t* m, graphene_matrix_t* res);
     * }
     */
    public static boolean graphene_matrix_inverse(MemorySegment m, MemorySegment res) {
        var mh$ = graphene_matrix_inverse$MH();
        try {
            return (boolean)mh$.invokeExact(m, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_perspective$MH() {
        return RuntimeHelper.requireNonNull(constants$1228.graphene_matrix_perspective$MH,"graphene_matrix_perspective");
    }
    /**
     * {@snippet :
     * void graphene_matrix_perspective(const graphene_matrix_t* m, float depth, graphene_matrix_t* res);
     * }
     */
    public static void graphene_matrix_perspective(MemorySegment m, float depth, MemorySegment res) {
        var mh$ = graphene_matrix_perspective$MH();
        try {
            mh$.invokeExact(m, depth, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_normalize$MH() {
        return RuntimeHelper.requireNonNull(constants$1228.graphene_matrix_normalize$MH,"graphene_matrix_normalize");
    }
    /**
     * {@snippet :
     * void graphene_matrix_normalize(const graphene_matrix_t* m, graphene_matrix_t* res);
     * }
     */
    public static void graphene_matrix_normalize(MemorySegment m, MemorySegment res) {
        var mh$ = graphene_matrix_normalize$MH();
        try {
            mh$.invokeExact(m, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_get_x_translation$MH() {
        return RuntimeHelper.requireNonNull(constants$1228.graphene_matrix_get_x_translation$MH,"graphene_matrix_get_x_translation");
    }
    /**
     * {@snippet :
     * float graphene_matrix_get_x_translation(const graphene_matrix_t* m);
     * }
     */
    public static float graphene_matrix_get_x_translation(MemorySegment m) {
        var mh$ = graphene_matrix_get_x_translation$MH();
        try {
            return (float)mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_get_y_translation$MH() {
        return RuntimeHelper.requireNonNull(constants$1229.graphene_matrix_get_y_translation$MH,"graphene_matrix_get_y_translation");
    }
    /**
     * {@snippet :
     * float graphene_matrix_get_y_translation(const graphene_matrix_t* m);
     * }
     */
    public static float graphene_matrix_get_y_translation(MemorySegment m) {
        var mh$ = graphene_matrix_get_y_translation$MH();
        try {
            return (float)mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_get_z_translation$MH() {
        return RuntimeHelper.requireNonNull(constants$1229.graphene_matrix_get_z_translation$MH,"graphene_matrix_get_z_translation");
    }
    /**
     * {@snippet :
     * float graphene_matrix_get_z_translation(const graphene_matrix_t* m);
     * }
     */
    public static float graphene_matrix_get_z_translation(MemorySegment m) {
        var mh$ = graphene_matrix_get_z_translation$MH();
        try {
            return (float)mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_get_x_scale$MH() {
        return RuntimeHelper.requireNonNull(constants$1229.graphene_matrix_get_x_scale$MH,"graphene_matrix_get_x_scale");
    }
    /**
     * {@snippet :
     * float graphene_matrix_get_x_scale(const graphene_matrix_t* m);
     * }
     */
    public static float graphene_matrix_get_x_scale(MemorySegment m) {
        var mh$ = graphene_matrix_get_x_scale$MH();
        try {
            return (float)mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_get_y_scale$MH() {
        return RuntimeHelper.requireNonNull(constants$1229.graphene_matrix_get_y_scale$MH,"graphene_matrix_get_y_scale");
    }
    /**
     * {@snippet :
     * float graphene_matrix_get_y_scale(const graphene_matrix_t* m);
     * }
     */
    public static float graphene_matrix_get_y_scale(MemorySegment m) {
        var mh$ = graphene_matrix_get_y_scale$MH();
        try {
            return (float)mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_get_z_scale$MH() {
        return RuntimeHelper.requireNonNull(constants$1229.graphene_matrix_get_z_scale$MH,"graphene_matrix_get_z_scale");
    }
    /**
     * {@snippet :
     * float graphene_matrix_get_z_scale(const graphene_matrix_t* m);
     * }
     */
    public static float graphene_matrix_get_z_scale(MemorySegment m) {
        var mh$ = graphene_matrix_get_z_scale$MH();
        try {
            return (float)mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_interpolate$MH() {
        return RuntimeHelper.requireNonNull(constants$1229.graphene_matrix_interpolate$MH,"graphene_matrix_interpolate");
    }
    /**
     * {@snippet :
     * void graphene_matrix_interpolate(const graphene_matrix_t* a, const graphene_matrix_t* b, double factor, graphene_matrix_t* res);
     * }
     */
    public static void graphene_matrix_interpolate(MemorySegment a, MemorySegment b, double factor, MemorySegment res) {
        var mh$ = graphene_matrix_interpolate$MH();
        try {
            mh$.invokeExact(a, b, factor, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_near$MH() {
        return RuntimeHelper.requireNonNull(constants$1230.graphene_matrix_near$MH,"graphene_matrix_near");
    }
    /**
     * {@snippet :
     * _Bool graphene_matrix_near(const graphene_matrix_t* a, const graphene_matrix_t* b, float epsilon);
     * }
     */
    public static boolean graphene_matrix_near(MemorySegment a, MemorySegment b, float epsilon) {
        var mh$ = graphene_matrix_near$MH();
        try {
            return (boolean)mh$.invokeExact(a, b, epsilon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_equal$MH() {
        return RuntimeHelper.requireNonNull(constants$1230.graphene_matrix_equal$MH,"graphene_matrix_equal");
    }
    /**
     * {@snippet :
     * _Bool graphene_matrix_equal(const graphene_matrix_t* a, const graphene_matrix_t* b);
     * }
     */
    public static boolean graphene_matrix_equal(MemorySegment a, MemorySegment b) {
        var mh$ = graphene_matrix_equal$MH();
        try {
            return (boolean)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_equal_fast$MH() {
        return RuntimeHelper.requireNonNull(constants$1230.graphene_matrix_equal_fast$MH,"graphene_matrix_equal_fast");
    }
    /**
     * {@snippet :
     * _Bool graphene_matrix_equal_fast(const graphene_matrix_t* a, const graphene_matrix_t* b);
     * }
     */
    public static boolean graphene_matrix_equal_fast(MemorySegment a, MemorySegment b) {
        var mh$ = graphene_matrix_equal_fast$MH();
        try {
            return (boolean)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_print$MH() {
        return RuntimeHelper.requireNonNull(constants$1230.graphene_matrix_print$MH,"graphene_matrix_print");
    }
    /**
     * {@snippet :
     * void graphene_matrix_print(const graphene_matrix_t* m);
     * }
     */
    public static void graphene_matrix_print(MemorySegment m) {
        var mh$ = graphene_matrix_print$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_matrix_decompose$MH() {
        return RuntimeHelper.requireNonNull(constants$1230.graphene_matrix_decompose$MH,"graphene_matrix_decompose");
    }
    /**
     * {@snippet :
     * _Bool graphene_matrix_decompose(const graphene_matrix_t* m, graphene_vec3_t* translate, graphene_vec3_t* scale, graphene_quaternion_t* rotate, graphene_vec3_t* shear, graphene_vec4_t* perspective);
     * }
     */
    public static boolean graphene_matrix_decompose(MemorySegment m, MemorySegment translate, MemorySegment scale, MemorySegment rotate, MemorySegment shear, MemorySegment perspective) {
        var mh$ = graphene_matrix_decompose$MH();
        try {
            return (boolean)mh$.invokeExact(m, translate, scale, rotate, shear, perspective);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_point_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$1230.graphene_point_alloc$MH,"graphene_point_alloc");
    }
    /**
     * {@snippet :
     * graphene_point_t* graphene_point_alloc();
     * }
     */
    public static MemorySegment graphene_point_alloc() {
        var mh$ = graphene_point_alloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_point_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1231.graphene_point_free$MH,"graphene_point_free");
    }
    /**
     * {@snippet :
     * void graphene_point_free(graphene_point_t* p);
     * }
     */
    public static void graphene_point_free(MemorySegment p) {
        var mh$ = graphene_point_free$MH();
        try {
            mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_point_init$MH() {
        return RuntimeHelper.requireNonNull(constants$1231.graphene_point_init$MH,"graphene_point_init");
    }
    /**
     * {@snippet :
     * graphene_point_t* graphene_point_init(graphene_point_t* p, float x, float y);
     * }
     */
    public static MemorySegment graphene_point_init(MemorySegment p, float x, float y) {
        var mh$ = graphene_point_init$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(p, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_point_init_from_point$MH() {
        return RuntimeHelper.requireNonNull(constants$1231.graphene_point_init_from_point$MH,"graphene_point_init_from_point");
    }
    /**
     * {@snippet :
     * graphene_point_t* graphene_point_init_from_point(graphene_point_t* p, const graphene_point_t* src);
     * }
     */
    public static MemorySegment graphene_point_init_from_point(MemorySegment p, MemorySegment src) {
        var mh$ = graphene_point_init_from_point$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(p, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_point_init_from_vec2$MH() {
        return RuntimeHelper.requireNonNull(constants$1231.graphene_point_init_from_vec2$MH,"graphene_point_init_from_vec2");
    }
    /**
     * {@snippet :
     * graphene_point_t* graphene_point_init_from_vec2(graphene_point_t* p, const graphene_vec2_t* src);
     * }
     */
    public static MemorySegment graphene_point_init_from_vec2(MemorySegment p, MemorySegment src) {
        var mh$ = graphene_point_init_from_vec2$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(p, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_point_equal$MH() {
        return RuntimeHelper.requireNonNull(constants$1231.graphene_point_equal$MH,"graphene_point_equal");
    }
    /**
     * {@snippet :
     * _Bool graphene_point_equal(const graphene_point_t* a, const graphene_point_t* b);
     * }
     */
    public static boolean graphene_point_equal(MemorySegment a, MemorySegment b) {
        var mh$ = graphene_point_equal$MH();
        try {
            return (boolean)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_point_distance$MH() {
        return RuntimeHelper.requireNonNull(constants$1231.graphene_point_distance$MH,"graphene_point_distance");
    }
    /**
     * {@snippet :
     * float graphene_point_distance(const graphene_point_t* a, const graphene_point_t* b, float* d_x, float* d_y);
     * }
     */
    public static float graphene_point_distance(MemorySegment a, MemorySegment b, MemorySegment d_x, MemorySegment d_y) {
        var mh$ = graphene_point_distance$MH();
        try {
            return (float)mh$.invokeExact(a, b, d_x, d_y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_point_near$MH() {
        return RuntimeHelper.requireNonNull(constants$1232.graphene_point_near$MH,"graphene_point_near");
    }
    /**
     * {@snippet :
     * _Bool graphene_point_near(const graphene_point_t* a, const graphene_point_t* b, float epsilon);
     * }
     */
    public static boolean graphene_point_near(MemorySegment a, MemorySegment b, float epsilon) {
        var mh$ = graphene_point_near$MH();
        try {
            return (boolean)mh$.invokeExact(a, b, epsilon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_point_interpolate$MH() {
        return RuntimeHelper.requireNonNull(constants$1232.graphene_point_interpolate$MH,"graphene_point_interpolate");
    }
    /**
     * {@snippet :
     * void graphene_point_interpolate(const graphene_point_t* a, const graphene_point_t* b, double factor, graphene_point_t* res);
     * }
     */
    public static void graphene_point_interpolate(MemorySegment a, MemorySegment b, double factor, MemorySegment res) {
        var mh$ = graphene_point_interpolate$MH();
        try {
            mh$.invokeExact(a, b, factor, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_point_to_vec2$MH() {
        return RuntimeHelper.requireNonNull(constants$1232.graphene_point_to_vec2$MH,"graphene_point_to_vec2");
    }
    /**
     * {@snippet :
     * void graphene_point_to_vec2(const graphene_point_t* p, graphene_vec2_t* v);
     * }
     */
    public static void graphene_point_to_vec2(MemorySegment p, MemorySegment v) {
        var mh$ = graphene_point_to_vec2$MH();
        try {
            mh$.invokeExact(p, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_point_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$1232.graphene_point_zero$MH,"graphene_point_zero");
    }
    /**
     * {@snippet :
     * const graphene_point_t* graphene_point_zero();
     * }
     */
    public static MemorySegment graphene_point_zero() {
        var mh$ = graphene_point_zero$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_size_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$1232.graphene_size_alloc$MH,"graphene_size_alloc");
    }
    /**
     * {@snippet :
     * graphene_size_t* graphene_size_alloc();
     * }
     */
    public static MemorySegment graphene_size_alloc() {
        var mh$ = graphene_size_alloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_size_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1232.graphene_size_free$MH,"graphene_size_free");
    }
    /**
     * {@snippet :
     * void graphene_size_free(graphene_size_t* s);
     * }
     */
    public static void graphene_size_free(MemorySegment s) {
        var mh$ = graphene_size_free$MH();
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_size_init$MH() {
        return RuntimeHelper.requireNonNull(constants$1233.graphene_size_init$MH,"graphene_size_init");
    }
    /**
     * {@snippet :
     * graphene_size_t* graphene_size_init(graphene_size_t* s, float width, float height);
     * }
     */
    public static MemorySegment graphene_size_init(MemorySegment s, float width, float height) {
        var mh$ = graphene_size_init$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(s, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_size_init_from_size$MH() {
        return RuntimeHelper.requireNonNull(constants$1233.graphene_size_init_from_size$MH,"graphene_size_init_from_size");
    }
    /**
     * {@snippet :
     * graphene_size_t* graphene_size_init_from_size(graphene_size_t* s, const graphene_size_t* src);
     * }
     */
    public static MemorySegment graphene_size_init_from_size(MemorySegment s, MemorySegment src) {
        var mh$ = graphene_size_init_from_size$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(s, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_size_equal$MH() {
        return RuntimeHelper.requireNonNull(constants$1233.graphene_size_equal$MH,"graphene_size_equal");
    }
    /**
     * {@snippet :
     * _Bool graphene_size_equal(const graphene_size_t* a, const graphene_size_t* b);
     * }
     */
    public static boolean graphene_size_equal(MemorySegment a, MemorySegment b) {
        var mh$ = graphene_size_equal$MH();
        try {
            return (boolean)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_size_scale$MH() {
        return RuntimeHelper.requireNonNull(constants$1233.graphene_size_scale$MH,"graphene_size_scale");
    }
    /**
     * {@snippet :
     * void graphene_size_scale(const graphene_size_t* s, float factor, graphene_size_t* res);
     * }
     */
    public static void graphene_size_scale(MemorySegment s, float factor, MemorySegment res) {
        var mh$ = graphene_size_scale$MH();
        try {
            mh$.invokeExact(s, factor, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_size_interpolate$MH() {
        return RuntimeHelper.requireNonNull(constants$1233.graphene_size_interpolate$MH,"graphene_size_interpolate");
    }
    /**
     * {@snippet :
     * void graphene_size_interpolate(const graphene_size_t* a, const graphene_size_t* b, double factor, graphene_size_t* res);
     * }
     */
    public static void graphene_size_interpolate(MemorySegment a, MemorySegment b, double factor, MemorySegment res) {
        var mh$ = graphene_size_interpolate$MH();
        try {
            mh$.invokeExact(a, b, factor, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_size_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$1233.graphene_size_zero$MH,"graphene_size_zero");
    }
    /**
     * {@snippet :
     * const graphene_size_t* graphene_size_zero();
     * }
     */
    public static MemorySegment graphene_size_zero() {
        var mh$ = graphene_size_zero$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_rect_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$1234.graphene_rect_alloc$MH,"graphene_rect_alloc");
    }
    /**
     * {@snippet :
     * graphene_rect_t* graphene_rect_alloc();
     * }
     */
    public static MemorySegment graphene_rect_alloc() {
        var mh$ = graphene_rect_alloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_rect_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1234.graphene_rect_free$MH,"graphene_rect_free");
    }
    /**
     * {@snippet :
     * void graphene_rect_free(graphene_rect_t* r);
     * }
     */
    public static void graphene_rect_free(MemorySegment r) {
        var mh$ = graphene_rect_free$MH();
        try {
            mh$.invokeExact(r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_rect_init$MH() {
        return RuntimeHelper.requireNonNull(constants$1234.graphene_rect_init$MH,"graphene_rect_init");
    }
    /**
     * {@snippet :
     * graphene_rect_t* graphene_rect_init(graphene_rect_t* r, float x, float y, float width, float height);
     * }
     */
    public static MemorySegment graphene_rect_init(MemorySegment r, float x, float y, float width, float height) {
        var mh$ = graphene_rect_init$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(r, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_rect_init_from_rect$MH() {
        return RuntimeHelper.requireNonNull(constants$1234.graphene_rect_init_from_rect$MH,"graphene_rect_init_from_rect");
    }
    /**
     * {@snippet :
     * graphene_rect_t* graphene_rect_init_from_rect(graphene_rect_t* r, const graphene_rect_t* src);
     * }
     */
    public static MemorySegment graphene_rect_init_from_rect(MemorySegment r, MemorySegment src) {
        var mh$ = graphene_rect_init_from_rect$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(r, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_rect_equal$MH() {
        return RuntimeHelper.requireNonNull(constants$1234.graphene_rect_equal$MH,"graphene_rect_equal");
    }
    /**
     * {@snippet :
     * _Bool graphene_rect_equal(const graphene_rect_t* a, const graphene_rect_t* b);
     * }
     */
    public static boolean graphene_rect_equal(MemorySegment a, MemorySegment b) {
        var mh$ = graphene_rect_equal$MH();
        try {
            return (boolean)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_rect_normalize$MH() {
        return RuntimeHelper.requireNonNull(constants$1234.graphene_rect_normalize$MH,"graphene_rect_normalize");
    }
    /**
     * {@snippet :
     * graphene_rect_t* graphene_rect_normalize(graphene_rect_t* r);
     * }
     */
    public static MemorySegment graphene_rect_normalize(MemorySegment r) {
        var mh$ = graphene_rect_normalize$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_rect_normalize_r$MH() {
        return RuntimeHelper.requireNonNull(constants$1235.graphene_rect_normalize_r$MH,"graphene_rect_normalize_r");
    }
    /**
     * {@snippet :
     * void graphene_rect_normalize_r(const graphene_rect_t* r, graphene_rect_t* res);
     * }
     */
    public static void graphene_rect_normalize_r(MemorySegment r, MemorySegment res) {
        var mh$ = graphene_rect_normalize_r$MH();
        try {
            mh$.invokeExact(r, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_rect_get_center$MH() {
        return RuntimeHelper.requireNonNull(constants$1235.graphene_rect_get_center$MH,"graphene_rect_get_center");
    }
    /**
     * {@snippet :
     * void graphene_rect_get_center(const graphene_rect_t* r, graphene_point_t* p);
     * }
     */
    public static void graphene_rect_get_center(MemorySegment r, MemorySegment p) {
        var mh$ = graphene_rect_get_center$MH();
        try {
            mh$.invokeExact(r, p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_rect_get_top_left$MH() {
        return RuntimeHelper.requireNonNull(constants$1235.graphene_rect_get_top_left$MH,"graphene_rect_get_top_left");
    }
    /**
     * {@snippet :
     * void graphene_rect_get_top_left(const graphene_rect_t* r, graphene_point_t* p);
     * }
     */
    public static void graphene_rect_get_top_left(MemorySegment r, MemorySegment p) {
        var mh$ = graphene_rect_get_top_left$MH();
        try {
            mh$.invokeExact(r, p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_rect_get_top_right$MH() {
        return RuntimeHelper.requireNonNull(constants$1235.graphene_rect_get_top_right$MH,"graphene_rect_get_top_right");
    }
    /**
     * {@snippet :
     * void graphene_rect_get_top_right(const graphene_rect_t* r, graphene_point_t* p);
     * }
     */
    public static void graphene_rect_get_top_right(MemorySegment r, MemorySegment p) {
        var mh$ = graphene_rect_get_top_right$MH();
        try {
            mh$.invokeExact(r, p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_rect_get_bottom_right$MH() {
        return RuntimeHelper.requireNonNull(constants$1235.graphene_rect_get_bottom_right$MH,"graphene_rect_get_bottom_right");
    }
    /**
     * {@snippet :
     * void graphene_rect_get_bottom_right(const graphene_rect_t* r, graphene_point_t* p);
     * }
     */
    public static void graphene_rect_get_bottom_right(MemorySegment r, MemorySegment p) {
        var mh$ = graphene_rect_get_bottom_right$MH();
        try {
            mh$.invokeExact(r, p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_rect_get_bottom_left$MH() {
        return RuntimeHelper.requireNonNull(constants$1235.graphene_rect_get_bottom_left$MH,"graphene_rect_get_bottom_left");
    }
    /**
     * {@snippet :
     * void graphene_rect_get_bottom_left(const graphene_rect_t* r, graphene_point_t* p);
     * }
     */
    public static void graphene_rect_get_bottom_left(MemorySegment r, MemorySegment p) {
        var mh$ = graphene_rect_get_bottom_left$MH();
        try {
            mh$.invokeExact(r, p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_rect_get_vertices$MH() {
        return RuntimeHelper.requireNonNull(constants$1236.graphene_rect_get_vertices$MH,"graphene_rect_get_vertices");
    }
    /**
     * {@snippet :
     * void graphene_rect_get_vertices(const graphene_rect_t* r, graphene_vec2_t vertices[]);
     * }
     */
    public static void graphene_rect_get_vertices(MemorySegment r, MemorySegment vertices) {
        var mh$ = graphene_rect_get_vertices$MH();
        try {
            mh$.invokeExact(r, vertices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_rect_get_x$MH() {
        return RuntimeHelper.requireNonNull(constants$1236.graphene_rect_get_x$MH,"graphene_rect_get_x");
    }
    /**
     * {@snippet :
     * float graphene_rect_get_x(const graphene_rect_t* r);
     * }
     */
    public static float graphene_rect_get_x(MemorySegment r) {
        var mh$ = graphene_rect_get_x$MH();
        try {
            return (float)mh$.invokeExact(r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_rect_get_y$MH() {
        return RuntimeHelper.requireNonNull(constants$1236.graphene_rect_get_y$MH,"graphene_rect_get_y");
    }
    /**
     * {@snippet :
     * float graphene_rect_get_y(const graphene_rect_t* r);
     * }
     */
    public static float graphene_rect_get_y(MemorySegment r) {
        var mh$ = graphene_rect_get_y$MH();
        try {
            return (float)mh$.invokeExact(r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_rect_get_width$MH() {
        return RuntimeHelper.requireNonNull(constants$1236.graphene_rect_get_width$MH,"graphene_rect_get_width");
    }
    /**
     * {@snippet :
     * float graphene_rect_get_width(const graphene_rect_t* r);
     * }
     */
    public static float graphene_rect_get_width(MemorySegment r) {
        var mh$ = graphene_rect_get_width$MH();
        try {
            return (float)mh$.invokeExact(r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_rect_get_height$MH() {
        return RuntimeHelper.requireNonNull(constants$1236.graphene_rect_get_height$MH,"graphene_rect_get_height");
    }
    /**
     * {@snippet :
     * float graphene_rect_get_height(const graphene_rect_t* r);
     * }
     */
    public static float graphene_rect_get_height(MemorySegment r) {
        var mh$ = graphene_rect_get_height$MH();
        try {
            return (float)mh$.invokeExact(r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_rect_get_area$MH() {
        return RuntimeHelper.requireNonNull(constants$1236.graphene_rect_get_area$MH,"graphene_rect_get_area");
    }
    /**
     * {@snippet :
     * float graphene_rect_get_area(const graphene_rect_t* r);
     * }
     */
    public static float graphene_rect_get_area(MemorySegment r) {
        var mh$ = graphene_rect_get_area$MH();
        try {
            return (float)mh$.invokeExact(r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_rect_union$MH() {
        return RuntimeHelper.requireNonNull(constants$1237.graphene_rect_union$MH,"graphene_rect_union");
    }
    /**
     * {@snippet :
     * void graphene_rect_union(const graphene_rect_t* a, const graphene_rect_t* b, graphene_rect_t* res);
     * }
     */
    public static void graphene_rect_union(MemorySegment a, MemorySegment b, MemorySegment res) {
        var mh$ = graphene_rect_union$MH();
        try {
            mh$.invokeExact(a, b, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_rect_intersection$MH() {
        return RuntimeHelper.requireNonNull(constants$1237.graphene_rect_intersection$MH,"graphene_rect_intersection");
    }
    /**
     * {@snippet :
     * _Bool graphene_rect_intersection(const graphene_rect_t* a, const graphene_rect_t* b, graphene_rect_t* res);
     * }
     */
    public static boolean graphene_rect_intersection(MemorySegment a, MemorySegment b, MemorySegment res) {
        var mh$ = graphene_rect_intersection$MH();
        try {
            return (boolean)mh$.invokeExact(a, b, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_rect_contains_point$MH() {
        return RuntimeHelper.requireNonNull(constants$1237.graphene_rect_contains_point$MH,"graphene_rect_contains_point");
    }
    /**
     * {@snippet :
     * _Bool graphene_rect_contains_point(const graphene_rect_t* r, const graphene_point_t* p);
     * }
     */
    public static boolean graphene_rect_contains_point(MemorySegment r, MemorySegment p) {
        var mh$ = graphene_rect_contains_point$MH();
        try {
            return (boolean)mh$.invokeExact(r, p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_rect_contains_rect$MH() {
        return RuntimeHelper.requireNonNull(constants$1237.graphene_rect_contains_rect$MH,"graphene_rect_contains_rect");
    }
    /**
     * {@snippet :
     * _Bool graphene_rect_contains_rect(const graphene_rect_t* a, const graphene_rect_t* b);
     * }
     */
    public static boolean graphene_rect_contains_rect(MemorySegment a, MemorySegment b) {
        var mh$ = graphene_rect_contains_rect$MH();
        try {
            return (boolean)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_rect_offset$MH() {
        return RuntimeHelper.requireNonNull(constants$1237.graphene_rect_offset$MH,"graphene_rect_offset");
    }
    /**
     * {@snippet :
     * graphene_rect_t* graphene_rect_offset(graphene_rect_t* r, float d_x, float d_y);
     * }
     */
    public static MemorySegment graphene_rect_offset(MemorySegment r, float d_x, float d_y) {
        var mh$ = graphene_rect_offset$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(r, d_x, d_y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_rect_offset_r$MH() {
        return RuntimeHelper.requireNonNull(constants$1237.graphene_rect_offset_r$MH,"graphene_rect_offset_r");
    }
    /**
     * {@snippet :
     * void graphene_rect_offset_r(const graphene_rect_t* r, float d_x, float d_y, graphene_rect_t* res);
     * }
     */
    public static void graphene_rect_offset_r(MemorySegment r, float d_x, float d_y, MemorySegment res) {
        var mh$ = graphene_rect_offset_r$MH();
        try {
            mh$.invokeExact(r, d_x, d_y, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_rect_inset$MH() {
        return RuntimeHelper.requireNonNull(constants$1238.graphene_rect_inset$MH,"graphene_rect_inset");
    }
    /**
     * {@snippet :
     * graphene_rect_t* graphene_rect_inset(graphene_rect_t* r, float d_x, float d_y);
     * }
     */
    public static MemorySegment graphene_rect_inset(MemorySegment r, float d_x, float d_y) {
        var mh$ = graphene_rect_inset$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(r, d_x, d_y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_rect_inset_r$MH() {
        return RuntimeHelper.requireNonNull(constants$1238.graphene_rect_inset_r$MH,"graphene_rect_inset_r");
    }
    /**
     * {@snippet :
     * void graphene_rect_inset_r(const graphene_rect_t* r, float d_x, float d_y, graphene_rect_t* res);
     * }
     */
    public static void graphene_rect_inset_r(MemorySegment r, float d_x, float d_y, MemorySegment res) {
        var mh$ = graphene_rect_inset_r$MH();
        try {
            mh$.invokeExact(r, d_x, d_y, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_rect_round_to_pixel$MH() {
        return RuntimeHelper.requireNonNull(constants$1238.graphene_rect_round_to_pixel$MH,"graphene_rect_round_to_pixel");
    }
    /**
     * {@snippet :
     * graphene_rect_t* graphene_rect_round_to_pixel(graphene_rect_t* r);
     * }
     */
    public static MemorySegment graphene_rect_round_to_pixel(MemorySegment r) {
        var mh$ = graphene_rect_round_to_pixel$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_rect_round$MH() {
        return RuntimeHelper.requireNonNull(constants$1238.graphene_rect_round$MH,"graphene_rect_round");
    }
    /**
     * {@snippet :
     * void graphene_rect_round(const graphene_rect_t* r, graphene_rect_t* res);
     * }
     */
    public static void graphene_rect_round(MemorySegment r, MemorySegment res) {
        var mh$ = graphene_rect_round$MH();
        try {
            mh$.invokeExact(r, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_rect_round_extents$MH() {
        return RuntimeHelper.requireNonNull(constants$1238.graphene_rect_round_extents$MH,"graphene_rect_round_extents");
    }
    /**
     * {@snippet :
     * void graphene_rect_round_extents(const graphene_rect_t* r, graphene_rect_t* res);
     * }
     */
    public static void graphene_rect_round_extents(MemorySegment r, MemorySegment res) {
        var mh$ = graphene_rect_round_extents$MH();
        try {
            mh$.invokeExact(r, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_rect_interpolate$MH() {
        return RuntimeHelper.requireNonNull(constants$1238.graphene_rect_interpolate$MH,"graphene_rect_interpolate");
    }
    /**
     * {@snippet :
     * void graphene_rect_interpolate(const graphene_rect_t* a, const graphene_rect_t* b, double factor, graphene_rect_t* res);
     * }
     */
    public static void graphene_rect_interpolate(MemorySegment a, MemorySegment b, double factor, MemorySegment res) {
        var mh$ = graphene_rect_interpolate$MH();
        try {
            mh$.invokeExact(a, b, factor, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_rect_expand$MH() {
        return RuntimeHelper.requireNonNull(constants$1239.graphene_rect_expand$MH,"graphene_rect_expand");
    }
    /**
     * {@snippet :
     * void graphene_rect_expand(const graphene_rect_t* r, const graphene_point_t* p, graphene_rect_t* res);
     * }
     */
    public static void graphene_rect_expand(MemorySegment r, MemorySegment p, MemorySegment res) {
        var mh$ = graphene_rect_expand$MH();
        try {
            mh$.invokeExact(r, p, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_rect_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$1239.graphene_rect_zero$MH,"graphene_rect_zero");
    }
    /**
     * {@snippet :
     * const graphene_rect_t* graphene_rect_zero();
     * }
     */
    public static MemorySegment graphene_rect_zero() {
        var mh$ = graphene_rect_zero$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_rect_scale$MH() {
        return RuntimeHelper.requireNonNull(constants$1239.graphene_rect_scale$MH,"graphene_rect_scale");
    }
    /**
     * {@snippet :
     * void graphene_rect_scale(const graphene_rect_t* r, float s_h, float s_v, graphene_rect_t* res);
     * }
     */
    public static void graphene_rect_scale(MemorySegment r, float s_h, float s_v, MemorySegment res) {
        var mh$ = graphene_rect_scale$MH();
        try {
            mh$.invokeExact(r, s_h, s_v, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_point3d_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$1239.graphene_point3d_alloc$MH,"graphene_point3d_alloc");
    }
    /**
     * {@snippet :
     * graphene_point3d_t* graphene_point3d_alloc();
     * }
     */
    public static MemorySegment graphene_point3d_alloc() {
        var mh$ = graphene_point3d_alloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_point3d_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1239.graphene_point3d_free$MH,"graphene_point3d_free");
    }
    /**
     * {@snippet :
     * void graphene_point3d_free(graphene_point3d_t* p);
     * }
     */
    public static void graphene_point3d_free(MemorySegment p) {
        var mh$ = graphene_point3d_free$MH();
        try {
            mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_point3d_init$MH() {
        return RuntimeHelper.requireNonNull(constants$1239.graphene_point3d_init$MH,"graphene_point3d_init");
    }
    /**
     * {@snippet :
     * graphene_point3d_t* graphene_point3d_init(graphene_point3d_t* p, float x, float y, float z);
     * }
     */
    public static MemorySegment graphene_point3d_init(MemorySegment p, float x, float y, float z) {
        var mh$ = graphene_point3d_init$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(p, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_point3d_init_from_point$MH() {
        return RuntimeHelper.requireNonNull(constants$1240.graphene_point3d_init_from_point$MH,"graphene_point3d_init_from_point");
    }
    /**
     * {@snippet :
     * graphene_point3d_t* graphene_point3d_init_from_point(graphene_point3d_t* p, const graphene_point3d_t* src);
     * }
     */
    public static MemorySegment graphene_point3d_init_from_point(MemorySegment p, MemorySegment src) {
        var mh$ = graphene_point3d_init_from_point$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(p, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_point3d_init_from_vec3$MH() {
        return RuntimeHelper.requireNonNull(constants$1240.graphene_point3d_init_from_vec3$MH,"graphene_point3d_init_from_vec3");
    }
    /**
     * {@snippet :
     * graphene_point3d_t* graphene_point3d_init_from_vec3(graphene_point3d_t* p, const graphene_vec3_t* v);
     * }
     */
    public static MemorySegment graphene_point3d_init_from_vec3(MemorySegment p, MemorySegment v) {
        var mh$ = graphene_point3d_init_from_vec3$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(p, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_point3d_to_vec3$MH() {
        return RuntimeHelper.requireNonNull(constants$1240.graphene_point3d_to_vec3$MH,"graphene_point3d_to_vec3");
    }
    /**
     * {@snippet :
     * void graphene_point3d_to_vec3(const graphene_point3d_t* p, graphene_vec3_t* v);
     * }
     */
    public static void graphene_point3d_to_vec3(MemorySegment p, MemorySegment v) {
        var mh$ = graphene_point3d_to_vec3$MH();
        try {
            mh$.invokeExact(p, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_point3d_equal$MH() {
        return RuntimeHelper.requireNonNull(constants$1240.graphene_point3d_equal$MH,"graphene_point3d_equal");
    }
    /**
     * {@snippet :
     * _Bool graphene_point3d_equal(const graphene_point3d_t* a, const graphene_point3d_t* b);
     * }
     */
    public static boolean graphene_point3d_equal(MemorySegment a, MemorySegment b) {
        var mh$ = graphene_point3d_equal$MH();
        try {
            return (boolean)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_point3d_near$MH() {
        return RuntimeHelper.requireNonNull(constants$1240.graphene_point3d_near$MH,"graphene_point3d_near");
    }
    /**
     * {@snippet :
     * _Bool graphene_point3d_near(const graphene_point3d_t* a, const graphene_point3d_t* b, float epsilon);
     * }
     */
    public static boolean graphene_point3d_near(MemorySegment a, MemorySegment b, float epsilon) {
        var mh$ = graphene_point3d_near$MH();
        try {
            return (boolean)mh$.invokeExact(a, b, epsilon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_point3d_scale$MH() {
        return RuntimeHelper.requireNonNull(constants$1240.graphene_point3d_scale$MH,"graphene_point3d_scale");
    }
    /**
     * {@snippet :
     * void graphene_point3d_scale(const graphene_point3d_t* p, float factor, graphene_point3d_t* res);
     * }
     */
    public static void graphene_point3d_scale(MemorySegment p, float factor, MemorySegment res) {
        var mh$ = graphene_point3d_scale$MH();
        try {
            mh$.invokeExact(p, factor, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_point3d_cross$MH() {
        return RuntimeHelper.requireNonNull(constants$1241.graphene_point3d_cross$MH,"graphene_point3d_cross");
    }
    /**
     * {@snippet :
     * void graphene_point3d_cross(const graphene_point3d_t* a, const graphene_point3d_t* b, graphene_point3d_t* res);
     * }
     */
    public static void graphene_point3d_cross(MemorySegment a, MemorySegment b, MemorySegment res) {
        var mh$ = graphene_point3d_cross$MH();
        try {
            mh$.invokeExact(a, b, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_point3d_dot$MH() {
        return RuntimeHelper.requireNonNull(constants$1241.graphene_point3d_dot$MH,"graphene_point3d_dot");
    }
    /**
     * {@snippet :
     * float graphene_point3d_dot(const graphene_point3d_t* a, const graphene_point3d_t* b);
     * }
     */
    public static float graphene_point3d_dot(MemorySegment a, MemorySegment b) {
        var mh$ = graphene_point3d_dot$MH();
        try {
            return (float)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_point3d_length$MH() {
        return RuntimeHelper.requireNonNull(constants$1241.graphene_point3d_length$MH,"graphene_point3d_length");
    }
    /**
     * {@snippet :
     * float graphene_point3d_length(const graphene_point3d_t* p);
     * }
     */
    public static float graphene_point3d_length(MemorySegment p) {
        var mh$ = graphene_point3d_length$MH();
        try {
            return (float)mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_point3d_normalize$MH() {
        return RuntimeHelper.requireNonNull(constants$1241.graphene_point3d_normalize$MH,"graphene_point3d_normalize");
    }
    /**
     * {@snippet :
     * void graphene_point3d_normalize(const graphene_point3d_t* p, graphene_point3d_t* res);
     * }
     */
    public static void graphene_point3d_normalize(MemorySegment p, MemorySegment res) {
        var mh$ = graphene_point3d_normalize$MH();
        try {
            mh$.invokeExact(p, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_point3d_distance$MH() {
        return RuntimeHelper.requireNonNull(constants$1241.graphene_point3d_distance$MH,"graphene_point3d_distance");
    }
    /**
     * {@snippet :
     * float graphene_point3d_distance(const graphene_point3d_t* a, const graphene_point3d_t* b, graphene_vec3_t* delta);
     * }
     */
    public static float graphene_point3d_distance(MemorySegment a, MemorySegment b, MemorySegment delta) {
        var mh$ = graphene_point3d_distance$MH();
        try {
            return (float)mh$.invokeExact(a, b, delta);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_point3d_interpolate$MH() {
        return RuntimeHelper.requireNonNull(constants$1241.graphene_point3d_interpolate$MH,"graphene_point3d_interpolate");
    }
    /**
     * {@snippet :
     * void graphene_point3d_interpolate(const graphene_point3d_t* a, const graphene_point3d_t* b, double factor, graphene_point3d_t* res);
     * }
     */
    public static void graphene_point3d_interpolate(MemorySegment a, MemorySegment b, double factor, MemorySegment res) {
        var mh$ = graphene_point3d_interpolate$MH();
        try {
            mh$.invokeExact(a, b, factor, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_point3d_normalize_viewport$MH() {
        return RuntimeHelper.requireNonNull(constants$1242.graphene_point3d_normalize_viewport$MH,"graphene_point3d_normalize_viewport");
    }
    /**
     * {@snippet :
     * void graphene_point3d_normalize_viewport(const graphene_point3d_t* p, const graphene_rect_t* viewport, float z_near, float z_far, graphene_point3d_t* res);
     * }
     */
    public static void graphene_point3d_normalize_viewport(MemorySegment p, MemorySegment viewport, float z_near, float z_far, MemorySegment res) {
        var mh$ = graphene_point3d_normalize_viewport$MH();
        try {
            mh$.invokeExact(p, viewport, z_near, z_far, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_point3d_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$1242.graphene_point3d_zero$MH,"graphene_point3d_zero");
    }
    /**
     * {@snippet :
     * const graphene_point3d_t* graphene_point3d_zero();
     * }
     */
    public static MemorySegment graphene_point3d_zero() {
        var mh$ = graphene_point3d_zero$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_quad_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$1242.graphene_quad_alloc$MH,"graphene_quad_alloc");
    }
    /**
     * {@snippet :
     * graphene_quad_t* graphene_quad_alloc();
     * }
     */
    public static MemorySegment graphene_quad_alloc() {
        var mh$ = graphene_quad_alloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_quad_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1242.graphene_quad_free$MH,"graphene_quad_free");
    }
    /**
     * {@snippet :
     * void graphene_quad_free(graphene_quad_t* q);
     * }
     */
    public static void graphene_quad_free(MemorySegment q) {
        var mh$ = graphene_quad_free$MH();
        try {
            mh$.invokeExact(q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_quad_init$MH() {
        return RuntimeHelper.requireNonNull(constants$1242.graphene_quad_init$MH,"graphene_quad_init");
    }
    /**
     * {@snippet :
     * graphene_quad_t* graphene_quad_init(graphene_quad_t* q, const graphene_point_t* p1, const graphene_point_t* p2, const graphene_point_t* p3, const graphene_point_t* p4);
     * }
     */
    public static MemorySegment graphene_quad_init(MemorySegment q, MemorySegment p1, MemorySegment p2, MemorySegment p3, MemorySegment p4) {
        var mh$ = graphene_quad_init$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(q, p1, p2, p3, p4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_quad_init_from_rect$MH() {
        return RuntimeHelper.requireNonNull(constants$1242.graphene_quad_init_from_rect$MH,"graphene_quad_init_from_rect");
    }
    /**
     * {@snippet :
     * graphene_quad_t* graphene_quad_init_from_rect(graphene_quad_t* q, const graphene_rect_t* r);
     * }
     */
    public static MemorySegment graphene_quad_init_from_rect(MemorySegment q, MemorySegment r) {
        var mh$ = graphene_quad_init_from_rect$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(q, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_quad_init_from_points$MH() {
        return RuntimeHelper.requireNonNull(constants$1243.graphene_quad_init_from_points$MH,"graphene_quad_init_from_points");
    }
    /**
     * {@snippet :
     * graphene_quad_t* graphene_quad_init_from_points(graphene_quad_t* q, const graphene_point_t points[]);
     * }
     */
    public static MemorySegment graphene_quad_init_from_points(MemorySegment q, MemorySegment points) {
        var mh$ = graphene_quad_init_from_points$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(q, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_quad_contains$MH() {
        return RuntimeHelper.requireNonNull(constants$1243.graphene_quad_contains$MH,"graphene_quad_contains");
    }
    /**
     * {@snippet :
     * _Bool graphene_quad_contains(const graphene_quad_t* q, const graphene_point_t* p);
     * }
     */
    public static boolean graphene_quad_contains(MemorySegment q, MemorySegment p) {
        var mh$ = graphene_quad_contains$MH();
        try {
            return (boolean)mh$.invokeExact(q, p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_quad_bounds$MH() {
        return RuntimeHelper.requireNonNull(constants$1243.graphene_quad_bounds$MH,"graphene_quad_bounds");
    }
    /**
     * {@snippet :
     * void graphene_quad_bounds(const graphene_quad_t* q, graphene_rect_t* r);
     * }
     */
    public static void graphene_quad_bounds(MemorySegment q, MemorySegment r) {
        var mh$ = graphene_quad_bounds$MH();
        try {
            mh$.invokeExact(q, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_quad_get_point$MH() {
        return RuntimeHelper.requireNonNull(constants$1243.graphene_quad_get_point$MH,"graphene_quad_get_point");
    }
    /**
     * {@snippet :
     * const graphene_point_t* graphene_quad_get_point(const graphene_quad_t* q, unsigned int index_);
     * }
     */
    public static MemorySegment graphene_quad_get_point(MemorySegment q, int index_) {
        var mh$ = graphene_quad_get_point$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(q, index_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_quaternion_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$1243.graphene_quaternion_alloc$MH,"graphene_quaternion_alloc");
    }
    /**
     * {@snippet :
     * graphene_quaternion_t* graphene_quaternion_alloc();
     * }
     */
    public static MemorySegment graphene_quaternion_alloc() {
        var mh$ = graphene_quaternion_alloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_quaternion_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1243.graphene_quaternion_free$MH,"graphene_quaternion_free");
    }
    /**
     * {@snippet :
     * void graphene_quaternion_free(graphene_quaternion_t* q);
     * }
     */
    public static void graphene_quaternion_free(MemorySegment q) {
        var mh$ = graphene_quaternion_free$MH();
        try {
            mh$.invokeExact(q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_quaternion_init$MH() {
        return RuntimeHelper.requireNonNull(constants$1244.graphene_quaternion_init$MH,"graphene_quaternion_init");
    }
    /**
     * {@snippet :
     * graphene_quaternion_t* graphene_quaternion_init(graphene_quaternion_t* q, float x, float y, float z, float w);
     * }
     */
    public static MemorySegment graphene_quaternion_init(MemorySegment q, float x, float y, float z, float w) {
        var mh$ = graphene_quaternion_init$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(q, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_quaternion_init_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$1244.graphene_quaternion_init_identity$MH,"graphene_quaternion_init_identity");
    }
    /**
     * {@snippet :
     * graphene_quaternion_t* graphene_quaternion_init_identity(graphene_quaternion_t* q);
     * }
     */
    public static MemorySegment graphene_quaternion_init_identity(MemorySegment q) {
        var mh$ = graphene_quaternion_init_identity$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_quaternion_init_from_quaternion$MH() {
        return RuntimeHelper.requireNonNull(constants$1244.graphene_quaternion_init_from_quaternion$MH,"graphene_quaternion_init_from_quaternion");
    }
    /**
     * {@snippet :
     * graphene_quaternion_t* graphene_quaternion_init_from_quaternion(graphene_quaternion_t* q, const graphene_quaternion_t* src);
     * }
     */
    public static MemorySegment graphene_quaternion_init_from_quaternion(MemorySegment q, MemorySegment src) {
        var mh$ = graphene_quaternion_init_from_quaternion$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(q, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_quaternion_init_from_vec4$MH() {
        return RuntimeHelper.requireNonNull(constants$1244.graphene_quaternion_init_from_vec4$MH,"graphene_quaternion_init_from_vec4");
    }
    /**
     * {@snippet :
     * graphene_quaternion_t* graphene_quaternion_init_from_vec4(graphene_quaternion_t* q, const graphene_vec4_t* src);
     * }
     */
    public static MemorySegment graphene_quaternion_init_from_vec4(MemorySegment q, MemorySegment src) {
        var mh$ = graphene_quaternion_init_from_vec4$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(q, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_quaternion_init_from_matrix$MH() {
        return RuntimeHelper.requireNonNull(constants$1244.graphene_quaternion_init_from_matrix$MH,"graphene_quaternion_init_from_matrix");
    }
    /**
     * {@snippet :
     * graphene_quaternion_t* graphene_quaternion_init_from_matrix(graphene_quaternion_t* q, const graphene_matrix_t* m);
     * }
     */
    public static MemorySegment graphene_quaternion_init_from_matrix(MemorySegment q, MemorySegment m) {
        var mh$ = graphene_quaternion_init_from_matrix$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(q, m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_quaternion_init_from_angles$MH() {
        return RuntimeHelper.requireNonNull(constants$1244.graphene_quaternion_init_from_angles$MH,"graphene_quaternion_init_from_angles");
    }
    /**
     * {@snippet :
     * graphene_quaternion_t* graphene_quaternion_init_from_angles(graphene_quaternion_t* q, float deg_x, float deg_y, float deg_z);
     * }
     */
    public static MemorySegment graphene_quaternion_init_from_angles(MemorySegment q, float deg_x, float deg_y, float deg_z) {
        var mh$ = graphene_quaternion_init_from_angles$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(q, deg_x, deg_y, deg_z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_quaternion_init_from_radians$MH() {
        return RuntimeHelper.requireNonNull(constants$1245.graphene_quaternion_init_from_radians$MH,"graphene_quaternion_init_from_radians");
    }
    /**
     * {@snippet :
     * graphene_quaternion_t* graphene_quaternion_init_from_radians(graphene_quaternion_t* q, float rad_x, float rad_y, float rad_z);
     * }
     */
    public static MemorySegment graphene_quaternion_init_from_radians(MemorySegment q, float rad_x, float rad_y, float rad_z) {
        var mh$ = graphene_quaternion_init_from_radians$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(q, rad_x, rad_y, rad_z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_quaternion_init_from_angle_vec3$MH() {
        return RuntimeHelper.requireNonNull(constants$1245.graphene_quaternion_init_from_angle_vec3$MH,"graphene_quaternion_init_from_angle_vec3");
    }
    /**
     * {@snippet :
     * graphene_quaternion_t* graphene_quaternion_init_from_angle_vec3(graphene_quaternion_t* q, float angle, const graphene_vec3_t* axis);
     * }
     */
    public static MemorySegment graphene_quaternion_init_from_angle_vec3(MemorySegment q, float angle, MemorySegment axis) {
        var mh$ = graphene_quaternion_init_from_angle_vec3$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(q, angle, axis);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_quaternion_init_from_euler$MH() {
        return RuntimeHelper.requireNonNull(constants$1245.graphene_quaternion_init_from_euler$MH,"graphene_quaternion_init_from_euler");
    }
    /**
     * {@snippet :
     * graphene_quaternion_t* graphene_quaternion_init_from_euler(graphene_quaternion_t* q, const graphene_euler_t* e);
     * }
     */
    public static MemorySegment graphene_quaternion_init_from_euler(MemorySegment q, MemorySegment e) {
        var mh$ = graphene_quaternion_init_from_euler$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(q, e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_quaternion_to_vec4$MH() {
        return RuntimeHelper.requireNonNull(constants$1245.graphene_quaternion_to_vec4$MH,"graphene_quaternion_to_vec4");
    }
    /**
     * {@snippet :
     * void graphene_quaternion_to_vec4(const graphene_quaternion_t* q, graphene_vec4_t* res);
     * }
     */
    public static void graphene_quaternion_to_vec4(MemorySegment q, MemorySegment res) {
        var mh$ = graphene_quaternion_to_vec4$MH();
        try {
            mh$.invokeExact(q, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_quaternion_to_matrix$MH() {
        return RuntimeHelper.requireNonNull(constants$1245.graphene_quaternion_to_matrix$MH,"graphene_quaternion_to_matrix");
    }
    /**
     * {@snippet :
     * void graphene_quaternion_to_matrix(const graphene_quaternion_t* q, graphene_matrix_t* m);
     * }
     */
    public static void graphene_quaternion_to_matrix(MemorySegment q, MemorySegment m) {
        var mh$ = graphene_quaternion_to_matrix$MH();
        try {
            mh$.invokeExact(q, m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_quaternion_to_angles$MH() {
        return RuntimeHelper.requireNonNull(constants$1245.graphene_quaternion_to_angles$MH,"graphene_quaternion_to_angles");
    }
    /**
     * {@snippet :
     * void graphene_quaternion_to_angles(const graphene_quaternion_t* q, float* deg_x, float* deg_y, float* deg_z);
     * }
     */
    public static void graphene_quaternion_to_angles(MemorySegment q, MemorySegment deg_x, MemorySegment deg_y, MemorySegment deg_z) {
        var mh$ = graphene_quaternion_to_angles$MH();
        try {
            mh$.invokeExact(q, deg_x, deg_y, deg_z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_quaternion_to_radians$MH() {
        return RuntimeHelper.requireNonNull(constants$1246.graphene_quaternion_to_radians$MH,"graphene_quaternion_to_radians");
    }
    /**
     * {@snippet :
     * void graphene_quaternion_to_radians(const graphene_quaternion_t* q, float* rad_x, float* rad_y, float* rad_z);
     * }
     */
    public static void graphene_quaternion_to_radians(MemorySegment q, MemorySegment rad_x, MemorySegment rad_y, MemorySegment rad_z) {
        var mh$ = graphene_quaternion_to_radians$MH();
        try {
            mh$.invokeExact(q, rad_x, rad_y, rad_z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_quaternion_to_angle_vec3$MH() {
        return RuntimeHelper.requireNonNull(constants$1246.graphene_quaternion_to_angle_vec3$MH,"graphene_quaternion_to_angle_vec3");
    }
    /**
     * {@snippet :
     * void graphene_quaternion_to_angle_vec3(const graphene_quaternion_t* q, float* angle, graphene_vec3_t* axis);
     * }
     */
    public static void graphene_quaternion_to_angle_vec3(MemorySegment q, MemorySegment angle, MemorySegment axis) {
        var mh$ = graphene_quaternion_to_angle_vec3$MH();
        try {
            mh$.invokeExact(q, angle, axis);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_quaternion_equal$MH() {
        return RuntimeHelper.requireNonNull(constants$1246.graphene_quaternion_equal$MH,"graphene_quaternion_equal");
    }
    /**
     * {@snippet :
     * _Bool graphene_quaternion_equal(const graphene_quaternion_t* a, const graphene_quaternion_t* b);
     * }
     */
    public static boolean graphene_quaternion_equal(MemorySegment a, MemorySegment b) {
        var mh$ = graphene_quaternion_equal$MH();
        try {
            return (boolean)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_quaternion_dot$MH() {
        return RuntimeHelper.requireNonNull(constants$1246.graphene_quaternion_dot$MH,"graphene_quaternion_dot");
    }
    /**
     * {@snippet :
     * float graphene_quaternion_dot(const graphene_quaternion_t* a, const graphene_quaternion_t* b);
     * }
     */
    public static float graphene_quaternion_dot(MemorySegment a, MemorySegment b) {
        var mh$ = graphene_quaternion_dot$MH();
        try {
            return (float)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_quaternion_invert$MH() {
        return RuntimeHelper.requireNonNull(constants$1246.graphene_quaternion_invert$MH,"graphene_quaternion_invert");
    }
    /**
     * {@snippet :
     * void graphene_quaternion_invert(const graphene_quaternion_t* q, graphene_quaternion_t* res);
     * }
     */
    public static void graphene_quaternion_invert(MemorySegment q, MemorySegment res) {
        var mh$ = graphene_quaternion_invert$MH();
        try {
            mh$.invokeExact(q, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_quaternion_normalize$MH() {
        return RuntimeHelper.requireNonNull(constants$1246.graphene_quaternion_normalize$MH,"graphene_quaternion_normalize");
    }
    /**
     * {@snippet :
     * void graphene_quaternion_normalize(const graphene_quaternion_t* q, graphene_quaternion_t* res);
     * }
     */
    public static void graphene_quaternion_normalize(MemorySegment q, MemorySegment res) {
        var mh$ = graphene_quaternion_normalize$MH();
        try {
            mh$.invokeExact(q, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_quaternion_slerp$MH() {
        return RuntimeHelper.requireNonNull(constants$1247.graphene_quaternion_slerp$MH,"graphene_quaternion_slerp");
    }
    /**
     * {@snippet :
     * void graphene_quaternion_slerp(const graphene_quaternion_t* a, const graphene_quaternion_t* b, float factor, graphene_quaternion_t* res);
     * }
     */
    public static void graphene_quaternion_slerp(MemorySegment a, MemorySegment b, float factor, MemorySegment res) {
        var mh$ = graphene_quaternion_slerp$MH();
        try {
            mh$.invokeExact(a, b, factor, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_quaternion_multiply$MH() {
        return RuntimeHelper.requireNonNull(constants$1247.graphene_quaternion_multiply$MH,"graphene_quaternion_multiply");
    }
    /**
     * {@snippet :
     * void graphene_quaternion_multiply(const graphene_quaternion_t* a, const graphene_quaternion_t* b, graphene_quaternion_t* res);
     * }
     */
    public static void graphene_quaternion_multiply(MemorySegment a, MemorySegment b, MemorySegment res) {
        var mh$ = graphene_quaternion_multiply$MH();
        try {
            mh$.invokeExact(a, b, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_quaternion_scale$MH() {
        return RuntimeHelper.requireNonNull(constants$1247.graphene_quaternion_scale$MH,"graphene_quaternion_scale");
    }
    /**
     * {@snippet :
     * void graphene_quaternion_scale(const graphene_quaternion_t* q, float factor, graphene_quaternion_t* res);
     * }
     */
    public static void graphene_quaternion_scale(MemorySegment q, float factor, MemorySegment res) {
        var mh$ = graphene_quaternion_scale$MH();
        try {
            mh$.invokeExact(q, factor, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_quaternion_add$MH() {
        return RuntimeHelper.requireNonNull(constants$1247.graphene_quaternion_add$MH,"graphene_quaternion_add");
    }
    /**
     * {@snippet :
     * void graphene_quaternion_add(const graphene_quaternion_t* a, const graphene_quaternion_t* b, graphene_quaternion_t* res);
     * }
     */
    public static void graphene_quaternion_add(MemorySegment a, MemorySegment b, MemorySegment res) {
        var mh$ = graphene_quaternion_add$MH();
        try {
            mh$.invokeExact(a, b, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .GRAPHENE_EULER_ORDER_DEFAULT = -1;
     * }
     */
    public static int GRAPHENE_EULER_ORDER_DEFAULT() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum .GRAPHENE_EULER_ORDER_XYZ = 0;
     * }
     */
    public static int GRAPHENE_EULER_ORDER_XYZ() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .GRAPHENE_EULER_ORDER_YZX = 1;
     * }
     */
    public static int GRAPHENE_EULER_ORDER_YZX() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .GRAPHENE_EULER_ORDER_ZXY = 2;
     * }
     */
    public static int GRAPHENE_EULER_ORDER_ZXY() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .GRAPHENE_EULER_ORDER_XZY = 3;
     * }
     */
    public static int GRAPHENE_EULER_ORDER_XZY() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .GRAPHENE_EULER_ORDER_YXZ = 4;
     * }
     */
    public static int GRAPHENE_EULER_ORDER_YXZ() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .GRAPHENE_EULER_ORDER_ZYX = 5;
     * }
     */
    public static int GRAPHENE_EULER_ORDER_ZYX() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .GRAPHENE_EULER_ORDER_SXYZ = 6;
     * }
     */
    public static int GRAPHENE_EULER_ORDER_SXYZ() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .GRAPHENE_EULER_ORDER_SXYX = 7;
     * }
     */
    public static int GRAPHENE_EULER_ORDER_SXYX() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum .GRAPHENE_EULER_ORDER_SXZY = 8;
     * }
     */
    public static int GRAPHENE_EULER_ORDER_SXZY() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .GRAPHENE_EULER_ORDER_SXZX = 9;
     * }
     */
    public static int GRAPHENE_EULER_ORDER_SXZX() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum .GRAPHENE_EULER_ORDER_SYZX = 10;
     * }
     */
    public static int GRAPHENE_EULER_ORDER_SYZX() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum .GRAPHENE_EULER_ORDER_SYZY = 11;
     * }
     */
    public static int GRAPHENE_EULER_ORDER_SYZY() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum .GRAPHENE_EULER_ORDER_SYXZ = 12;
     * }
     */
    public static int GRAPHENE_EULER_ORDER_SYXZ() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum .GRAPHENE_EULER_ORDER_SYXY = 13;
     * }
     */
    public static int GRAPHENE_EULER_ORDER_SYXY() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum .GRAPHENE_EULER_ORDER_SZXY = 14;
     * }
     */
    public static int GRAPHENE_EULER_ORDER_SZXY() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum .GRAPHENE_EULER_ORDER_SZXZ = 15;
     * }
     */
    public static int GRAPHENE_EULER_ORDER_SZXZ() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum .GRAPHENE_EULER_ORDER_SZYX = 16;
     * }
     */
    public static int GRAPHENE_EULER_ORDER_SZYX() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum .GRAPHENE_EULER_ORDER_SZYZ = 17;
     * }
     */
    public static int GRAPHENE_EULER_ORDER_SZYZ() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum .GRAPHENE_EULER_ORDER_RZYX = 18;
     * }
     */
    public static int GRAPHENE_EULER_ORDER_RZYX() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum .GRAPHENE_EULER_ORDER_RXYX = 19;
     * }
     */
    public static int GRAPHENE_EULER_ORDER_RXYX() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * enum .GRAPHENE_EULER_ORDER_RYZX = 20;
     * }
     */
    public static int GRAPHENE_EULER_ORDER_RYZX() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * enum .GRAPHENE_EULER_ORDER_RXZX = 21;
     * }
     */
    public static int GRAPHENE_EULER_ORDER_RXZX() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * enum .GRAPHENE_EULER_ORDER_RXZY = 22;
     * }
     */
    public static int GRAPHENE_EULER_ORDER_RXZY() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * enum .GRAPHENE_EULER_ORDER_RYZY = 23;
     * }
     */
    public static int GRAPHENE_EULER_ORDER_RYZY() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * enum .GRAPHENE_EULER_ORDER_RZXY = 24;
     * }
     */
    public static int GRAPHENE_EULER_ORDER_RZXY() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * enum .GRAPHENE_EULER_ORDER_RYXY = 25;
     * }
     */
    public static int GRAPHENE_EULER_ORDER_RYXY() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * enum .GRAPHENE_EULER_ORDER_RYXZ = 26;
     * }
     */
    public static int GRAPHENE_EULER_ORDER_RYXZ() {
        return (int)26L;
    }
    /**
     * {@snippet :
     * enum .GRAPHENE_EULER_ORDER_RZXZ = 27;
     * }
     */
    public static int GRAPHENE_EULER_ORDER_RZXZ() {
        return (int)27L;
    }
    /**
     * {@snippet :
     * enum .GRAPHENE_EULER_ORDER_RXYZ = 28;
     * }
     */
    public static int GRAPHENE_EULER_ORDER_RXYZ() {
        return (int)28L;
    }
    /**
     * {@snippet :
     * enum .GRAPHENE_EULER_ORDER_RZYZ = 29;
     * }
     */
    public static int GRAPHENE_EULER_ORDER_RZYZ() {
        return (int)29L;
    }
    public static MethodHandle graphene_euler_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$1247.graphene_euler_alloc$MH,"graphene_euler_alloc");
    }
    /**
     * {@snippet :
     * graphene_euler_t* graphene_euler_alloc();
     * }
     */
    public static MemorySegment graphene_euler_alloc() {
        var mh$ = graphene_euler_alloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_euler_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1247.graphene_euler_free$MH,"graphene_euler_free");
    }
    /**
     * {@snippet :
     * void graphene_euler_free(graphene_euler_t* e);
     * }
     */
    public static void graphene_euler_free(MemorySegment e) {
        var mh$ = graphene_euler_free$MH();
        try {
            mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_euler_init$MH() {
        return RuntimeHelper.requireNonNull(constants$1248.graphene_euler_init$MH,"graphene_euler_init");
    }
    /**
     * {@snippet :
     * graphene_euler_t* graphene_euler_init(graphene_euler_t* e, float x, float y, float z);
     * }
     */
    public static MemorySegment graphene_euler_init(MemorySegment e, float x, float y, float z) {
        var mh$ = graphene_euler_init$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(e, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_euler_init_with_order$MH() {
        return RuntimeHelper.requireNonNull(constants$1248.graphene_euler_init_with_order$MH,"graphene_euler_init_with_order");
    }
    /**
     * {@snippet :
     * graphene_euler_t* graphene_euler_init_with_order(graphene_euler_t* e, float x, float y, float z, graphene_euler_order_t order);
     * }
     */
    public static MemorySegment graphene_euler_init_with_order(MemorySegment e, float x, float y, float z, int order) {
        var mh$ = graphene_euler_init_with_order$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(e, x, y, z, order);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_euler_init_from_matrix$MH() {
        return RuntimeHelper.requireNonNull(constants$1248.graphene_euler_init_from_matrix$MH,"graphene_euler_init_from_matrix");
    }
    /**
     * {@snippet :
     * graphene_euler_t* graphene_euler_init_from_matrix(graphene_euler_t* e, const graphene_matrix_t* m, graphene_euler_order_t order);
     * }
     */
    public static MemorySegment graphene_euler_init_from_matrix(MemorySegment e, MemorySegment m, int order) {
        var mh$ = graphene_euler_init_from_matrix$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(e, m, order);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_euler_init_from_quaternion$MH() {
        return RuntimeHelper.requireNonNull(constants$1248.graphene_euler_init_from_quaternion$MH,"graphene_euler_init_from_quaternion");
    }
    /**
     * {@snippet :
     * graphene_euler_t* graphene_euler_init_from_quaternion(graphene_euler_t* e, const graphene_quaternion_t* q, graphene_euler_order_t order);
     * }
     */
    public static MemorySegment graphene_euler_init_from_quaternion(MemorySegment e, MemorySegment q, int order) {
        var mh$ = graphene_euler_init_from_quaternion$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(e, q, order);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_euler_init_from_vec3$MH() {
        return RuntimeHelper.requireNonNull(constants$1248.graphene_euler_init_from_vec3$MH,"graphene_euler_init_from_vec3");
    }
    /**
     * {@snippet :
     * graphene_euler_t* graphene_euler_init_from_vec3(graphene_euler_t* e, const graphene_vec3_t* v, graphene_euler_order_t order);
     * }
     */
    public static MemorySegment graphene_euler_init_from_vec3(MemorySegment e, MemorySegment v, int order) {
        var mh$ = graphene_euler_init_from_vec3$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(e, v, order);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_euler_init_from_euler$MH() {
        return RuntimeHelper.requireNonNull(constants$1248.graphene_euler_init_from_euler$MH,"graphene_euler_init_from_euler");
    }
    /**
     * {@snippet :
     * graphene_euler_t* graphene_euler_init_from_euler(graphene_euler_t* e, const graphene_euler_t* src);
     * }
     */
    public static MemorySegment graphene_euler_init_from_euler(MemorySegment e, MemorySegment src) {
        var mh$ = graphene_euler_init_from_euler$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(e, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_euler_init_from_radians$MH() {
        return RuntimeHelper.requireNonNull(constants$1249.graphene_euler_init_from_radians$MH,"graphene_euler_init_from_radians");
    }
    /**
     * {@snippet :
     * graphene_euler_t* graphene_euler_init_from_radians(graphene_euler_t* e, float x, float y, float z, graphene_euler_order_t order);
     * }
     */
    public static MemorySegment graphene_euler_init_from_radians(MemorySegment e, float x, float y, float z, int order) {
        var mh$ = graphene_euler_init_from_radians$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(e, x, y, z, order);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_euler_equal$MH() {
        return RuntimeHelper.requireNonNull(constants$1249.graphene_euler_equal$MH,"graphene_euler_equal");
    }
    /**
     * {@snippet :
     * _Bool graphene_euler_equal(const graphene_euler_t* a, const graphene_euler_t* b);
     * }
     */
    public static boolean graphene_euler_equal(MemorySegment a, MemorySegment b) {
        var mh$ = graphene_euler_equal$MH();
        try {
            return (boolean)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_euler_get_x$MH() {
        return RuntimeHelper.requireNonNull(constants$1249.graphene_euler_get_x$MH,"graphene_euler_get_x");
    }
    /**
     * {@snippet :
     * float graphene_euler_get_x(const graphene_euler_t* e);
     * }
     */
    public static float graphene_euler_get_x(MemorySegment e) {
        var mh$ = graphene_euler_get_x$MH();
        try {
            return (float)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_euler_get_y$MH() {
        return RuntimeHelper.requireNonNull(constants$1249.graphene_euler_get_y$MH,"graphene_euler_get_y");
    }
    /**
     * {@snippet :
     * float graphene_euler_get_y(const graphene_euler_t* e);
     * }
     */
    public static float graphene_euler_get_y(MemorySegment e) {
        var mh$ = graphene_euler_get_y$MH();
        try {
            return (float)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_euler_get_z$MH() {
        return RuntimeHelper.requireNonNull(constants$1249.graphene_euler_get_z$MH,"graphene_euler_get_z");
    }
    /**
     * {@snippet :
     * float graphene_euler_get_z(const graphene_euler_t* e);
     * }
     */
    public static float graphene_euler_get_z(MemorySegment e) {
        var mh$ = graphene_euler_get_z$MH();
        try {
            return (float)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_euler_get_order$MH() {
        return RuntimeHelper.requireNonNull(constants$1249.graphene_euler_get_order$MH,"graphene_euler_get_order");
    }
    /**
     * {@snippet :
     * graphene_euler_order_t graphene_euler_get_order(const graphene_euler_t* e);
     * }
     */
    public static int graphene_euler_get_order(MemorySegment e) {
        var mh$ = graphene_euler_get_order$MH();
        try {
            return (int)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_euler_get_alpha$MH() {
        return RuntimeHelper.requireNonNull(constants$1250.graphene_euler_get_alpha$MH,"graphene_euler_get_alpha");
    }
    /**
     * {@snippet :
     * float graphene_euler_get_alpha(const graphene_euler_t* e);
     * }
     */
    public static float graphene_euler_get_alpha(MemorySegment e) {
        var mh$ = graphene_euler_get_alpha$MH();
        try {
            return (float)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_euler_get_beta$MH() {
        return RuntimeHelper.requireNonNull(constants$1250.graphene_euler_get_beta$MH,"graphene_euler_get_beta");
    }
    /**
     * {@snippet :
     * float graphene_euler_get_beta(const graphene_euler_t* e);
     * }
     */
    public static float graphene_euler_get_beta(MemorySegment e) {
        var mh$ = graphene_euler_get_beta$MH();
        try {
            return (float)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_euler_get_gamma$MH() {
        return RuntimeHelper.requireNonNull(constants$1250.graphene_euler_get_gamma$MH,"graphene_euler_get_gamma");
    }
    /**
     * {@snippet :
     * float graphene_euler_get_gamma(const graphene_euler_t* e);
     * }
     */
    public static float graphene_euler_get_gamma(MemorySegment e) {
        var mh$ = graphene_euler_get_gamma$MH();
        try {
            return (float)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_euler_to_vec3$MH() {
        return RuntimeHelper.requireNonNull(constants$1250.graphene_euler_to_vec3$MH,"graphene_euler_to_vec3");
    }
    /**
     * {@snippet :
     * void graphene_euler_to_vec3(const graphene_euler_t* e, graphene_vec3_t* res);
     * }
     */
    public static void graphene_euler_to_vec3(MemorySegment e, MemorySegment res) {
        var mh$ = graphene_euler_to_vec3$MH();
        try {
            mh$.invokeExact(e, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_euler_to_matrix$MH() {
        return RuntimeHelper.requireNonNull(constants$1250.graphene_euler_to_matrix$MH,"graphene_euler_to_matrix");
    }
    /**
     * {@snippet :
     * void graphene_euler_to_matrix(const graphene_euler_t* e, graphene_matrix_t* res);
     * }
     */
    public static void graphene_euler_to_matrix(MemorySegment e, MemorySegment res) {
        var mh$ = graphene_euler_to_matrix$MH();
        try {
            mh$.invokeExact(e, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_euler_to_quaternion$MH() {
        return RuntimeHelper.requireNonNull(constants$1250.graphene_euler_to_quaternion$MH,"graphene_euler_to_quaternion");
    }
    /**
     * {@snippet :
     * void graphene_euler_to_quaternion(const graphene_euler_t* e, graphene_quaternion_t* res);
     * }
     */
    public static void graphene_euler_to_quaternion(MemorySegment e, MemorySegment res) {
        var mh$ = graphene_euler_to_quaternion$MH();
        try {
            mh$.invokeExact(e, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_euler_reorder$MH() {
        return RuntimeHelper.requireNonNull(constants$1251.graphene_euler_reorder$MH,"graphene_euler_reorder");
    }
    /**
     * {@snippet :
     * void graphene_euler_reorder(const graphene_euler_t* e, graphene_euler_order_t order, graphene_euler_t* res);
     * }
     */
    public static void graphene_euler_reorder(MemorySegment e, int order, MemorySegment res) {
        var mh$ = graphene_euler_reorder$MH();
        try {
            mh$.invokeExact(e, order, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_plane_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$1251.graphene_plane_alloc$MH,"graphene_plane_alloc");
    }
    /**
     * {@snippet :
     * graphene_plane_t* graphene_plane_alloc();
     * }
     */
    public static MemorySegment graphene_plane_alloc() {
        var mh$ = graphene_plane_alloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_plane_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1251.graphene_plane_free$MH,"graphene_plane_free");
    }
    /**
     * {@snippet :
     * void graphene_plane_free(graphene_plane_t* p);
     * }
     */
    public static void graphene_plane_free(MemorySegment p) {
        var mh$ = graphene_plane_free$MH();
        try {
            mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_plane_init$MH() {
        return RuntimeHelper.requireNonNull(constants$1251.graphene_plane_init$MH,"graphene_plane_init");
    }
    /**
     * {@snippet :
     * graphene_plane_t* graphene_plane_init(graphene_plane_t* p, const graphene_vec3_t* normal, float constant);
     * }
     */
    public static MemorySegment graphene_plane_init(MemorySegment p, MemorySegment normal, float constant) {
        var mh$ = graphene_plane_init$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(p, normal, constant);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_plane_init_from_vec4$MH() {
        return RuntimeHelper.requireNonNull(constants$1251.graphene_plane_init_from_vec4$MH,"graphene_plane_init_from_vec4");
    }
    /**
     * {@snippet :
     * graphene_plane_t* graphene_plane_init_from_vec4(graphene_plane_t* p, const graphene_vec4_t* src);
     * }
     */
    public static MemorySegment graphene_plane_init_from_vec4(MemorySegment p, MemorySegment src) {
        var mh$ = graphene_plane_init_from_vec4$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(p, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_plane_init_from_plane$MH() {
        return RuntimeHelper.requireNonNull(constants$1251.graphene_plane_init_from_plane$MH,"graphene_plane_init_from_plane");
    }
    /**
     * {@snippet :
     * graphene_plane_t* graphene_plane_init_from_plane(graphene_plane_t* p, const graphene_plane_t* src);
     * }
     */
    public static MemorySegment graphene_plane_init_from_plane(MemorySegment p, MemorySegment src) {
        var mh$ = graphene_plane_init_from_plane$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(p, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_plane_init_from_point$MH() {
        return RuntimeHelper.requireNonNull(constants$1252.graphene_plane_init_from_point$MH,"graphene_plane_init_from_point");
    }
    /**
     * {@snippet :
     * graphene_plane_t* graphene_plane_init_from_point(graphene_plane_t* p, const graphene_vec3_t* normal, const graphene_point3d_t* point);
     * }
     */
    public static MemorySegment graphene_plane_init_from_point(MemorySegment p, MemorySegment normal, MemorySegment point) {
        var mh$ = graphene_plane_init_from_point$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(p, normal, point);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_plane_init_from_points$MH() {
        return RuntimeHelper.requireNonNull(constants$1252.graphene_plane_init_from_points$MH,"graphene_plane_init_from_points");
    }
    /**
     * {@snippet :
     * graphene_plane_t* graphene_plane_init_from_points(graphene_plane_t* p, const graphene_point3d_t* a, const graphene_point3d_t* b, const graphene_point3d_t* c);
     * }
     */
    public static MemorySegment graphene_plane_init_from_points(MemorySegment p, MemorySegment a, MemorySegment b, MemorySegment c) {
        var mh$ = graphene_plane_init_from_points$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(p, a, b, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_plane_normalize$MH() {
        return RuntimeHelper.requireNonNull(constants$1252.graphene_plane_normalize$MH,"graphene_plane_normalize");
    }
    /**
     * {@snippet :
     * void graphene_plane_normalize(const graphene_plane_t* p, graphene_plane_t* res);
     * }
     */
    public static void graphene_plane_normalize(MemorySegment p, MemorySegment res) {
        var mh$ = graphene_plane_normalize$MH();
        try {
            mh$.invokeExact(p, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_plane_negate$MH() {
        return RuntimeHelper.requireNonNull(constants$1252.graphene_plane_negate$MH,"graphene_plane_negate");
    }
    /**
     * {@snippet :
     * void graphene_plane_negate(const graphene_plane_t* p, graphene_plane_t* res);
     * }
     */
    public static void graphene_plane_negate(MemorySegment p, MemorySegment res) {
        var mh$ = graphene_plane_negate$MH();
        try {
            mh$.invokeExact(p, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_plane_equal$MH() {
        return RuntimeHelper.requireNonNull(constants$1252.graphene_plane_equal$MH,"graphene_plane_equal");
    }
    /**
     * {@snippet :
     * _Bool graphene_plane_equal(const graphene_plane_t* a, const graphene_plane_t* b);
     * }
     */
    public static boolean graphene_plane_equal(MemorySegment a, MemorySegment b) {
        var mh$ = graphene_plane_equal$MH();
        try {
            return (boolean)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_plane_distance$MH() {
        return RuntimeHelper.requireNonNull(constants$1252.graphene_plane_distance$MH,"graphene_plane_distance");
    }
    /**
     * {@snippet :
     * float graphene_plane_distance(const graphene_plane_t* p, const graphene_point3d_t* point);
     * }
     */
    public static float graphene_plane_distance(MemorySegment p, MemorySegment point) {
        var mh$ = graphene_plane_distance$MH();
        try {
            return (float)mh$.invokeExact(p, point);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_plane_get_normal$MH() {
        return RuntimeHelper.requireNonNull(constants$1253.graphene_plane_get_normal$MH,"graphene_plane_get_normal");
    }
    /**
     * {@snippet :
     * void graphene_plane_get_normal(const graphene_plane_t* p, graphene_vec3_t* normal);
     * }
     */
    public static void graphene_plane_get_normal(MemorySegment p, MemorySegment normal) {
        var mh$ = graphene_plane_get_normal$MH();
        try {
            mh$.invokeExact(p, normal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_plane_get_constant$MH() {
        return RuntimeHelper.requireNonNull(constants$1253.graphene_plane_get_constant$MH,"graphene_plane_get_constant");
    }
    /**
     * {@snippet :
     * float graphene_plane_get_constant(const graphene_plane_t* p);
     * }
     */
    public static float graphene_plane_get_constant(MemorySegment p) {
        var mh$ = graphene_plane_get_constant$MH();
        try {
            return (float)mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_plane_transform$MH() {
        return RuntimeHelper.requireNonNull(constants$1253.graphene_plane_transform$MH,"graphene_plane_transform");
    }
    /**
     * {@snippet :
     * void graphene_plane_transform(const graphene_plane_t* p, const graphene_matrix_t* matrix, const graphene_matrix_t* normal_matrix, graphene_plane_t* res);
     * }
     */
    public static void graphene_plane_transform(MemorySegment p, MemorySegment matrix, MemorySegment normal_matrix, MemorySegment res) {
        var mh$ = graphene_plane_transform$MH();
        try {
            mh$.invokeExact(p, matrix, normal_matrix, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_frustum_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$1253.graphene_frustum_alloc$MH,"graphene_frustum_alloc");
    }
    /**
     * {@snippet :
     * graphene_frustum_t* graphene_frustum_alloc();
     * }
     */
    public static MemorySegment graphene_frustum_alloc() {
        var mh$ = graphene_frustum_alloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_frustum_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1253.graphene_frustum_free$MH,"graphene_frustum_free");
    }
    /**
     * {@snippet :
     * void graphene_frustum_free(graphene_frustum_t* f);
     * }
     */
    public static void graphene_frustum_free(MemorySegment f) {
        var mh$ = graphene_frustum_free$MH();
        try {
            mh$.invokeExact(f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_frustum_init$MH() {
        return RuntimeHelper.requireNonNull(constants$1253.graphene_frustum_init$MH,"graphene_frustum_init");
    }
    /**
     * {@snippet :
     * graphene_frustum_t* graphene_frustum_init(graphene_frustum_t* f, const graphene_plane_t* p0, const graphene_plane_t* p1, const graphene_plane_t* p2, const graphene_plane_t* p3, const graphene_plane_t* p4, const graphene_plane_t* p5);
     * }
     */
    public static MemorySegment graphene_frustum_init(MemorySegment f, MemorySegment p0, MemorySegment p1, MemorySegment p2, MemorySegment p3, MemorySegment p4, MemorySegment p5) {
        var mh$ = graphene_frustum_init$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(f, p0, p1, p2, p3, p4, p5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_frustum_init_from_frustum$MH() {
        return RuntimeHelper.requireNonNull(constants$1254.graphene_frustum_init_from_frustum$MH,"graphene_frustum_init_from_frustum");
    }
    /**
     * {@snippet :
     * graphene_frustum_t* graphene_frustum_init_from_frustum(graphene_frustum_t* f, const graphene_frustum_t* src);
     * }
     */
    public static MemorySegment graphene_frustum_init_from_frustum(MemorySegment f, MemorySegment src) {
        var mh$ = graphene_frustum_init_from_frustum$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(f, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_frustum_init_from_matrix$MH() {
        return RuntimeHelper.requireNonNull(constants$1254.graphene_frustum_init_from_matrix$MH,"graphene_frustum_init_from_matrix");
    }
    /**
     * {@snippet :
     * graphene_frustum_t* graphene_frustum_init_from_matrix(graphene_frustum_t* f, const graphene_matrix_t* matrix);
     * }
     */
    public static MemorySegment graphene_frustum_init_from_matrix(MemorySegment f, MemorySegment matrix) {
        var mh$ = graphene_frustum_init_from_matrix$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(f, matrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_frustum_contains_point$MH() {
        return RuntimeHelper.requireNonNull(constants$1254.graphene_frustum_contains_point$MH,"graphene_frustum_contains_point");
    }
    /**
     * {@snippet :
     * _Bool graphene_frustum_contains_point(const graphene_frustum_t* f, const graphene_point3d_t* point);
     * }
     */
    public static boolean graphene_frustum_contains_point(MemorySegment f, MemorySegment point) {
        var mh$ = graphene_frustum_contains_point$MH();
        try {
            return (boolean)mh$.invokeExact(f, point);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_frustum_intersects_sphere$MH() {
        return RuntimeHelper.requireNonNull(constants$1254.graphene_frustum_intersects_sphere$MH,"graphene_frustum_intersects_sphere");
    }
    /**
     * {@snippet :
     * _Bool graphene_frustum_intersects_sphere(const graphene_frustum_t* f, const graphene_sphere_t* sphere);
     * }
     */
    public static boolean graphene_frustum_intersects_sphere(MemorySegment f, MemorySegment sphere) {
        var mh$ = graphene_frustum_intersects_sphere$MH();
        try {
            return (boolean)mh$.invokeExact(f, sphere);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_frustum_intersects_box$MH() {
        return RuntimeHelper.requireNonNull(constants$1254.graphene_frustum_intersects_box$MH,"graphene_frustum_intersects_box");
    }
    /**
     * {@snippet :
     * _Bool graphene_frustum_intersects_box(const graphene_frustum_t* f, const graphene_box_t* box);
     * }
     */
    public static boolean graphene_frustum_intersects_box(MemorySegment f, MemorySegment box) {
        var mh$ = graphene_frustum_intersects_box$MH();
        try {
            return (boolean)mh$.invokeExact(f, box);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_frustum_get_planes$MH() {
        return RuntimeHelper.requireNonNull(constants$1254.graphene_frustum_get_planes$MH,"graphene_frustum_get_planes");
    }
    /**
     * {@snippet :
     * void graphene_frustum_get_planes(const graphene_frustum_t* f, graphene_plane_t planes[]);
     * }
     */
    public static void graphene_frustum_get_planes(MemorySegment f, MemorySegment planes) {
        var mh$ = graphene_frustum_get_planes$MH();
        try {
            mh$.invokeExact(f, planes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_frustum_equal$MH() {
        return RuntimeHelper.requireNonNull(constants$1255.graphene_frustum_equal$MH,"graphene_frustum_equal");
    }
    /**
     * {@snippet :
     * _Bool graphene_frustum_equal(const graphene_frustum_t* a, const graphene_frustum_t* b);
     * }
     */
    public static boolean graphene_frustum_equal(MemorySegment a, MemorySegment b) {
        var mh$ = graphene_frustum_equal$MH();
        try {
            return (boolean)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_sphere_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$1255.graphene_sphere_alloc$MH,"graphene_sphere_alloc");
    }
    /**
     * {@snippet :
     * graphene_sphere_t* graphene_sphere_alloc();
     * }
     */
    public static MemorySegment graphene_sphere_alloc() {
        var mh$ = graphene_sphere_alloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_sphere_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1255.graphene_sphere_free$MH,"graphene_sphere_free");
    }
    /**
     * {@snippet :
     * void graphene_sphere_free(graphene_sphere_t* s);
     * }
     */
    public static void graphene_sphere_free(MemorySegment s) {
        var mh$ = graphene_sphere_free$MH();
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_sphere_init$MH() {
        return RuntimeHelper.requireNonNull(constants$1255.graphene_sphere_init$MH,"graphene_sphere_init");
    }
    /**
     * {@snippet :
     * graphene_sphere_t* graphene_sphere_init(graphene_sphere_t* s, const graphene_point3d_t* center, float radius);
     * }
     */
    public static MemorySegment graphene_sphere_init(MemorySegment s, MemorySegment center, float radius) {
        var mh$ = graphene_sphere_init$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(s, center, radius);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_sphere_init_from_points$MH() {
        return RuntimeHelper.requireNonNull(constants$1255.graphene_sphere_init_from_points$MH,"graphene_sphere_init_from_points");
    }
    /**
     * {@snippet :
     * graphene_sphere_t* graphene_sphere_init_from_points(graphene_sphere_t* s, unsigned int n_points, const graphene_point3d_t* points, const graphene_point3d_t* center);
     * }
     */
    public static MemorySegment graphene_sphere_init_from_points(MemorySegment s, int n_points, MemorySegment points, MemorySegment center) {
        var mh$ = graphene_sphere_init_from_points$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(s, n_points, points, center);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_sphere_init_from_vectors$MH() {
        return RuntimeHelper.requireNonNull(constants$1255.graphene_sphere_init_from_vectors$MH,"graphene_sphere_init_from_vectors");
    }
    /**
     * {@snippet :
     * graphene_sphere_t* graphene_sphere_init_from_vectors(graphene_sphere_t* s, unsigned int n_vectors, const graphene_vec3_t* vectors, const graphene_point3d_t* center);
     * }
     */
    public static MemorySegment graphene_sphere_init_from_vectors(MemorySegment s, int n_vectors, MemorySegment vectors, MemorySegment center) {
        var mh$ = graphene_sphere_init_from_vectors$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(s, n_vectors, vectors, center);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_sphere_get_center$MH() {
        return RuntimeHelper.requireNonNull(constants$1256.graphene_sphere_get_center$MH,"graphene_sphere_get_center");
    }
    /**
     * {@snippet :
     * void graphene_sphere_get_center(const graphene_sphere_t* s, graphene_point3d_t* center);
     * }
     */
    public static void graphene_sphere_get_center(MemorySegment s, MemorySegment center) {
        var mh$ = graphene_sphere_get_center$MH();
        try {
            mh$.invokeExact(s, center);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_sphere_get_radius$MH() {
        return RuntimeHelper.requireNonNull(constants$1256.graphene_sphere_get_radius$MH,"graphene_sphere_get_radius");
    }
    /**
     * {@snippet :
     * float graphene_sphere_get_radius(const graphene_sphere_t* s);
     * }
     */
    public static float graphene_sphere_get_radius(MemorySegment s) {
        var mh$ = graphene_sphere_get_radius$MH();
        try {
            return (float)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_sphere_is_empty$MH() {
        return RuntimeHelper.requireNonNull(constants$1256.graphene_sphere_is_empty$MH,"graphene_sphere_is_empty");
    }
    /**
     * {@snippet :
     * _Bool graphene_sphere_is_empty(const graphene_sphere_t* s);
     * }
     */
    public static boolean graphene_sphere_is_empty(MemorySegment s) {
        var mh$ = graphene_sphere_is_empty$MH();
        try {
            return (boolean)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_sphere_equal$MH() {
        return RuntimeHelper.requireNonNull(constants$1256.graphene_sphere_equal$MH,"graphene_sphere_equal");
    }
    /**
     * {@snippet :
     * _Bool graphene_sphere_equal(const graphene_sphere_t* a, const graphene_sphere_t* b);
     * }
     */
    public static boolean graphene_sphere_equal(MemorySegment a, MemorySegment b) {
        var mh$ = graphene_sphere_equal$MH();
        try {
            return (boolean)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_sphere_contains_point$MH() {
        return RuntimeHelper.requireNonNull(constants$1256.graphene_sphere_contains_point$MH,"graphene_sphere_contains_point");
    }
    /**
     * {@snippet :
     * _Bool graphene_sphere_contains_point(const graphene_sphere_t* s, const graphene_point3d_t* point);
     * }
     */
    public static boolean graphene_sphere_contains_point(MemorySegment s, MemorySegment point) {
        var mh$ = graphene_sphere_contains_point$MH();
        try {
            return (boolean)mh$.invokeExact(s, point);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_sphere_distance$MH() {
        return RuntimeHelper.requireNonNull(constants$1256.graphene_sphere_distance$MH,"graphene_sphere_distance");
    }
    /**
     * {@snippet :
     * float graphene_sphere_distance(const graphene_sphere_t* s, const graphene_point3d_t* point);
     * }
     */
    public static float graphene_sphere_distance(MemorySegment s, MemorySegment point) {
        var mh$ = graphene_sphere_distance$MH();
        try {
            return (float)mh$.invokeExact(s, point);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_sphere_get_bounding_box$MH() {
        return RuntimeHelper.requireNonNull(constants$1257.graphene_sphere_get_bounding_box$MH,"graphene_sphere_get_bounding_box");
    }
    /**
     * {@snippet :
     * void graphene_sphere_get_bounding_box(const graphene_sphere_t* s, graphene_box_t* box);
     * }
     */
    public static void graphene_sphere_get_bounding_box(MemorySegment s, MemorySegment box) {
        var mh$ = graphene_sphere_get_bounding_box$MH();
        try {
            mh$.invokeExact(s, box);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_sphere_translate$MH() {
        return RuntimeHelper.requireNonNull(constants$1257.graphene_sphere_translate$MH,"graphene_sphere_translate");
    }
    /**
     * {@snippet :
     * void graphene_sphere_translate(const graphene_sphere_t* s, const graphene_point3d_t* point, graphene_sphere_t* res);
     * }
     */
    public static void graphene_sphere_translate(MemorySegment s, MemorySegment point, MemorySegment res) {
        var mh$ = graphene_sphere_translate$MH();
        try {
            mh$.invokeExact(s, point, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_box_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$1257.graphene_box_alloc$MH,"graphene_box_alloc");
    }
    /**
     * {@snippet :
     * graphene_box_t* graphene_box_alloc();
     * }
     */
    public static MemorySegment graphene_box_alloc() {
        var mh$ = graphene_box_alloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_box_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1257.graphene_box_free$MH,"graphene_box_free");
    }
    /**
     * {@snippet :
     * void graphene_box_free(graphene_box_t* box);
     * }
     */
    public static void graphene_box_free(MemorySegment box) {
        var mh$ = graphene_box_free$MH();
        try {
            mh$.invokeExact(box);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_box_init$MH() {
        return RuntimeHelper.requireNonNull(constants$1257.graphene_box_init$MH,"graphene_box_init");
    }
    /**
     * {@snippet :
     * graphene_box_t* graphene_box_init(graphene_box_t* box, const graphene_point3d_t* min, const graphene_point3d_t* max);
     * }
     */
    public static MemorySegment graphene_box_init(MemorySegment box, MemorySegment min, MemorySegment max) {
        var mh$ = graphene_box_init$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(box, min, max);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_box_init_from_points$MH() {
        return RuntimeHelper.requireNonNull(constants$1257.graphene_box_init_from_points$MH,"graphene_box_init_from_points");
    }
    /**
     * {@snippet :
     * graphene_box_t* graphene_box_init_from_points(graphene_box_t* box, unsigned int n_points, const graphene_point3d_t* points);
     * }
     */
    public static MemorySegment graphene_box_init_from_points(MemorySegment box, int n_points, MemorySegment points) {
        var mh$ = graphene_box_init_from_points$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(box, n_points, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_box_init_from_vectors$MH() {
        return RuntimeHelper.requireNonNull(constants$1258.graphene_box_init_from_vectors$MH,"graphene_box_init_from_vectors");
    }
    /**
     * {@snippet :
     * graphene_box_t* graphene_box_init_from_vectors(graphene_box_t* box, unsigned int n_vectors, const graphene_vec3_t* vectors);
     * }
     */
    public static MemorySegment graphene_box_init_from_vectors(MemorySegment box, int n_vectors, MemorySegment vectors) {
        var mh$ = graphene_box_init_from_vectors$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(box, n_vectors, vectors);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_box_init_from_box$MH() {
        return RuntimeHelper.requireNonNull(constants$1258.graphene_box_init_from_box$MH,"graphene_box_init_from_box");
    }
    /**
     * {@snippet :
     * graphene_box_t* graphene_box_init_from_box(graphene_box_t* box, const graphene_box_t* src);
     * }
     */
    public static MemorySegment graphene_box_init_from_box(MemorySegment box, MemorySegment src) {
        var mh$ = graphene_box_init_from_box$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(box, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_box_init_from_vec3$MH() {
        return RuntimeHelper.requireNonNull(constants$1258.graphene_box_init_from_vec3$MH,"graphene_box_init_from_vec3");
    }
    /**
     * {@snippet :
     * graphene_box_t* graphene_box_init_from_vec3(graphene_box_t* box, const graphene_vec3_t* min, const graphene_vec3_t* max);
     * }
     */
    public static MemorySegment graphene_box_init_from_vec3(MemorySegment box, MemorySegment min, MemorySegment max) {
        var mh$ = graphene_box_init_from_vec3$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(box, min, max);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_box_expand$MH() {
        return RuntimeHelper.requireNonNull(constants$1258.graphene_box_expand$MH,"graphene_box_expand");
    }
    /**
     * {@snippet :
     * void graphene_box_expand(const graphene_box_t* box, const graphene_point3d_t* point, graphene_box_t* res);
     * }
     */
    public static void graphene_box_expand(MemorySegment box, MemorySegment point, MemorySegment res) {
        var mh$ = graphene_box_expand$MH();
        try {
            mh$.invokeExact(box, point, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_box_expand_vec3$MH() {
        return RuntimeHelper.requireNonNull(constants$1258.graphene_box_expand_vec3$MH,"graphene_box_expand_vec3");
    }
    /**
     * {@snippet :
     * void graphene_box_expand_vec3(const graphene_box_t* box, const graphene_vec3_t* vec, graphene_box_t* res);
     * }
     */
    public static void graphene_box_expand_vec3(MemorySegment box, MemorySegment vec, MemorySegment res) {
        var mh$ = graphene_box_expand_vec3$MH();
        try {
            mh$.invokeExact(box, vec, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_box_expand_scalar$MH() {
        return RuntimeHelper.requireNonNull(constants$1258.graphene_box_expand_scalar$MH,"graphene_box_expand_scalar");
    }
    /**
     * {@snippet :
     * void graphene_box_expand_scalar(const graphene_box_t* box, float scalar, graphene_box_t* res);
     * }
     */
    public static void graphene_box_expand_scalar(MemorySegment box, float scalar, MemorySegment res) {
        var mh$ = graphene_box_expand_scalar$MH();
        try {
            mh$.invokeExact(box, scalar, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_box_union$MH() {
        return RuntimeHelper.requireNonNull(constants$1259.graphene_box_union$MH,"graphene_box_union");
    }
    /**
     * {@snippet :
     * void graphene_box_union(const graphene_box_t* a, const graphene_box_t* b, graphene_box_t* res);
     * }
     */
    public static void graphene_box_union(MemorySegment a, MemorySegment b, MemorySegment res) {
        var mh$ = graphene_box_union$MH();
        try {
            mh$.invokeExact(a, b, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_box_intersection$MH() {
        return RuntimeHelper.requireNonNull(constants$1259.graphene_box_intersection$MH,"graphene_box_intersection");
    }
    /**
     * {@snippet :
     * _Bool graphene_box_intersection(const graphene_box_t* a, const graphene_box_t* b, graphene_box_t* res);
     * }
     */
    public static boolean graphene_box_intersection(MemorySegment a, MemorySegment b, MemorySegment res) {
        var mh$ = graphene_box_intersection$MH();
        try {
            return (boolean)mh$.invokeExact(a, b, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_box_get_width$MH() {
        return RuntimeHelper.requireNonNull(constants$1259.graphene_box_get_width$MH,"graphene_box_get_width");
    }
    /**
     * {@snippet :
     * float graphene_box_get_width(const graphene_box_t* box);
     * }
     */
    public static float graphene_box_get_width(MemorySegment box) {
        var mh$ = graphene_box_get_width$MH();
        try {
            return (float)mh$.invokeExact(box);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_box_get_height$MH() {
        return RuntimeHelper.requireNonNull(constants$1259.graphene_box_get_height$MH,"graphene_box_get_height");
    }
    /**
     * {@snippet :
     * float graphene_box_get_height(const graphene_box_t* box);
     * }
     */
    public static float graphene_box_get_height(MemorySegment box) {
        var mh$ = graphene_box_get_height$MH();
        try {
            return (float)mh$.invokeExact(box);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_box_get_depth$MH() {
        return RuntimeHelper.requireNonNull(constants$1259.graphene_box_get_depth$MH,"graphene_box_get_depth");
    }
    /**
     * {@snippet :
     * float graphene_box_get_depth(const graphene_box_t* box);
     * }
     */
    public static float graphene_box_get_depth(MemorySegment box) {
        var mh$ = graphene_box_get_depth$MH();
        try {
            return (float)mh$.invokeExact(box);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_box_get_size$MH() {
        return RuntimeHelper.requireNonNull(constants$1259.graphene_box_get_size$MH,"graphene_box_get_size");
    }
    /**
     * {@snippet :
     * void graphene_box_get_size(const graphene_box_t* box, graphene_vec3_t* size);
     * }
     */
    public static void graphene_box_get_size(MemorySegment box, MemorySegment size) {
        var mh$ = graphene_box_get_size$MH();
        try {
            mh$.invokeExact(box, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_box_get_center$MH() {
        return RuntimeHelper.requireNonNull(constants$1260.graphene_box_get_center$MH,"graphene_box_get_center");
    }
    /**
     * {@snippet :
     * void graphene_box_get_center(const graphene_box_t* box, graphene_point3d_t* center);
     * }
     */
    public static void graphene_box_get_center(MemorySegment box, MemorySegment center) {
        var mh$ = graphene_box_get_center$MH();
        try {
            mh$.invokeExact(box, center);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_box_get_min$MH() {
        return RuntimeHelper.requireNonNull(constants$1260.graphene_box_get_min$MH,"graphene_box_get_min");
    }
    /**
     * {@snippet :
     * void graphene_box_get_min(const graphene_box_t* box, graphene_point3d_t* min);
     * }
     */
    public static void graphene_box_get_min(MemorySegment box, MemorySegment min) {
        var mh$ = graphene_box_get_min$MH();
        try {
            mh$.invokeExact(box, min);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_box_get_max$MH() {
        return RuntimeHelper.requireNonNull(constants$1260.graphene_box_get_max$MH,"graphene_box_get_max");
    }
    /**
     * {@snippet :
     * void graphene_box_get_max(const graphene_box_t* box, graphene_point3d_t* max);
     * }
     */
    public static void graphene_box_get_max(MemorySegment box, MemorySegment max) {
        var mh$ = graphene_box_get_max$MH();
        try {
            mh$.invokeExact(box, max);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_box_get_vertices$MH() {
        return RuntimeHelper.requireNonNull(constants$1260.graphene_box_get_vertices$MH,"graphene_box_get_vertices");
    }
    /**
     * {@snippet :
     * void graphene_box_get_vertices(const graphene_box_t* box, graphene_vec3_t vertices[]);
     * }
     */
    public static void graphene_box_get_vertices(MemorySegment box, MemorySegment vertices) {
        var mh$ = graphene_box_get_vertices$MH();
        try {
            mh$.invokeExact(box, vertices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_box_get_bounding_sphere$MH() {
        return RuntimeHelper.requireNonNull(constants$1260.graphene_box_get_bounding_sphere$MH,"graphene_box_get_bounding_sphere");
    }
    /**
     * {@snippet :
     * void graphene_box_get_bounding_sphere(const graphene_box_t* box, graphene_sphere_t* sphere);
     * }
     */
    public static void graphene_box_get_bounding_sphere(MemorySegment box, MemorySegment sphere) {
        var mh$ = graphene_box_get_bounding_sphere$MH();
        try {
            mh$.invokeExact(box, sphere);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_box_contains_point$MH() {
        return RuntimeHelper.requireNonNull(constants$1260.graphene_box_contains_point$MH,"graphene_box_contains_point");
    }
    /**
     * {@snippet :
     * _Bool graphene_box_contains_point(const graphene_box_t* box, const graphene_point3d_t* point);
     * }
     */
    public static boolean graphene_box_contains_point(MemorySegment box, MemorySegment point) {
        var mh$ = graphene_box_contains_point$MH();
        try {
            return (boolean)mh$.invokeExact(box, point);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_box_contains_box$MH() {
        return RuntimeHelper.requireNonNull(constants$1261.graphene_box_contains_box$MH,"graphene_box_contains_box");
    }
    /**
     * {@snippet :
     * _Bool graphene_box_contains_box(const graphene_box_t* a, const graphene_box_t* b);
     * }
     */
    public static boolean graphene_box_contains_box(MemorySegment a, MemorySegment b) {
        var mh$ = graphene_box_contains_box$MH();
        try {
            return (boolean)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_box_equal$MH() {
        return RuntimeHelper.requireNonNull(constants$1261.graphene_box_equal$MH,"graphene_box_equal");
    }
    /**
     * {@snippet :
     * _Bool graphene_box_equal(const graphene_box_t* a, const graphene_box_t* b);
     * }
     */
    public static boolean graphene_box_equal(MemorySegment a, MemorySegment b) {
        var mh$ = graphene_box_equal$MH();
        try {
            return (boolean)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_box_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$1261.graphene_box_zero$MH,"graphene_box_zero");
    }
    /**
     * {@snippet :
     * const graphene_box_t* graphene_box_zero();
     * }
     */
    public static MemorySegment graphene_box_zero() {
        var mh$ = graphene_box_zero$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_box_one$MH() {
        return RuntimeHelper.requireNonNull(constants$1261.graphene_box_one$MH,"graphene_box_one");
    }
    /**
     * {@snippet :
     * const graphene_box_t* graphene_box_one();
     * }
     */
    public static MemorySegment graphene_box_one() {
        var mh$ = graphene_box_one$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_box_minus_one$MH() {
        return RuntimeHelper.requireNonNull(constants$1261.graphene_box_minus_one$MH,"graphene_box_minus_one");
    }
    /**
     * {@snippet :
     * const graphene_box_t* graphene_box_minus_one();
     * }
     */
    public static MemorySegment graphene_box_minus_one() {
        var mh$ = graphene_box_minus_one$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_box_one_minus_one$MH() {
        return RuntimeHelper.requireNonNull(constants$1261.graphene_box_one_minus_one$MH,"graphene_box_one_minus_one");
    }
    /**
     * {@snippet :
     * const graphene_box_t* graphene_box_one_minus_one();
     * }
     */
    public static MemorySegment graphene_box_one_minus_one() {
        var mh$ = graphene_box_one_minus_one$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_box_infinite$MH() {
        return RuntimeHelper.requireNonNull(constants$1262.graphene_box_infinite$MH,"graphene_box_infinite");
    }
    /**
     * {@snippet :
     * const graphene_box_t* graphene_box_infinite();
     * }
     */
    public static MemorySegment graphene_box_infinite() {
        var mh$ = graphene_box_infinite$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_box_empty$MH() {
        return RuntimeHelper.requireNonNull(constants$1262.graphene_box_empty$MH,"graphene_box_empty");
    }
    /**
     * {@snippet :
     * const graphene_box_t* graphene_box_empty();
     * }
     */
    public static MemorySegment graphene_box_empty() {
        var mh$ = graphene_box_empty$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_triangle_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$1262.graphene_triangle_alloc$MH,"graphene_triangle_alloc");
    }
    /**
     * {@snippet :
     * graphene_triangle_t* graphene_triangle_alloc();
     * }
     */
    public static MemorySegment graphene_triangle_alloc() {
        var mh$ = graphene_triangle_alloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_triangle_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1262.graphene_triangle_free$MH,"graphene_triangle_free");
    }
    /**
     * {@snippet :
     * void graphene_triangle_free(graphene_triangle_t* t);
     * }
     */
    public static void graphene_triangle_free(MemorySegment t) {
        var mh$ = graphene_triangle_free$MH();
        try {
            mh$.invokeExact(t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_triangle_init_from_point3d$MH() {
        return RuntimeHelper.requireNonNull(constants$1262.graphene_triangle_init_from_point3d$MH,"graphene_triangle_init_from_point3d");
    }
    /**
     * {@snippet :
     * graphene_triangle_t* graphene_triangle_init_from_point3d(graphene_triangle_t* t, const graphene_point3d_t* a, const graphene_point3d_t* b, const graphene_point3d_t* c);
     * }
     */
    public static MemorySegment graphene_triangle_init_from_point3d(MemorySegment t, MemorySegment a, MemorySegment b, MemorySegment c) {
        var mh$ = graphene_triangle_init_from_point3d$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(t, a, b, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_triangle_init_from_vec3$MH() {
        return RuntimeHelper.requireNonNull(constants$1262.graphene_triangle_init_from_vec3$MH,"graphene_triangle_init_from_vec3");
    }
    /**
     * {@snippet :
     * graphene_triangle_t* graphene_triangle_init_from_vec3(graphene_triangle_t* t, const graphene_vec3_t* a, const graphene_vec3_t* b, const graphene_vec3_t* c);
     * }
     */
    public static MemorySegment graphene_triangle_init_from_vec3(MemorySegment t, MemorySegment a, MemorySegment b, MemorySegment c) {
        var mh$ = graphene_triangle_init_from_vec3$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(t, a, b, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_triangle_init_from_float$MH() {
        return RuntimeHelper.requireNonNull(constants$1263.graphene_triangle_init_from_float$MH,"graphene_triangle_init_from_float");
    }
    /**
     * {@snippet :
     * graphene_triangle_t* graphene_triangle_init_from_float(graphene_triangle_t* t, float* a, float* b, float* c);
     * }
     */
    public static MemorySegment graphene_triangle_init_from_float(MemorySegment t, MemorySegment a, MemorySegment b, MemorySegment c) {
        var mh$ = graphene_triangle_init_from_float$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(t, a, b, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_triangle_get_points$MH() {
        return RuntimeHelper.requireNonNull(constants$1263.graphene_triangle_get_points$MH,"graphene_triangle_get_points");
    }
    /**
     * {@snippet :
     * void graphene_triangle_get_points(const graphene_triangle_t* t, graphene_point3d_t* a, graphene_point3d_t* b, graphene_point3d_t* c);
     * }
     */
    public static void graphene_triangle_get_points(MemorySegment t, MemorySegment a, MemorySegment b, MemorySegment c) {
        var mh$ = graphene_triangle_get_points$MH();
        try {
            mh$.invokeExact(t, a, b, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_triangle_get_vertices$MH() {
        return RuntimeHelper.requireNonNull(constants$1263.graphene_triangle_get_vertices$MH,"graphene_triangle_get_vertices");
    }
    /**
     * {@snippet :
     * void graphene_triangle_get_vertices(const graphene_triangle_t* t, graphene_vec3_t* a, graphene_vec3_t* b, graphene_vec3_t* c);
     * }
     */
    public static void graphene_triangle_get_vertices(MemorySegment t, MemorySegment a, MemorySegment b, MemorySegment c) {
        var mh$ = graphene_triangle_get_vertices$MH();
        try {
            mh$.invokeExact(t, a, b, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_triangle_get_area$MH() {
        return RuntimeHelper.requireNonNull(constants$1263.graphene_triangle_get_area$MH,"graphene_triangle_get_area");
    }
    /**
     * {@snippet :
     * float graphene_triangle_get_area(const graphene_triangle_t* t);
     * }
     */
    public static float graphene_triangle_get_area(MemorySegment t) {
        var mh$ = graphene_triangle_get_area$MH();
        try {
            return (float)mh$.invokeExact(t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_triangle_get_midpoint$MH() {
        return RuntimeHelper.requireNonNull(constants$1263.graphene_triangle_get_midpoint$MH,"graphene_triangle_get_midpoint");
    }
    /**
     * {@snippet :
     * void graphene_triangle_get_midpoint(const graphene_triangle_t* t, graphene_point3d_t* res);
     * }
     */
    public static void graphene_triangle_get_midpoint(MemorySegment t, MemorySegment res) {
        var mh$ = graphene_triangle_get_midpoint$MH();
        try {
            mh$.invokeExact(t, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_triangle_get_normal$MH() {
        return RuntimeHelper.requireNonNull(constants$1263.graphene_triangle_get_normal$MH,"graphene_triangle_get_normal");
    }
    /**
     * {@snippet :
     * void graphene_triangle_get_normal(const graphene_triangle_t* t, graphene_vec3_t* res);
     * }
     */
    public static void graphene_triangle_get_normal(MemorySegment t, MemorySegment res) {
        var mh$ = graphene_triangle_get_normal$MH();
        try {
            mh$.invokeExact(t, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_triangle_get_plane$MH() {
        return RuntimeHelper.requireNonNull(constants$1264.graphene_triangle_get_plane$MH,"graphene_triangle_get_plane");
    }
    /**
     * {@snippet :
     * void graphene_triangle_get_plane(const graphene_triangle_t* t, graphene_plane_t* res);
     * }
     */
    public static void graphene_triangle_get_plane(MemorySegment t, MemorySegment res) {
        var mh$ = graphene_triangle_get_plane$MH();
        try {
            mh$.invokeExact(t, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_triangle_get_bounding_box$MH() {
        return RuntimeHelper.requireNonNull(constants$1264.graphene_triangle_get_bounding_box$MH,"graphene_triangle_get_bounding_box");
    }
    /**
     * {@snippet :
     * void graphene_triangle_get_bounding_box(const graphene_triangle_t* t, graphene_box_t* res);
     * }
     */
    public static void graphene_triangle_get_bounding_box(MemorySegment t, MemorySegment res) {
        var mh$ = graphene_triangle_get_bounding_box$MH();
        try {
            mh$.invokeExact(t, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_triangle_get_barycoords$MH() {
        return RuntimeHelper.requireNonNull(constants$1264.graphene_triangle_get_barycoords$MH,"graphene_triangle_get_barycoords");
    }
    /**
     * {@snippet :
     * _Bool graphene_triangle_get_barycoords(const graphene_triangle_t* t, const graphene_point3d_t* p, graphene_vec2_t* res);
     * }
     */
    public static boolean graphene_triangle_get_barycoords(MemorySegment t, MemorySegment p, MemorySegment res) {
        var mh$ = graphene_triangle_get_barycoords$MH();
        try {
            return (boolean)mh$.invokeExact(t, p, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_triangle_get_uv$MH() {
        return RuntimeHelper.requireNonNull(constants$1264.graphene_triangle_get_uv$MH,"graphene_triangle_get_uv");
    }
    /**
     * {@snippet :
     * _Bool graphene_triangle_get_uv(const graphene_triangle_t* t, const graphene_point3d_t* p, const graphene_vec2_t* uv_a, const graphene_vec2_t* uv_b, const graphene_vec2_t* uv_c, graphene_vec2_t* res);
     * }
     */
    public static boolean graphene_triangle_get_uv(MemorySegment t, MemorySegment p, MemorySegment uv_a, MemorySegment uv_b, MemorySegment uv_c, MemorySegment res) {
        var mh$ = graphene_triangle_get_uv$MH();
        try {
            return (boolean)mh$.invokeExact(t, p, uv_a, uv_b, uv_c, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_triangle_contains_point$MH() {
        return RuntimeHelper.requireNonNull(constants$1264.graphene_triangle_contains_point$MH,"graphene_triangle_contains_point");
    }
    /**
     * {@snippet :
     * _Bool graphene_triangle_contains_point(const graphene_triangle_t* t, const graphene_point3d_t* p);
     * }
     */
    public static boolean graphene_triangle_contains_point(MemorySegment t, MemorySegment p) {
        var mh$ = graphene_triangle_contains_point$MH();
        try {
            return (boolean)mh$.invokeExact(t, p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_triangle_equal$MH() {
        return RuntimeHelper.requireNonNull(constants$1264.graphene_triangle_equal$MH,"graphene_triangle_equal");
    }
    /**
     * {@snippet :
     * _Bool graphene_triangle_equal(const graphene_triangle_t* a, const graphene_triangle_t* b);
     * }
     */
    public static boolean graphene_triangle_equal(MemorySegment a, MemorySegment b) {
        var mh$ = graphene_triangle_equal$MH();
        try {
            return (boolean)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .GRAPHENE_RAY_INTERSECTION_KIND_NONE = 0;
     * }
     */
    public static int GRAPHENE_RAY_INTERSECTION_KIND_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .GRAPHENE_RAY_INTERSECTION_KIND_ENTER = 1;
     * }
     */
    public static int GRAPHENE_RAY_INTERSECTION_KIND_ENTER() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .GRAPHENE_RAY_INTERSECTION_KIND_LEAVE = 2;
     * }
     */
    public static int GRAPHENE_RAY_INTERSECTION_KIND_LEAVE() {
        return (int)2L;
    }
    public static MethodHandle graphene_ray_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$1265.graphene_ray_alloc$MH,"graphene_ray_alloc");
    }
    /**
     * {@snippet :
     * graphene_ray_t* graphene_ray_alloc();
     * }
     */
    public static MemorySegment graphene_ray_alloc() {
        var mh$ = graphene_ray_alloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_ray_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1265.graphene_ray_free$MH,"graphene_ray_free");
    }
    /**
     * {@snippet :
     * void graphene_ray_free(graphene_ray_t* r);
     * }
     */
    public static void graphene_ray_free(MemorySegment r) {
        var mh$ = graphene_ray_free$MH();
        try {
            mh$.invokeExact(r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_ray_init$MH() {
        return RuntimeHelper.requireNonNull(constants$1265.graphene_ray_init$MH,"graphene_ray_init");
    }
    /**
     * {@snippet :
     * graphene_ray_t* graphene_ray_init(graphene_ray_t* r, const graphene_point3d_t* origin, const graphene_vec3_t* direction);
     * }
     */
    public static MemorySegment graphene_ray_init(MemorySegment r, MemorySegment origin, MemorySegment direction) {
        var mh$ = graphene_ray_init$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(r, origin, direction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_ray_init_from_ray$MH() {
        return RuntimeHelper.requireNonNull(constants$1265.graphene_ray_init_from_ray$MH,"graphene_ray_init_from_ray");
    }
    /**
     * {@snippet :
     * graphene_ray_t* graphene_ray_init_from_ray(graphene_ray_t* r, const graphene_ray_t* src);
     * }
     */
    public static MemorySegment graphene_ray_init_from_ray(MemorySegment r, MemorySegment src) {
        var mh$ = graphene_ray_init_from_ray$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(r, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_ray_init_from_vec3$MH() {
        return RuntimeHelper.requireNonNull(constants$1265.graphene_ray_init_from_vec3$MH,"graphene_ray_init_from_vec3");
    }
    /**
     * {@snippet :
     * graphene_ray_t* graphene_ray_init_from_vec3(graphene_ray_t* r, const graphene_vec3_t* origin, const graphene_vec3_t* direction);
     * }
     */
    public static MemorySegment graphene_ray_init_from_vec3(MemorySegment r, MemorySegment origin, MemorySegment direction) {
        var mh$ = graphene_ray_init_from_vec3$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(r, origin, direction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_ray_get_origin$MH() {
        return RuntimeHelper.requireNonNull(constants$1265.graphene_ray_get_origin$MH,"graphene_ray_get_origin");
    }
    /**
     * {@snippet :
     * void graphene_ray_get_origin(const graphene_ray_t* r, graphene_point3d_t* origin);
     * }
     */
    public static void graphene_ray_get_origin(MemorySegment r, MemorySegment origin) {
        var mh$ = graphene_ray_get_origin$MH();
        try {
            mh$.invokeExact(r, origin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_ray_get_direction$MH() {
        return RuntimeHelper.requireNonNull(constants$1266.graphene_ray_get_direction$MH,"graphene_ray_get_direction");
    }
    /**
     * {@snippet :
     * void graphene_ray_get_direction(const graphene_ray_t* r, graphene_vec3_t* direction);
     * }
     */
    public static void graphene_ray_get_direction(MemorySegment r, MemorySegment direction) {
        var mh$ = graphene_ray_get_direction$MH();
        try {
            mh$.invokeExact(r, direction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_ray_get_position_at$MH() {
        return RuntimeHelper.requireNonNull(constants$1266.graphene_ray_get_position_at$MH,"graphene_ray_get_position_at");
    }
    /**
     * {@snippet :
     * void graphene_ray_get_position_at(const graphene_ray_t* r, float t, graphene_point3d_t* position);
     * }
     */
    public static void graphene_ray_get_position_at(MemorySegment r, float t, MemorySegment position) {
        var mh$ = graphene_ray_get_position_at$MH();
        try {
            mh$.invokeExact(r, t, position);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_ray_get_distance_to_point$MH() {
        return RuntimeHelper.requireNonNull(constants$1266.graphene_ray_get_distance_to_point$MH,"graphene_ray_get_distance_to_point");
    }
    /**
     * {@snippet :
     * float graphene_ray_get_distance_to_point(const graphene_ray_t* r, const graphene_point3d_t* p);
     * }
     */
    public static float graphene_ray_get_distance_to_point(MemorySegment r, MemorySegment p) {
        var mh$ = graphene_ray_get_distance_to_point$MH();
        try {
            return (float)mh$.invokeExact(r, p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_ray_get_distance_to_plane$MH() {
        return RuntimeHelper.requireNonNull(constants$1266.graphene_ray_get_distance_to_plane$MH,"graphene_ray_get_distance_to_plane");
    }
    /**
     * {@snippet :
     * float graphene_ray_get_distance_to_plane(const graphene_ray_t* r, const graphene_plane_t* p);
     * }
     */
    public static float graphene_ray_get_distance_to_plane(MemorySegment r, MemorySegment p) {
        var mh$ = graphene_ray_get_distance_to_plane$MH();
        try {
            return (float)mh$.invokeExact(r, p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_ray_equal$MH() {
        return RuntimeHelper.requireNonNull(constants$1266.graphene_ray_equal$MH,"graphene_ray_equal");
    }
    /**
     * {@snippet :
     * _Bool graphene_ray_equal(const graphene_ray_t* a, const graphene_ray_t* b);
     * }
     */
    public static boolean graphene_ray_equal(MemorySegment a, MemorySegment b) {
        var mh$ = graphene_ray_equal$MH();
        try {
            return (boolean)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_ray_get_closest_point_to_point$MH() {
        return RuntimeHelper.requireNonNull(constants$1266.graphene_ray_get_closest_point_to_point$MH,"graphene_ray_get_closest_point_to_point");
    }
    /**
     * {@snippet :
     * void graphene_ray_get_closest_point_to_point(const graphene_ray_t* r, const graphene_point3d_t* p, graphene_point3d_t* res);
     * }
     */
    public static void graphene_ray_get_closest_point_to_point(MemorySegment r, MemorySegment p, MemorySegment res) {
        var mh$ = graphene_ray_get_closest_point_to_point$MH();
        try {
            mh$.invokeExact(r, p, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_ray_intersect_sphere$MH() {
        return RuntimeHelper.requireNonNull(constants$1267.graphene_ray_intersect_sphere$MH,"graphene_ray_intersect_sphere");
    }
    /**
     * {@snippet :
     * graphene_ray_intersection_kind_t graphene_ray_intersect_sphere(const graphene_ray_t* r, const graphene_sphere_t* s, float* t_out);
     * }
     */
    public static int graphene_ray_intersect_sphere(MemorySegment r, MemorySegment s, MemorySegment t_out) {
        var mh$ = graphene_ray_intersect_sphere$MH();
        try {
            return (int)mh$.invokeExact(r, s, t_out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_ray_intersects_sphere$MH() {
        return RuntimeHelper.requireNonNull(constants$1267.graphene_ray_intersects_sphere$MH,"graphene_ray_intersects_sphere");
    }
    /**
     * {@snippet :
     * _Bool graphene_ray_intersects_sphere(const graphene_ray_t* r, const graphene_sphere_t* s);
     * }
     */
    public static boolean graphene_ray_intersects_sphere(MemorySegment r, MemorySegment s) {
        var mh$ = graphene_ray_intersects_sphere$MH();
        try {
            return (boolean)mh$.invokeExact(r, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_ray_intersect_box$MH() {
        return RuntimeHelper.requireNonNull(constants$1267.graphene_ray_intersect_box$MH,"graphene_ray_intersect_box");
    }
    /**
     * {@snippet :
     * graphene_ray_intersection_kind_t graphene_ray_intersect_box(const graphene_ray_t* r, const graphene_box_t* b, float* t_out);
     * }
     */
    public static int graphene_ray_intersect_box(MemorySegment r, MemorySegment b, MemorySegment t_out) {
        var mh$ = graphene_ray_intersect_box$MH();
        try {
            return (int)mh$.invokeExact(r, b, t_out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_ray_intersects_box$MH() {
        return RuntimeHelper.requireNonNull(constants$1267.graphene_ray_intersects_box$MH,"graphene_ray_intersects_box");
    }
    /**
     * {@snippet :
     * _Bool graphene_ray_intersects_box(const graphene_ray_t* r, const graphene_box_t* b);
     * }
     */
    public static boolean graphene_ray_intersects_box(MemorySegment r, MemorySegment b) {
        var mh$ = graphene_ray_intersects_box$MH();
        try {
            return (boolean)mh$.invokeExact(r, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_ray_intersect_triangle$MH() {
        return RuntimeHelper.requireNonNull(constants$1267.graphene_ray_intersect_triangle$MH,"graphene_ray_intersect_triangle");
    }
    /**
     * {@snippet :
     * graphene_ray_intersection_kind_t graphene_ray_intersect_triangle(const graphene_ray_t* r, const graphene_triangle_t* t, float* t_out);
     * }
     */
    public static int graphene_ray_intersect_triangle(MemorySegment r, MemorySegment t, MemorySegment t_out) {
        var mh$ = graphene_ray_intersect_triangle$MH();
        try {
            return (int)mh$.invokeExact(r, t, t_out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle graphene_ray_intersects_triangle$MH() {
        return RuntimeHelper.requireNonNull(constants$1267.graphene_ray_intersects_triangle$MH,"graphene_ray_intersects_triangle");
    }
    /**
     * {@snippet :
     * _Bool graphene_ray_intersects_triangle(const graphene_ray_t* r, const graphene_triangle_t* t);
     * }
     */
    public static boolean graphene_ray_intersects_triangle(MemorySegment r, MemorySegment t) {
        var mh$ = graphene_ray_intersects_triangle$MH();
        try {
            return (boolean)mh$.invokeExact(r, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gsk_rounded_rect_init$MH() {
        return RuntimeHelper.requireNonNull(constants$1268.gsk_rounded_rect_init$MH,"gsk_rounded_rect_init");
    }
    /**
     * {@snippet :
     * GskRoundedRect* gsk_rounded_rect_init(GskRoundedRect* self, const graphene_rect_t* bounds, const graphene_size_t* top_left, const graphene_size_t* top_right, const graphene_size_t* bottom_right, const graphene_size_t* bottom_left);
     * }
     */
    public static MemorySegment gsk_rounded_rect_init(MemorySegment self, MemorySegment bounds, MemorySegment top_left, MemorySegment top_right, MemorySegment bottom_right, MemorySegment bottom_left) {
        var mh$ = gsk_rounded_rect_init$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(self, bounds, top_left, top_right, bottom_right, bottom_left);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


