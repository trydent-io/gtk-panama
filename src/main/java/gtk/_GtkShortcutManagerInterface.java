// Generated by jextract

package gtk;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GtkShortcutManagerInterface {
 *     GTypeInterface g_iface;
 *     void (*add_controller)(GtkShortcutManager*,GtkShortcutController*);
 *     void (*remove_controller)(GtkShortcutManager*,GtkShortcutController*);
 * };
 * }
 */
public class _GtkShortcutManagerInterface {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("g_iface"),
        Constants$root.C_POINTER$LAYOUT.withName("add_controller"),
        Constants$root.C_POINTER$LAYOUT.withName("remove_controller")
    ).withName("_GtkShortcutManagerInterface");
    public static MemoryLayout $LAYOUT() {
        return _GtkShortcutManagerInterface.$struct$LAYOUT;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor add_controller$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor add_controller_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle add_controller_UP$MH = RuntimeHelper.upcallHandle(add_controller.class, "apply", _GtkShortcutManagerInterface.add_controller_UP$FUNC);
    static final FunctionDescriptor add_controller_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle add_controller_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkShortcutManagerInterface.add_controller_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*add_controller)(GtkShortcutManager*,GtkShortcutController*);
     * }
     */
    public interface add_controller {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(add_controller fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkShortcutManagerInterface.add_controller_UP$MH, fi, _GtkShortcutManagerInterface.add_controller$FUNC, scope);
        }
        static add_controller ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    _GtkShortcutManagerInterface.add_controller_DOWN$MH.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle add_controller$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("add_controller"));
    public static VarHandle add_controller$VH() {
        return _GtkShortcutManagerInterface.add_controller$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*add_controller)(GtkShortcutManager*,GtkShortcutController*);
     * }
     */
    public static MemorySegment add_controller$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkShortcutManagerInterface.add_controller$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*add_controller)(GtkShortcutManager*,GtkShortcutController*);
     * }
     */
    public static void add_controller$set(MemorySegment seg, MemorySegment x) {
        _GtkShortcutManagerInterface.add_controller$VH.set(seg, x);
    }
    public static MemorySegment add_controller$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkShortcutManagerInterface.add_controller$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void add_controller$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkShortcutManagerInterface.add_controller$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static add_controller add_controller(MemorySegment segment, SegmentScope scope) {
        return add_controller.ofAddress(add_controller$get(segment), scope);
    }
    static final FunctionDescriptor remove_controller$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor remove_controller_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle remove_controller_UP$MH = RuntimeHelper.upcallHandle(remove_controller.class, "apply", _GtkShortcutManagerInterface.remove_controller_UP$FUNC);
    static final FunctionDescriptor remove_controller_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle remove_controller_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkShortcutManagerInterface.remove_controller_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*remove_controller)(GtkShortcutManager*,GtkShortcutController*);
     * }
     */
    public interface remove_controller {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(remove_controller fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkShortcutManagerInterface.remove_controller_UP$MH, fi, _GtkShortcutManagerInterface.remove_controller$FUNC, scope);
        }
        static remove_controller ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    _GtkShortcutManagerInterface.remove_controller_DOWN$MH.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle remove_controller$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("remove_controller"));
    public static VarHandle remove_controller$VH() {
        return _GtkShortcutManagerInterface.remove_controller$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*remove_controller)(GtkShortcutManager*,GtkShortcutController*);
     * }
     */
    public static MemorySegment remove_controller$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkShortcutManagerInterface.remove_controller$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*remove_controller)(GtkShortcutManager*,GtkShortcutController*);
     * }
     */
    public static void remove_controller$set(MemorySegment seg, MemorySegment x) {
        _GtkShortcutManagerInterface.remove_controller$VH.set(seg, x);
    }
    public static MemorySegment remove_controller$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkShortcutManagerInterface.remove_controller$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void remove_controller$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkShortcutManagerInterface.remove_controller$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static remove_controller remove_controller(MemorySegment segment, SegmentScope scope) {
        return remove_controller.ofAddress(remove_controller$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


