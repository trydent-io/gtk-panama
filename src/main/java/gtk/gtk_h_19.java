// Generated by jextract

package gtk;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class gtk_h_19 extends gtk_h_18 {

    /**
     * {@snippet :
     * enum .GTK_TEXT_WINDOW_WIDGET = 1;
     * }
     */
    public static int GTK_TEXT_WINDOW_WIDGET() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .GTK_TEXT_WINDOW_TEXT = 2;
     * }
     */
    public static int GTK_TEXT_WINDOW_TEXT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .GTK_TEXT_WINDOW_LEFT = 3;
     * }
     */
    public static int GTK_TEXT_WINDOW_LEFT() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .GTK_TEXT_WINDOW_RIGHT = 4;
     * }
     */
    public static int GTK_TEXT_WINDOW_RIGHT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .GTK_TEXT_WINDOW_TOP = 5;
     * }
     */
    public static int GTK_TEXT_WINDOW_TOP() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .GTK_TEXT_WINDOW_BOTTOM = 6;
     * }
     */
    public static int GTK_TEXT_WINDOW_BOTTOM() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .GTK_TEXT_VIEW_LAYER_BELOW_TEXT = 0;
     * }
     */
    public static int GTK_TEXT_VIEW_LAYER_BELOW_TEXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .GTK_TEXT_VIEW_LAYER_ABOVE_TEXT = 1;
     * }
     */
    public static int GTK_TEXT_VIEW_LAYER_ABOVE_TEXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .GTK_TEXT_EXTEND_SELECTION_WORD = 0;
     * }
     */
    public static int GTK_TEXT_EXTEND_SELECTION_WORD() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .GTK_TEXT_EXTEND_SELECTION_LINE = 1;
     * }
     */
    public static int GTK_TEXT_EXTEND_SELECTION_LINE() {
        return (int)1L;
    }
    public static MethodHandle gtk_text_view_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1897.gtk_text_view_get_type$MH,"gtk_text_view_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_text_view_get_type();
     * }
     */
    public static long gtk_text_view_get_type() {
        var mh$ = gtk_text_view_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1897.gtk_text_view_new$MH,"gtk_text_view_new");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_text_view_new();
     * }
     */
    public static MemorySegment gtk_text_view_new() {
        var mh$ = gtk_text_view_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_new_with_buffer$MH() {
        return RuntimeHelper.requireNonNull(constants$1898.gtk_text_view_new_with_buffer$MH,"gtk_text_view_new_with_buffer");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_text_view_new_with_buffer(GtkTextBuffer* buffer);
     * }
     */
    public static MemorySegment gtk_text_view_new_with_buffer(MemorySegment buffer) {
        var mh$ = gtk_text_view_new_with_buffer$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_set_buffer$MH() {
        return RuntimeHelper.requireNonNull(constants$1898.gtk_text_view_set_buffer$MH,"gtk_text_view_set_buffer");
    }
    /**
     * {@snippet :
     * void gtk_text_view_set_buffer(GtkTextView* text_view, GtkTextBuffer* buffer);
     * }
     */
    public static void gtk_text_view_set_buffer(MemorySegment text_view, MemorySegment buffer) {
        var mh$ = gtk_text_view_set_buffer$MH();
        try {
            mh$.invokeExact(text_view, buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_get_buffer$MH() {
        return RuntimeHelper.requireNonNull(constants$1898.gtk_text_view_get_buffer$MH,"gtk_text_view_get_buffer");
    }
    /**
     * {@snippet :
     * GtkTextBuffer* gtk_text_view_get_buffer(GtkTextView* text_view);
     * }
     */
    public static MemorySegment gtk_text_view_get_buffer(MemorySegment text_view) {
        var mh$ = gtk_text_view_get_buffer$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_scroll_to_iter$MH() {
        return RuntimeHelper.requireNonNull(constants$1898.gtk_text_view_scroll_to_iter$MH,"gtk_text_view_scroll_to_iter");
    }
    /**
     * {@snippet :
     * gboolean gtk_text_view_scroll_to_iter(GtkTextView* text_view, GtkTextIter* iter, double within_margin, gboolean use_align, double xalign, double yalign);
     * }
     */
    public static int gtk_text_view_scroll_to_iter(MemorySegment text_view, MemorySegment iter, double within_margin, int use_align, double xalign, double yalign) {
        var mh$ = gtk_text_view_scroll_to_iter$MH();
        try {
            return (int)mh$.invokeExact(text_view, iter, within_margin, use_align, xalign, yalign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_scroll_to_mark$MH() {
        return RuntimeHelper.requireNonNull(constants$1898.gtk_text_view_scroll_to_mark$MH,"gtk_text_view_scroll_to_mark");
    }
    /**
     * {@snippet :
     * void gtk_text_view_scroll_to_mark(GtkTextView* text_view, GtkTextMark* mark, double within_margin, gboolean use_align, double xalign, double yalign);
     * }
     */
    public static void gtk_text_view_scroll_to_mark(MemorySegment text_view, MemorySegment mark, double within_margin, int use_align, double xalign, double yalign) {
        var mh$ = gtk_text_view_scroll_to_mark$MH();
        try {
            mh$.invokeExact(text_view, mark, within_margin, use_align, xalign, yalign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_scroll_mark_onscreen$MH() {
        return RuntimeHelper.requireNonNull(constants$1898.gtk_text_view_scroll_mark_onscreen$MH,"gtk_text_view_scroll_mark_onscreen");
    }
    /**
     * {@snippet :
     * void gtk_text_view_scroll_mark_onscreen(GtkTextView* text_view, GtkTextMark* mark);
     * }
     */
    public static void gtk_text_view_scroll_mark_onscreen(MemorySegment text_view, MemorySegment mark) {
        var mh$ = gtk_text_view_scroll_mark_onscreen$MH();
        try {
            mh$.invokeExact(text_view, mark);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_move_mark_onscreen$MH() {
        return RuntimeHelper.requireNonNull(constants$1899.gtk_text_view_move_mark_onscreen$MH,"gtk_text_view_move_mark_onscreen");
    }
    /**
     * {@snippet :
     * gboolean gtk_text_view_move_mark_onscreen(GtkTextView* text_view, GtkTextMark* mark);
     * }
     */
    public static int gtk_text_view_move_mark_onscreen(MemorySegment text_view, MemorySegment mark) {
        var mh$ = gtk_text_view_move_mark_onscreen$MH();
        try {
            return (int)mh$.invokeExact(text_view, mark);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_place_cursor_onscreen$MH() {
        return RuntimeHelper.requireNonNull(constants$1899.gtk_text_view_place_cursor_onscreen$MH,"gtk_text_view_place_cursor_onscreen");
    }
    /**
     * {@snippet :
     * gboolean gtk_text_view_place_cursor_onscreen(GtkTextView* text_view);
     * }
     */
    public static int gtk_text_view_place_cursor_onscreen(MemorySegment text_view) {
        var mh$ = gtk_text_view_place_cursor_onscreen$MH();
        try {
            return (int)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_get_visible_rect$MH() {
        return RuntimeHelper.requireNonNull(constants$1899.gtk_text_view_get_visible_rect$MH,"gtk_text_view_get_visible_rect");
    }
    /**
     * {@snippet :
     * void gtk_text_view_get_visible_rect(GtkTextView* text_view, GdkRectangle* visible_rect);
     * }
     */
    public static void gtk_text_view_get_visible_rect(MemorySegment text_view, MemorySegment visible_rect) {
        var mh$ = gtk_text_view_get_visible_rect$MH();
        try {
            mh$.invokeExact(text_view, visible_rect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_set_cursor_visible$MH() {
        return RuntimeHelper.requireNonNull(constants$1899.gtk_text_view_set_cursor_visible$MH,"gtk_text_view_set_cursor_visible");
    }
    /**
     * {@snippet :
     * void gtk_text_view_set_cursor_visible(GtkTextView* text_view, gboolean setting);
     * }
     */
    public static void gtk_text_view_set_cursor_visible(MemorySegment text_view, int setting) {
        var mh$ = gtk_text_view_set_cursor_visible$MH();
        try {
            mh$.invokeExact(text_view, setting);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_get_cursor_visible$MH() {
        return RuntimeHelper.requireNonNull(constants$1899.gtk_text_view_get_cursor_visible$MH,"gtk_text_view_get_cursor_visible");
    }
    /**
     * {@snippet :
     * gboolean gtk_text_view_get_cursor_visible(GtkTextView* text_view);
     * }
     */
    public static int gtk_text_view_get_cursor_visible(MemorySegment text_view) {
        var mh$ = gtk_text_view_get_cursor_visible$MH();
        try {
            return (int)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_reset_cursor_blink$MH() {
        return RuntimeHelper.requireNonNull(constants$1899.gtk_text_view_reset_cursor_blink$MH,"gtk_text_view_reset_cursor_blink");
    }
    /**
     * {@snippet :
     * void gtk_text_view_reset_cursor_blink(GtkTextView* text_view);
     * }
     */
    public static void gtk_text_view_reset_cursor_blink(MemorySegment text_view) {
        var mh$ = gtk_text_view_reset_cursor_blink$MH();
        try {
            mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_get_cursor_locations$MH() {
        return RuntimeHelper.requireNonNull(constants$1900.gtk_text_view_get_cursor_locations$MH,"gtk_text_view_get_cursor_locations");
    }
    /**
     * {@snippet :
     * void gtk_text_view_get_cursor_locations(GtkTextView* text_view, const GtkTextIter* iter, GdkRectangle* strong, GdkRectangle* weak);
     * }
     */
    public static void gtk_text_view_get_cursor_locations(MemorySegment text_view, MemorySegment iter, MemorySegment strong, MemorySegment weak) {
        var mh$ = gtk_text_view_get_cursor_locations$MH();
        try {
            mh$.invokeExact(text_view, iter, strong, weak);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_get_iter_location$MH() {
        return RuntimeHelper.requireNonNull(constants$1900.gtk_text_view_get_iter_location$MH,"gtk_text_view_get_iter_location");
    }
    /**
     * {@snippet :
     * void gtk_text_view_get_iter_location(GtkTextView* text_view, const GtkTextIter* iter, GdkRectangle* location);
     * }
     */
    public static void gtk_text_view_get_iter_location(MemorySegment text_view, MemorySegment iter, MemorySegment location) {
        var mh$ = gtk_text_view_get_iter_location$MH();
        try {
            mh$.invokeExact(text_view, iter, location);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_get_iter_at_location$MH() {
        return RuntimeHelper.requireNonNull(constants$1900.gtk_text_view_get_iter_at_location$MH,"gtk_text_view_get_iter_at_location");
    }
    /**
     * {@snippet :
     * gboolean gtk_text_view_get_iter_at_location(GtkTextView* text_view, GtkTextIter* iter, int x, int y);
     * }
     */
    public static int gtk_text_view_get_iter_at_location(MemorySegment text_view, MemorySegment iter, int x, int y) {
        var mh$ = gtk_text_view_get_iter_at_location$MH();
        try {
            return (int)mh$.invokeExact(text_view, iter, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_get_iter_at_position$MH() {
        return RuntimeHelper.requireNonNull(constants$1900.gtk_text_view_get_iter_at_position$MH,"gtk_text_view_get_iter_at_position");
    }
    /**
     * {@snippet :
     * gboolean gtk_text_view_get_iter_at_position(GtkTextView* text_view, GtkTextIter* iter, int* trailing, int x, int y);
     * }
     */
    public static int gtk_text_view_get_iter_at_position(MemorySegment text_view, MemorySegment iter, MemorySegment trailing, int x, int y) {
        var mh$ = gtk_text_view_get_iter_at_position$MH();
        try {
            return (int)mh$.invokeExact(text_view, iter, trailing, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_get_line_yrange$MH() {
        return RuntimeHelper.requireNonNull(constants$1900.gtk_text_view_get_line_yrange$MH,"gtk_text_view_get_line_yrange");
    }
    /**
     * {@snippet :
     * void gtk_text_view_get_line_yrange(GtkTextView* text_view, const GtkTextIter* iter, int* y, int* height);
     * }
     */
    public static void gtk_text_view_get_line_yrange(MemorySegment text_view, MemorySegment iter, MemorySegment y, MemorySegment height) {
        var mh$ = gtk_text_view_get_line_yrange$MH();
        try {
            mh$.invokeExact(text_view, iter, y, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_get_line_at_y$MH() {
        return RuntimeHelper.requireNonNull(constants$1900.gtk_text_view_get_line_at_y$MH,"gtk_text_view_get_line_at_y");
    }
    /**
     * {@snippet :
     * void gtk_text_view_get_line_at_y(GtkTextView* text_view, GtkTextIter* target_iter, int y, int* line_top);
     * }
     */
    public static void gtk_text_view_get_line_at_y(MemorySegment text_view, MemorySegment target_iter, int y, MemorySegment line_top) {
        var mh$ = gtk_text_view_get_line_at_y$MH();
        try {
            mh$.invokeExact(text_view, target_iter, y, line_top);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_buffer_to_window_coords$MH() {
        return RuntimeHelper.requireNonNull(constants$1901.gtk_text_view_buffer_to_window_coords$MH,"gtk_text_view_buffer_to_window_coords");
    }
    /**
     * {@snippet :
     * void gtk_text_view_buffer_to_window_coords(GtkTextView* text_view, GtkTextWindowType win, int buffer_x, int buffer_y, int* window_x, int* window_y);
     * }
     */
    public static void gtk_text_view_buffer_to_window_coords(MemorySegment text_view, int win, int buffer_x, int buffer_y, MemorySegment window_x, MemorySegment window_y) {
        var mh$ = gtk_text_view_buffer_to_window_coords$MH();
        try {
            mh$.invokeExact(text_view, win, buffer_x, buffer_y, window_x, window_y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_window_to_buffer_coords$MH() {
        return RuntimeHelper.requireNonNull(constants$1901.gtk_text_view_window_to_buffer_coords$MH,"gtk_text_view_window_to_buffer_coords");
    }
    /**
     * {@snippet :
     * void gtk_text_view_window_to_buffer_coords(GtkTextView* text_view, GtkTextWindowType win, int window_x, int window_y, int* buffer_x, int* buffer_y);
     * }
     */
    public static void gtk_text_view_window_to_buffer_coords(MemorySegment text_view, int win, int window_x, int window_y, MemorySegment buffer_x, MemorySegment buffer_y) {
        var mh$ = gtk_text_view_window_to_buffer_coords$MH();
        try {
            mh$.invokeExact(text_view, win, window_x, window_y, buffer_x, buffer_y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_forward_display_line$MH() {
        return RuntimeHelper.requireNonNull(constants$1901.gtk_text_view_forward_display_line$MH,"gtk_text_view_forward_display_line");
    }
    /**
     * {@snippet :
     * gboolean gtk_text_view_forward_display_line(GtkTextView* text_view, GtkTextIter* iter);
     * }
     */
    public static int gtk_text_view_forward_display_line(MemorySegment text_view, MemorySegment iter) {
        var mh$ = gtk_text_view_forward_display_line$MH();
        try {
            return (int)mh$.invokeExact(text_view, iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_backward_display_line$MH() {
        return RuntimeHelper.requireNonNull(constants$1901.gtk_text_view_backward_display_line$MH,"gtk_text_view_backward_display_line");
    }
    /**
     * {@snippet :
     * gboolean gtk_text_view_backward_display_line(GtkTextView* text_view, GtkTextIter* iter);
     * }
     */
    public static int gtk_text_view_backward_display_line(MemorySegment text_view, MemorySegment iter) {
        var mh$ = gtk_text_view_backward_display_line$MH();
        try {
            return (int)mh$.invokeExact(text_view, iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_forward_display_line_end$MH() {
        return RuntimeHelper.requireNonNull(constants$1901.gtk_text_view_forward_display_line_end$MH,"gtk_text_view_forward_display_line_end");
    }
    /**
     * {@snippet :
     * gboolean gtk_text_view_forward_display_line_end(GtkTextView* text_view, GtkTextIter* iter);
     * }
     */
    public static int gtk_text_view_forward_display_line_end(MemorySegment text_view, MemorySegment iter) {
        var mh$ = gtk_text_view_forward_display_line_end$MH();
        try {
            return (int)mh$.invokeExact(text_view, iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_backward_display_line_start$MH() {
        return RuntimeHelper.requireNonNull(constants$1901.gtk_text_view_backward_display_line_start$MH,"gtk_text_view_backward_display_line_start");
    }
    /**
     * {@snippet :
     * gboolean gtk_text_view_backward_display_line_start(GtkTextView* text_view, GtkTextIter* iter);
     * }
     */
    public static int gtk_text_view_backward_display_line_start(MemorySegment text_view, MemorySegment iter) {
        var mh$ = gtk_text_view_backward_display_line_start$MH();
        try {
            return (int)mh$.invokeExact(text_view, iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_starts_display_line$MH() {
        return RuntimeHelper.requireNonNull(constants$1902.gtk_text_view_starts_display_line$MH,"gtk_text_view_starts_display_line");
    }
    /**
     * {@snippet :
     * gboolean gtk_text_view_starts_display_line(GtkTextView* text_view, const GtkTextIter* iter);
     * }
     */
    public static int gtk_text_view_starts_display_line(MemorySegment text_view, MemorySegment iter) {
        var mh$ = gtk_text_view_starts_display_line$MH();
        try {
            return (int)mh$.invokeExact(text_view, iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_move_visually$MH() {
        return RuntimeHelper.requireNonNull(constants$1902.gtk_text_view_move_visually$MH,"gtk_text_view_move_visually");
    }
    /**
     * {@snippet :
     * gboolean gtk_text_view_move_visually(GtkTextView* text_view, GtkTextIter* iter, int count);
     * }
     */
    public static int gtk_text_view_move_visually(MemorySegment text_view, MemorySegment iter, int count) {
        var mh$ = gtk_text_view_move_visually$MH();
        try {
            return (int)mh$.invokeExact(text_view, iter, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_im_context_filter_keypress$MH() {
        return RuntimeHelper.requireNonNull(constants$1902.gtk_text_view_im_context_filter_keypress$MH,"gtk_text_view_im_context_filter_keypress");
    }
    /**
     * {@snippet :
     * gboolean gtk_text_view_im_context_filter_keypress(GtkTextView* text_view, GdkEvent* event);
     * }
     */
    public static int gtk_text_view_im_context_filter_keypress(MemorySegment text_view, MemorySegment event) {
        var mh$ = gtk_text_view_im_context_filter_keypress$MH();
        try {
            return (int)mh$.invokeExact(text_view, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_reset_im_context$MH() {
        return RuntimeHelper.requireNonNull(constants$1902.gtk_text_view_reset_im_context$MH,"gtk_text_view_reset_im_context");
    }
    /**
     * {@snippet :
     * void gtk_text_view_reset_im_context(GtkTextView* text_view);
     * }
     */
    public static void gtk_text_view_reset_im_context(MemorySegment text_view) {
        var mh$ = gtk_text_view_reset_im_context$MH();
        try {
            mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_get_gutter$MH() {
        return RuntimeHelper.requireNonNull(constants$1902.gtk_text_view_get_gutter$MH,"gtk_text_view_get_gutter");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_text_view_get_gutter(GtkTextView* text_view, GtkTextWindowType win);
     * }
     */
    public static MemorySegment gtk_text_view_get_gutter(MemorySegment text_view, int win) {
        var mh$ = gtk_text_view_get_gutter$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(text_view, win);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_set_gutter$MH() {
        return RuntimeHelper.requireNonNull(constants$1902.gtk_text_view_set_gutter$MH,"gtk_text_view_set_gutter");
    }
    /**
     * {@snippet :
     * void gtk_text_view_set_gutter(GtkTextView* text_view, GtkTextWindowType win, GtkWidget* widget);
     * }
     */
    public static void gtk_text_view_set_gutter(MemorySegment text_view, int win, MemorySegment widget) {
        var mh$ = gtk_text_view_set_gutter$MH();
        try {
            mh$.invokeExact(text_view, win, widget);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_add_child_at_anchor$MH() {
        return RuntimeHelper.requireNonNull(constants$1903.gtk_text_view_add_child_at_anchor$MH,"gtk_text_view_add_child_at_anchor");
    }
    /**
     * {@snippet :
     * void gtk_text_view_add_child_at_anchor(GtkTextView* text_view, GtkWidget* child, GtkTextChildAnchor* anchor);
     * }
     */
    public static void gtk_text_view_add_child_at_anchor(MemorySegment text_view, MemorySegment child, MemorySegment anchor) {
        var mh$ = gtk_text_view_add_child_at_anchor$MH();
        try {
            mh$.invokeExact(text_view, child, anchor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_add_overlay$MH() {
        return RuntimeHelper.requireNonNull(constants$1903.gtk_text_view_add_overlay$MH,"gtk_text_view_add_overlay");
    }
    /**
     * {@snippet :
     * void gtk_text_view_add_overlay(GtkTextView* text_view, GtkWidget* child, int xpos, int ypos);
     * }
     */
    public static void gtk_text_view_add_overlay(MemorySegment text_view, MemorySegment child, int xpos, int ypos) {
        var mh$ = gtk_text_view_add_overlay$MH();
        try {
            mh$.invokeExact(text_view, child, xpos, ypos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_move_overlay$MH() {
        return RuntimeHelper.requireNonNull(constants$1903.gtk_text_view_move_overlay$MH,"gtk_text_view_move_overlay");
    }
    /**
     * {@snippet :
     * void gtk_text_view_move_overlay(GtkTextView* text_view, GtkWidget* child, int xpos, int ypos);
     * }
     */
    public static void gtk_text_view_move_overlay(MemorySegment text_view, MemorySegment child, int xpos, int ypos) {
        var mh$ = gtk_text_view_move_overlay$MH();
        try {
            mh$.invokeExact(text_view, child, xpos, ypos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$1903.gtk_text_view_remove$MH,"gtk_text_view_remove");
    }
    /**
     * {@snippet :
     * void gtk_text_view_remove(GtkTextView* text_view, GtkWidget* child);
     * }
     */
    public static void gtk_text_view_remove(MemorySegment text_view, MemorySegment child) {
        var mh$ = gtk_text_view_remove$MH();
        try {
            mh$.invokeExact(text_view, child);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_set_wrap_mode$MH() {
        return RuntimeHelper.requireNonNull(constants$1903.gtk_text_view_set_wrap_mode$MH,"gtk_text_view_set_wrap_mode");
    }
    /**
     * {@snippet :
     * void gtk_text_view_set_wrap_mode(GtkTextView* text_view, GtkWrapMode wrap_mode);
     * }
     */
    public static void gtk_text_view_set_wrap_mode(MemorySegment text_view, int wrap_mode) {
        var mh$ = gtk_text_view_set_wrap_mode$MH();
        try {
            mh$.invokeExact(text_view, wrap_mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_get_wrap_mode$MH() {
        return RuntimeHelper.requireNonNull(constants$1903.gtk_text_view_get_wrap_mode$MH,"gtk_text_view_get_wrap_mode");
    }
    /**
     * {@snippet :
     * GtkWrapMode gtk_text_view_get_wrap_mode(GtkTextView* text_view);
     * }
     */
    public static int gtk_text_view_get_wrap_mode(MemorySegment text_view) {
        var mh$ = gtk_text_view_get_wrap_mode$MH();
        try {
            return (int)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_set_editable$MH() {
        return RuntimeHelper.requireNonNull(constants$1904.gtk_text_view_set_editable$MH,"gtk_text_view_set_editable");
    }
    /**
     * {@snippet :
     * void gtk_text_view_set_editable(GtkTextView* text_view, gboolean setting);
     * }
     */
    public static void gtk_text_view_set_editable(MemorySegment text_view, int setting) {
        var mh$ = gtk_text_view_set_editable$MH();
        try {
            mh$.invokeExact(text_view, setting);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_get_editable$MH() {
        return RuntimeHelper.requireNonNull(constants$1904.gtk_text_view_get_editable$MH,"gtk_text_view_get_editable");
    }
    /**
     * {@snippet :
     * gboolean gtk_text_view_get_editable(GtkTextView* text_view);
     * }
     */
    public static int gtk_text_view_get_editable(MemorySegment text_view) {
        var mh$ = gtk_text_view_get_editable$MH();
        try {
            return (int)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_set_overwrite$MH() {
        return RuntimeHelper.requireNonNull(constants$1904.gtk_text_view_set_overwrite$MH,"gtk_text_view_set_overwrite");
    }
    /**
     * {@snippet :
     * void gtk_text_view_set_overwrite(GtkTextView* text_view, gboolean overwrite);
     * }
     */
    public static void gtk_text_view_set_overwrite(MemorySegment text_view, int overwrite) {
        var mh$ = gtk_text_view_set_overwrite$MH();
        try {
            mh$.invokeExact(text_view, overwrite);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_get_overwrite$MH() {
        return RuntimeHelper.requireNonNull(constants$1904.gtk_text_view_get_overwrite$MH,"gtk_text_view_get_overwrite");
    }
    /**
     * {@snippet :
     * gboolean gtk_text_view_get_overwrite(GtkTextView* text_view);
     * }
     */
    public static int gtk_text_view_get_overwrite(MemorySegment text_view) {
        var mh$ = gtk_text_view_get_overwrite$MH();
        try {
            return (int)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_set_accepts_tab$MH() {
        return RuntimeHelper.requireNonNull(constants$1904.gtk_text_view_set_accepts_tab$MH,"gtk_text_view_set_accepts_tab");
    }
    /**
     * {@snippet :
     * void gtk_text_view_set_accepts_tab(GtkTextView* text_view, gboolean accepts_tab);
     * }
     */
    public static void gtk_text_view_set_accepts_tab(MemorySegment text_view, int accepts_tab) {
        var mh$ = gtk_text_view_set_accepts_tab$MH();
        try {
            mh$.invokeExact(text_view, accepts_tab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_get_accepts_tab$MH() {
        return RuntimeHelper.requireNonNull(constants$1904.gtk_text_view_get_accepts_tab$MH,"gtk_text_view_get_accepts_tab");
    }
    /**
     * {@snippet :
     * gboolean gtk_text_view_get_accepts_tab(GtkTextView* text_view);
     * }
     */
    public static int gtk_text_view_get_accepts_tab(MemorySegment text_view) {
        var mh$ = gtk_text_view_get_accepts_tab$MH();
        try {
            return (int)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_set_pixels_above_lines$MH() {
        return RuntimeHelper.requireNonNull(constants$1905.gtk_text_view_set_pixels_above_lines$MH,"gtk_text_view_set_pixels_above_lines");
    }
    /**
     * {@snippet :
     * void gtk_text_view_set_pixels_above_lines(GtkTextView* text_view, int pixels_above_lines);
     * }
     */
    public static void gtk_text_view_set_pixels_above_lines(MemorySegment text_view, int pixels_above_lines) {
        var mh$ = gtk_text_view_set_pixels_above_lines$MH();
        try {
            mh$.invokeExact(text_view, pixels_above_lines);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_get_pixels_above_lines$MH() {
        return RuntimeHelper.requireNonNull(constants$1905.gtk_text_view_get_pixels_above_lines$MH,"gtk_text_view_get_pixels_above_lines");
    }
    /**
     * {@snippet :
     * int gtk_text_view_get_pixels_above_lines(GtkTextView* text_view);
     * }
     */
    public static int gtk_text_view_get_pixels_above_lines(MemorySegment text_view) {
        var mh$ = gtk_text_view_get_pixels_above_lines$MH();
        try {
            return (int)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_set_pixels_below_lines$MH() {
        return RuntimeHelper.requireNonNull(constants$1905.gtk_text_view_set_pixels_below_lines$MH,"gtk_text_view_set_pixels_below_lines");
    }
    /**
     * {@snippet :
     * void gtk_text_view_set_pixels_below_lines(GtkTextView* text_view, int pixels_below_lines);
     * }
     */
    public static void gtk_text_view_set_pixels_below_lines(MemorySegment text_view, int pixels_below_lines) {
        var mh$ = gtk_text_view_set_pixels_below_lines$MH();
        try {
            mh$.invokeExact(text_view, pixels_below_lines);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_get_pixels_below_lines$MH() {
        return RuntimeHelper.requireNonNull(constants$1905.gtk_text_view_get_pixels_below_lines$MH,"gtk_text_view_get_pixels_below_lines");
    }
    /**
     * {@snippet :
     * int gtk_text_view_get_pixels_below_lines(GtkTextView* text_view);
     * }
     */
    public static int gtk_text_view_get_pixels_below_lines(MemorySegment text_view) {
        var mh$ = gtk_text_view_get_pixels_below_lines$MH();
        try {
            return (int)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_set_pixels_inside_wrap$MH() {
        return RuntimeHelper.requireNonNull(constants$1905.gtk_text_view_set_pixels_inside_wrap$MH,"gtk_text_view_set_pixels_inside_wrap");
    }
    /**
     * {@snippet :
     * void gtk_text_view_set_pixels_inside_wrap(GtkTextView* text_view, int pixels_inside_wrap);
     * }
     */
    public static void gtk_text_view_set_pixels_inside_wrap(MemorySegment text_view, int pixels_inside_wrap) {
        var mh$ = gtk_text_view_set_pixels_inside_wrap$MH();
        try {
            mh$.invokeExact(text_view, pixels_inside_wrap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_get_pixels_inside_wrap$MH() {
        return RuntimeHelper.requireNonNull(constants$1905.gtk_text_view_get_pixels_inside_wrap$MH,"gtk_text_view_get_pixels_inside_wrap");
    }
    /**
     * {@snippet :
     * int gtk_text_view_get_pixels_inside_wrap(GtkTextView* text_view);
     * }
     */
    public static int gtk_text_view_get_pixels_inside_wrap(MemorySegment text_view) {
        var mh$ = gtk_text_view_get_pixels_inside_wrap$MH();
        try {
            return (int)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_set_justification$MH() {
        return RuntimeHelper.requireNonNull(constants$1906.gtk_text_view_set_justification$MH,"gtk_text_view_set_justification");
    }
    /**
     * {@snippet :
     * void gtk_text_view_set_justification(GtkTextView* text_view, GtkJustification justification);
     * }
     */
    public static void gtk_text_view_set_justification(MemorySegment text_view, int justification) {
        var mh$ = gtk_text_view_set_justification$MH();
        try {
            mh$.invokeExact(text_view, justification);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_get_justification$MH() {
        return RuntimeHelper.requireNonNull(constants$1906.gtk_text_view_get_justification$MH,"gtk_text_view_get_justification");
    }
    /**
     * {@snippet :
     * GtkJustification gtk_text_view_get_justification(GtkTextView* text_view);
     * }
     */
    public static int gtk_text_view_get_justification(MemorySegment text_view) {
        var mh$ = gtk_text_view_get_justification$MH();
        try {
            return (int)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_set_left_margin$MH() {
        return RuntimeHelper.requireNonNull(constants$1906.gtk_text_view_set_left_margin$MH,"gtk_text_view_set_left_margin");
    }
    /**
     * {@snippet :
     * void gtk_text_view_set_left_margin(GtkTextView* text_view, int left_margin);
     * }
     */
    public static void gtk_text_view_set_left_margin(MemorySegment text_view, int left_margin) {
        var mh$ = gtk_text_view_set_left_margin$MH();
        try {
            mh$.invokeExact(text_view, left_margin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_get_left_margin$MH() {
        return RuntimeHelper.requireNonNull(constants$1906.gtk_text_view_get_left_margin$MH,"gtk_text_view_get_left_margin");
    }
    /**
     * {@snippet :
     * int gtk_text_view_get_left_margin(GtkTextView* text_view);
     * }
     */
    public static int gtk_text_view_get_left_margin(MemorySegment text_view) {
        var mh$ = gtk_text_view_get_left_margin$MH();
        try {
            return (int)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_set_right_margin$MH() {
        return RuntimeHelper.requireNonNull(constants$1906.gtk_text_view_set_right_margin$MH,"gtk_text_view_set_right_margin");
    }
    /**
     * {@snippet :
     * void gtk_text_view_set_right_margin(GtkTextView* text_view, int right_margin);
     * }
     */
    public static void gtk_text_view_set_right_margin(MemorySegment text_view, int right_margin) {
        var mh$ = gtk_text_view_set_right_margin$MH();
        try {
            mh$.invokeExact(text_view, right_margin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_get_right_margin$MH() {
        return RuntimeHelper.requireNonNull(constants$1906.gtk_text_view_get_right_margin$MH,"gtk_text_view_get_right_margin");
    }
    /**
     * {@snippet :
     * int gtk_text_view_get_right_margin(GtkTextView* text_view);
     * }
     */
    public static int gtk_text_view_get_right_margin(MemorySegment text_view) {
        var mh$ = gtk_text_view_get_right_margin$MH();
        try {
            return (int)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_set_top_margin$MH() {
        return RuntimeHelper.requireNonNull(constants$1907.gtk_text_view_set_top_margin$MH,"gtk_text_view_set_top_margin");
    }
    /**
     * {@snippet :
     * void gtk_text_view_set_top_margin(GtkTextView* text_view, int top_margin);
     * }
     */
    public static void gtk_text_view_set_top_margin(MemorySegment text_view, int top_margin) {
        var mh$ = gtk_text_view_set_top_margin$MH();
        try {
            mh$.invokeExact(text_view, top_margin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_get_top_margin$MH() {
        return RuntimeHelper.requireNonNull(constants$1907.gtk_text_view_get_top_margin$MH,"gtk_text_view_get_top_margin");
    }
    /**
     * {@snippet :
     * int gtk_text_view_get_top_margin(GtkTextView* text_view);
     * }
     */
    public static int gtk_text_view_get_top_margin(MemorySegment text_view) {
        var mh$ = gtk_text_view_get_top_margin$MH();
        try {
            return (int)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_set_bottom_margin$MH() {
        return RuntimeHelper.requireNonNull(constants$1907.gtk_text_view_set_bottom_margin$MH,"gtk_text_view_set_bottom_margin");
    }
    /**
     * {@snippet :
     * void gtk_text_view_set_bottom_margin(GtkTextView* text_view, int bottom_margin);
     * }
     */
    public static void gtk_text_view_set_bottom_margin(MemorySegment text_view, int bottom_margin) {
        var mh$ = gtk_text_view_set_bottom_margin$MH();
        try {
            mh$.invokeExact(text_view, bottom_margin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_get_bottom_margin$MH() {
        return RuntimeHelper.requireNonNull(constants$1907.gtk_text_view_get_bottom_margin$MH,"gtk_text_view_get_bottom_margin");
    }
    /**
     * {@snippet :
     * int gtk_text_view_get_bottom_margin(GtkTextView* text_view);
     * }
     */
    public static int gtk_text_view_get_bottom_margin(MemorySegment text_view) {
        var mh$ = gtk_text_view_get_bottom_margin$MH();
        try {
            return (int)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_set_indent$MH() {
        return RuntimeHelper.requireNonNull(constants$1907.gtk_text_view_set_indent$MH,"gtk_text_view_set_indent");
    }
    /**
     * {@snippet :
     * void gtk_text_view_set_indent(GtkTextView* text_view, int indent);
     * }
     */
    public static void gtk_text_view_set_indent(MemorySegment text_view, int indent) {
        var mh$ = gtk_text_view_set_indent$MH();
        try {
            mh$.invokeExact(text_view, indent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_get_indent$MH() {
        return RuntimeHelper.requireNonNull(constants$1907.gtk_text_view_get_indent$MH,"gtk_text_view_get_indent");
    }
    /**
     * {@snippet :
     * int gtk_text_view_get_indent(GtkTextView* text_view);
     * }
     */
    public static int gtk_text_view_get_indent(MemorySegment text_view) {
        var mh$ = gtk_text_view_get_indent$MH();
        try {
            return (int)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_set_tabs$MH() {
        return RuntimeHelper.requireNonNull(constants$1908.gtk_text_view_set_tabs$MH,"gtk_text_view_set_tabs");
    }
    /**
     * {@snippet :
     * void gtk_text_view_set_tabs(GtkTextView* text_view, PangoTabArray* tabs);
     * }
     */
    public static void gtk_text_view_set_tabs(MemorySegment text_view, MemorySegment tabs) {
        var mh$ = gtk_text_view_set_tabs$MH();
        try {
            mh$.invokeExact(text_view, tabs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_get_tabs$MH() {
        return RuntimeHelper.requireNonNull(constants$1908.gtk_text_view_get_tabs$MH,"gtk_text_view_get_tabs");
    }
    /**
     * {@snippet :
     * PangoTabArray* gtk_text_view_get_tabs(GtkTextView* text_view);
     * }
     */
    public static MemorySegment gtk_text_view_get_tabs(MemorySegment text_view) {
        var mh$ = gtk_text_view_get_tabs$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_set_input_purpose$MH() {
        return RuntimeHelper.requireNonNull(constants$1908.gtk_text_view_set_input_purpose$MH,"gtk_text_view_set_input_purpose");
    }
    /**
     * {@snippet :
     * void gtk_text_view_set_input_purpose(GtkTextView* text_view, GtkInputPurpose purpose);
     * }
     */
    public static void gtk_text_view_set_input_purpose(MemorySegment text_view, int purpose) {
        var mh$ = gtk_text_view_set_input_purpose$MH();
        try {
            mh$.invokeExact(text_view, purpose);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_get_input_purpose$MH() {
        return RuntimeHelper.requireNonNull(constants$1908.gtk_text_view_get_input_purpose$MH,"gtk_text_view_get_input_purpose");
    }
    /**
     * {@snippet :
     * GtkInputPurpose gtk_text_view_get_input_purpose(GtkTextView* text_view);
     * }
     */
    public static int gtk_text_view_get_input_purpose(MemorySegment text_view) {
        var mh$ = gtk_text_view_get_input_purpose$MH();
        try {
            return (int)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_set_input_hints$MH() {
        return RuntimeHelper.requireNonNull(constants$1908.gtk_text_view_set_input_hints$MH,"gtk_text_view_set_input_hints");
    }
    /**
     * {@snippet :
     * void gtk_text_view_set_input_hints(GtkTextView* text_view, GtkInputHints hints);
     * }
     */
    public static void gtk_text_view_set_input_hints(MemorySegment text_view, int hints) {
        var mh$ = gtk_text_view_set_input_hints$MH();
        try {
            mh$.invokeExact(text_view, hints);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_get_input_hints$MH() {
        return RuntimeHelper.requireNonNull(constants$1908.gtk_text_view_get_input_hints$MH,"gtk_text_view_get_input_hints");
    }
    /**
     * {@snippet :
     * GtkInputHints gtk_text_view_get_input_hints(GtkTextView* text_view);
     * }
     */
    public static int gtk_text_view_get_input_hints(MemorySegment text_view) {
        var mh$ = gtk_text_view_get_input_hints$MH();
        try {
            return (int)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_set_monospace$MH() {
        return RuntimeHelper.requireNonNull(constants$1909.gtk_text_view_set_monospace$MH,"gtk_text_view_set_monospace");
    }
    /**
     * {@snippet :
     * void gtk_text_view_set_monospace(GtkTextView* text_view, gboolean monospace);
     * }
     */
    public static void gtk_text_view_set_monospace(MemorySegment text_view, int monospace) {
        var mh$ = gtk_text_view_set_monospace$MH();
        try {
            mh$.invokeExact(text_view, monospace);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_get_monospace$MH() {
        return RuntimeHelper.requireNonNull(constants$1909.gtk_text_view_get_monospace$MH,"gtk_text_view_get_monospace");
    }
    /**
     * {@snippet :
     * gboolean gtk_text_view_get_monospace(GtkTextView* text_view);
     * }
     */
    public static int gtk_text_view_get_monospace(MemorySegment text_view) {
        var mh$ = gtk_text_view_get_monospace$MH();
        try {
            return (int)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_set_extra_menu$MH() {
        return RuntimeHelper.requireNonNull(constants$1909.gtk_text_view_set_extra_menu$MH,"gtk_text_view_set_extra_menu");
    }
    /**
     * {@snippet :
     * void gtk_text_view_set_extra_menu(GtkTextView* text_view, GMenuModel* model);
     * }
     */
    public static void gtk_text_view_set_extra_menu(MemorySegment text_view, MemorySegment model) {
        var mh$ = gtk_text_view_set_extra_menu$MH();
        try {
            mh$.invokeExact(text_view, model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_get_extra_menu$MH() {
        return RuntimeHelper.requireNonNull(constants$1909.gtk_text_view_get_extra_menu$MH,"gtk_text_view_get_extra_menu");
    }
    /**
     * {@snippet :
     * GMenuModel* gtk_text_view_get_extra_menu(GtkTextView* text_view);
     * }
     */
    public static MemorySegment gtk_text_view_get_extra_menu(MemorySegment text_view) {
        var mh$ = gtk_text_view_get_extra_menu$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_get_rtl_context$MH() {
        return RuntimeHelper.requireNonNull(constants$1909.gtk_text_view_get_rtl_context$MH,"gtk_text_view_get_rtl_context");
    }
    /**
     * {@snippet :
     * PangoContext* gtk_text_view_get_rtl_context(GtkTextView* text_view);
     * }
     */
    public static MemorySegment gtk_text_view_get_rtl_context(MemorySegment text_view) {
        var mh$ = gtk_text_view_get_rtl_context$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_text_view_get_ltr_context$MH() {
        return RuntimeHelper.requireNonNull(constants$1909.gtk_text_view_get_ltr_context$MH,"gtk_text_view_get_ltr_context");
    }
    /**
     * {@snippet :
     * PangoContext* gtk_text_view_get_ltr_context(GtkTextView* text_view);
     * }
     */
    public static MemorySegment gtk_text_view_get_ltr_context(MemorySegment text_view) {
        var mh$ = gtk_text_view_get_ltr_context$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_test_accessible_has_role$MH() {
        return RuntimeHelper.requireNonNull(constants$1910.gtk_test_accessible_has_role$MH,"gtk_test_accessible_has_role");
    }
    /**
     * {@snippet :
     * gboolean gtk_test_accessible_has_role(GtkAccessible* accessible, GtkAccessibleRole role);
     * }
     */
    public static int gtk_test_accessible_has_role(MemorySegment accessible, int role) {
        var mh$ = gtk_test_accessible_has_role$MH();
        try {
            return (int)mh$.invokeExact(accessible, role);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_test_accessible_has_property$MH() {
        return RuntimeHelper.requireNonNull(constants$1910.gtk_test_accessible_has_property$MH,"gtk_test_accessible_has_property");
    }
    /**
     * {@snippet :
     * gboolean gtk_test_accessible_has_property(GtkAccessible* accessible, GtkAccessibleProperty property);
     * }
     */
    public static int gtk_test_accessible_has_property(MemorySegment accessible, int property) {
        var mh$ = gtk_test_accessible_has_property$MH();
        try {
            return (int)mh$.invokeExact(accessible, property);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_test_accessible_has_relation$MH() {
        return RuntimeHelper.requireNonNull(constants$1910.gtk_test_accessible_has_relation$MH,"gtk_test_accessible_has_relation");
    }
    /**
     * {@snippet :
     * gboolean gtk_test_accessible_has_relation(GtkAccessible* accessible, GtkAccessibleRelation relation);
     * }
     */
    public static int gtk_test_accessible_has_relation(MemorySegment accessible, int relation) {
        var mh$ = gtk_test_accessible_has_relation$MH();
        try {
            return (int)mh$.invokeExact(accessible, relation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_test_accessible_has_state$MH() {
        return RuntimeHelper.requireNonNull(constants$1910.gtk_test_accessible_has_state$MH,"gtk_test_accessible_has_state");
    }
    /**
     * {@snippet :
     * gboolean gtk_test_accessible_has_state(GtkAccessible* accessible, GtkAccessibleState state);
     * }
     */
    public static int gtk_test_accessible_has_state(MemorySegment accessible, int state) {
        var mh$ = gtk_test_accessible_has_state$MH();
        try {
            return (int)mh$.invokeExact(accessible, state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_test_accessible_check_property$MH() {
        return RuntimeHelper.requireNonNull(constants$1910.gtk_test_accessible_check_property$MH,"gtk_test_accessible_check_property");
    }
    /**
     * {@snippet :
     * char* gtk_test_accessible_check_property(GtkAccessible* accessible, GtkAccessibleProperty property,...);
     * }
     */
    public static MemorySegment gtk_test_accessible_check_property(MemorySegment accessible, int property, Object... x2) {
        var mh$ = gtk_test_accessible_check_property$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(accessible, property, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_test_accessible_check_relation$MH() {
        return RuntimeHelper.requireNonNull(constants$1910.gtk_test_accessible_check_relation$MH,"gtk_test_accessible_check_relation");
    }
    /**
     * {@snippet :
     * char* gtk_test_accessible_check_relation(GtkAccessible* accessible, GtkAccessibleRelation relation,...);
     * }
     */
    public static MemorySegment gtk_test_accessible_check_relation(MemorySegment accessible, int relation, Object... x2) {
        var mh$ = gtk_test_accessible_check_relation$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(accessible, relation, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_test_accessible_check_state$MH() {
        return RuntimeHelper.requireNonNull(constants$1911.gtk_test_accessible_check_state$MH,"gtk_test_accessible_check_state");
    }
    /**
     * {@snippet :
     * char* gtk_test_accessible_check_state(GtkAccessible* accessible, GtkAccessibleState state,...);
     * }
     */
    public static MemorySegment gtk_test_accessible_check_state(MemorySegment accessible, int state, Object... x2) {
        var mh$ = gtk_test_accessible_check_state$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(accessible, state, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_test_accessible_assertion_message_role$MH() {
        return RuntimeHelper.requireNonNull(constants$1911.gtk_test_accessible_assertion_message_role$MH,"gtk_test_accessible_assertion_message_role");
    }
    /**
     * {@snippet :
     * void gtk_test_accessible_assertion_message_role(char* domain, char* file, int line, char* func, char* expr, GtkAccessible* accessible, GtkAccessibleRole expected_role, GtkAccessibleRole actual_role);
     * }
     */
    public static void gtk_test_accessible_assertion_message_role(MemorySegment domain, MemorySegment file, int line, MemorySegment func, MemorySegment expr, MemorySegment accessible, int expected_role, int actual_role) {
        var mh$ = gtk_test_accessible_assertion_message_role$MH();
        try {
            mh$.invokeExact(domain, file, line, func, expr, accessible, expected_role, actual_role);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_test_init$MH() {
        return RuntimeHelper.requireNonNull(constants$1911.gtk_test_init$MH,"gtk_test_init");
    }
    /**
     * {@snippet :
     * void gtk_test_init(int* argcp, char*** argvp,...);
     * }
     */
    public static void gtk_test_init(MemorySegment argcp, MemorySegment argvp, Object... x2) {
        var mh$ = gtk_test_init$MH();
        try {
            mh$.invokeExact(argcp, argvp, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_test_register_all_types$MH() {
        return RuntimeHelper.requireNonNull(constants$1911.gtk_test_register_all_types$MH,"gtk_test_register_all_types");
    }
    /**
     * {@snippet :
     * void gtk_test_register_all_types();
     * }
     */
    public static void gtk_test_register_all_types() {
        var mh$ = gtk_test_register_all_types$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_test_list_all_types$MH() {
        return RuntimeHelper.requireNonNull(constants$1911.gtk_test_list_all_types$MH,"gtk_test_list_all_types");
    }
    /**
     * {@snippet :
     * const GType* gtk_test_list_all_types(guint* n_types);
     * }
     */
    public static MemorySegment gtk_test_list_all_types(MemorySegment n_types) {
        var mh$ = gtk_test_list_all_types$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(n_types);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_test_widget_wait_for_draw$MH() {
        return RuntimeHelper.requireNonNull(constants$1911.gtk_test_widget_wait_for_draw$MH,"gtk_test_widget_wait_for_draw");
    }
    /**
     * {@snippet :
     * void gtk_test_widget_wait_for_draw(GtkWidget* widget);
     * }
     */
    public static void gtk_test_widget_wait_for_draw(MemorySegment widget) {
        var mh$ = gtk_test_widget_wait_for_draw$MH();
        try {
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_row_data_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1912.gtk_tree_row_data_get_type$MH,"gtk_tree_row_data_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_tree_row_data_get_type();
     * }
     */
    public static long gtk_tree_row_data_get_type() {
        var mh$ = gtk_tree_row_data_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_drag_source_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1912.gtk_tree_drag_source_get_type$MH,"gtk_tree_drag_source_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_tree_drag_source_get_type();
     * }
     */
    public static long gtk_tree_drag_source_get_type() {
        var mh$ = gtk_tree_drag_source_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_drag_source_row_draggable$MH() {
        return RuntimeHelper.requireNonNull(constants$1912.gtk_tree_drag_source_row_draggable$MH,"gtk_tree_drag_source_row_draggable");
    }
    /**
     * {@snippet :
     * gboolean gtk_tree_drag_source_row_draggable(GtkTreeDragSource* drag_source, GtkTreePath* path);
     * }
     */
    public static int gtk_tree_drag_source_row_draggable(MemorySegment drag_source, MemorySegment path) {
        var mh$ = gtk_tree_drag_source_row_draggable$MH();
        try {
            return (int)mh$.invokeExact(drag_source, path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_drag_source_drag_data_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$1912.gtk_tree_drag_source_drag_data_delete$MH,"gtk_tree_drag_source_drag_data_delete");
    }
    /**
     * {@snippet :
     * gboolean gtk_tree_drag_source_drag_data_delete(GtkTreeDragSource* drag_source, GtkTreePath* path);
     * }
     */
    public static int gtk_tree_drag_source_drag_data_delete(MemorySegment drag_source, MemorySegment path) {
        var mh$ = gtk_tree_drag_source_drag_data_delete$MH();
        try {
            return (int)mh$.invokeExact(drag_source, path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_drag_source_drag_data_get$MH() {
        return RuntimeHelper.requireNonNull(constants$1912.gtk_tree_drag_source_drag_data_get$MH,"gtk_tree_drag_source_drag_data_get");
    }
    /**
     * {@snippet :
     * GdkContentProvider* gtk_tree_drag_source_drag_data_get(GtkTreeDragSource* drag_source, GtkTreePath* path);
     * }
     */
    public static MemorySegment gtk_tree_drag_source_drag_data_get(MemorySegment drag_source, MemorySegment path) {
        var mh$ = gtk_tree_drag_source_drag_data_get$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(drag_source, path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_drag_dest_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1912.gtk_tree_drag_dest_get_type$MH,"gtk_tree_drag_dest_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_tree_drag_dest_get_type();
     * }
     */
    public static long gtk_tree_drag_dest_get_type() {
        var mh$ = gtk_tree_drag_dest_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_drag_dest_drag_data_received$MH() {
        return RuntimeHelper.requireNonNull(constants$1913.gtk_tree_drag_dest_drag_data_received$MH,"gtk_tree_drag_dest_drag_data_received");
    }
    /**
     * {@snippet :
     * gboolean gtk_tree_drag_dest_drag_data_received(GtkTreeDragDest* drag_dest, GtkTreePath* dest, const GValue* value);
     * }
     */
    public static int gtk_tree_drag_dest_drag_data_received(MemorySegment drag_dest, MemorySegment dest, MemorySegment value) {
        var mh$ = gtk_tree_drag_dest_drag_data_received$MH();
        try {
            return (int)mh$.invokeExact(drag_dest, dest, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_drag_dest_row_drop_possible$MH() {
        return RuntimeHelper.requireNonNull(constants$1913.gtk_tree_drag_dest_row_drop_possible$MH,"gtk_tree_drag_dest_row_drop_possible");
    }
    /**
     * {@snippet :
     * gboolean gtk_tree_drag_dest_row_drop_possible(GtkTreeDragDest* drag_dest, GtkTreePath* dest_path, const GValue* value);
     * }
     */
    public static int gtk_tree_drag_dest_row_drop_possible(MemorySegment drag_dest, MemorySegment dest_path, MemorySegment value) {
        var mh$ = gtk_tree_drag_dest_row_drop_possible$MH();
        try {
            return (int)mh$.invokeExact(drag_dest, dest_path, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_create_row_drag_content$MH() {
        return RuntimeHelper.requireNonNull(constants$1913.gtk_tree_create_row_drag_content$MH,"gtk_tree_create_row_drag_content");
    }
    /**
     * {@snippet :
     * GdkContentProvider* gtk_tree_create_row_drag_content(GtkTreeModel* tree_model, GtkTreePath* path);
     * }
     */
    public static MemorySegment gtk_tree_create_row_drag_content(MemorySegment tree_model, MemorySegment path) {
        var mh$ = gtk_tree_create_row_drag_content$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(tree_model, path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_get_row_drag_data$MH() {
        return RuntimeHelper.requireNonNull(constants$1913.gtk_tree_get_row_drag_data$MH,"gtk_tree_get_row_drag_data");
    }
    /**
     * {@snippet :
     * gboolean gtk_tree_get_row_drag_data(const GValue* value, GtkTreeModel** tree_model, GtkTreePath** path);
     * }
     */
    public static int gtk_tree_get_row_drag_data(MemorySegment value, MemorySegment tree_model, MemorySegment path) {
        var mh$ = gtk_tree_get_row_drag_data$MH();
        try {
            return (int)mh$.invokeExact(value, tree_model, path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_list_model_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1913.gtk_tree_list_model_get_type$MH,"gtk_tree_list_model_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_tree_list_model_get_type();
     * }
     */
    public static long gtk_tree_list_model_get_type() {
        var mh$ = gtk_tree_list_model_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _GtkTreeListModel* GtkTreeListModel_autoptr;
     * }
     */
    public static final OfAddress GtkTreeListModel_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkTreeListModel_listautoptr;
     * }
     */
    public static final OfAddress GtkTreeListModel_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkTreeListModel_slistautoptr;
     * }
     */
    public static final OfAddress GtkTreeListModel_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkTreeListModel_queueautoptr;
     * }
     */
    public static final OfAddress GtkTreeListModel_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct * GtkTreeListModelClass_autoptr;
     * }
     */
    public static final OfAddress GtkTreeListModelClass_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkTreeListModelClass_listautoptr;
     * }
     */
    public static final OfAddress GtkTreeListModelClass_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkTreeListModelClass_slistautoptr;
     * }
     */
    public static final OfAddress GtkTreeListModelClass_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkTreeListModelClass_queueautoptr;
     * }
     */
    public static final OfAddress GtkTreeListModelClass_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle gtk_tree_list_row_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1913.gtk_tree_list_row_get_type$MH,"gtk_tree_list_row_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_tree_list_row_get_type();
     * }
     */
    public static long gtk_tree_list_row_get_type() {
        var mh$ = gtk_tree_list_row_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _GtkTreeListRow* GtkTreeListRow_autoptr;
     * }
     */
    public static final OfAddress GtkTreeListRow_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkTreeListRow_listautoptr;
     * }
     */
    public static final OfAddress GtkTreeListRow_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkTreeListRow_slistautoptr;
     * }
     */
    public static final OfAddress GtkTreeListRow_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkTreeListRow_queueautoptr;
     * }
     */
    public static final OfAddress GtkTreeListRow_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct * GtkTreeListRowClass_autoptr;
     * }
     */
    public static final OfAddress GtkTreeListRowClass_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkTreeListRowClass_listautoptr;
     * }
     */
    public static final OfAddress GtkTreeListRowClass_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkTreeListRowClass_slistautoptr;
     * }
     */
    public static final OfAddress GtkTreeListRowClass_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkTreeListRowClass_queueautoptr;
     * }
     */
    public static final OfAddress GtkTreeListRowClass_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle gtk_tree_list_model_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1914.gtk_tree_list_model_new$MH,"gtk_tree_list_model_new");
    }
    /**
     * {@snippet :
     * GtkTreeListModel* gtk_tree_list_model_new(GListModel* root, gboolean passthrough, gboolean autoexpand, GtkTreeListModelCreateModelFunc create_func, gpointer user_data, GDestroyNotify user_destroy);
     * }
     */
    public static MemorySegment gtk_tree_list_model_new(MemorySegment root, int passthrough, int autoexpand, MemorySegment create_func, MemorySegment user_data, MemorySegment user_destroy) {
        var mh$ = gtk_tree_list_model_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(root, passthrough, autoexpand, create_func, user_data, user_destroy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_list_model_get_model$MH() {
        return RuntimeHelper.requireNonNull(constants$1914.gtk_tree_list_model_get_model$MH,"gtk_tree_list_model_get_model");
    }
    /**
     * {@snippet :
     * GListModel* gtk_tree_list_model_get_model(GtkTreeListModel* self);
     * }
     */
    public static MemorySegment gtk_tree_list_model_get_model(MemorySegment self) {
        var mh$ = gtk_tree_list_model_get_model$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_list_model_get_passthrough$MH() {
        return RuntimeHelper.requireNonNull(constants$1914.gtk_tree_list_model_get_passthrough$MH,"gtk_tree_list_model_get_passthrough");
    }
    /**
     * {@snippet :
     * gboolean gtk_tree_list_model_get_passthrough(GtkTreeListModel* self);
     * }
     */
    public static int gtk_tree_list_model_get_passthrough(MemorySegment self) {
        var mh$ = gtk_tree_list_model_get_passthrough$MH();
        try {
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_list_model_set_autoexpand$MH() {
        return RuntimeHelper.requireNonNull(constants$1914.gtk_tree_list_model_set_autoexpand$MH,"gtk_tree_list_model_set_autoexpand");
    }
    /**
     * {@snippet :
     * void gtk_tree_list_model_set_autoexpand(GtkTreeListModel* self, gboolean autoexpand);
     * }
     */
    public static void gtk_tree_list_model_set_autoexpand(MemorySegment self, int autoexpand) {
        var mh$ = gtk_tree_list_model_set_autoexpand$MH();
        try {
            mh$.invokeExact(self, autoexpand);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_list_model_get_autoexpand$MH() {
        return RuntimeHelper.requireNonNull(constants$1915.gtk_tree_list_model_get_autoexpand$MH,"gtk_tree_list_model_get_autoexpand");
    }
    /**
     * {@snippet :
     * gboolean gtk_tree_list_model_get_autoexpand(GtkTreeListModel* self);
     * }
     */
    public static int gtk_tree_list_model_get_autoexpand(MemorySegment self) {
        var mh$ = gtk_tree_list_model_get_autoexpand$MH();
        try {
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_list_model_get_child_row$MH() {
        return RuntimeHelper.requireNonNull(constants$1915.gtk_tree_list_model_get_child_row$MH,"gtk_tree_list_model_get_child_row");
    }
    /**
     * {@snippet :
     * GtkTreeListRow* gtk_tree_list_model_get_child_row(GtkTreeListModel* self, guint position);
     * }
     */
    public static MemorySegment gtk_tree_list_model_get_child_row(MemorySegment self, int position) {
        var mh$ = gtk_tree_list_model_get_child_row$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(self, position);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_list_model_get_row$MH() {
        return RuntimeHelper.requireNonNull(constants$1915.gtk_tree_list_model_get_row$MH,"gtk_tree_list_model_get_row");
    }
    /**
     * {@snippet :
     * GtkTreeListRow* gtk_tree_list_model_get_row(GtkTreeListModel* self, guint position);
     * }
     */
    public static MemorySegment gtk_tree_list_model_get_row(MemorySegment self, int position) {
        var mh$ = gtk_tree_list_model_get_row$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(self, position);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_list_row_get_item$MH() {
        return RuntimeHelper.requireNonNull(constants$1915.gtk_tree_list_row_get_item$MH,"gtk_tree_list_row_get_item");
    }
    /**
     * {@snippet :
     * gpointer gtk_tree_list_row_get_item(GtkTreeListRow* self);
     * }
     */
    public static MemorySegment gtk_tree_list_row_get_item(MemorySegment self) {
        var mh$ = gtk_tree_list_row_get_item$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_list_row_set_expanded$MH() {
        return RuntimeHelper.requireNonNull(constants$1915.gtk_tree_list_row_set_expanded$MH,"gtk_tree_list_row_set_expanded");
    }
    /**
     * {@snippet :
     * void gtk_tree_list_row_set_expanded(GtkTreeListRow* self, gboolean expanded);
     * }
     */
    public static void gtk_tree_list_row_set_expanded(MemorySegment self, int expanded) {
        var mh$ = gtk_tree_list_row_set_expanded$MH();
        try {
            mh$.invokeExact(self, expanded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_list_row_get_expanded$MH() {
        return RuntimeHelper.requireNonNull(constants$1915.gtk_tree_list_row_get_expanded$MH,"gtk_tree_list_row_get_expanded");
    }
    /**
     * {@snippet :
     * gboolean gtk_tree_list_row_get_expanded(GtkTreeListRow* self);
     * }
     */
    public static int gtk_tree_list_row_get_expanded(MemorySegment self) {
        var mh$ = gtk_tree_list_row_get_expanded$MH();
        try {
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_list_row_is_expandable$MH() {
        return RuntimeHelper.requireNonNull(constants$1916.gtk_tree_list_row_is_expandable$MH,"gtk_tree_list_row_is_expandable");
    }
    /**
     * {@snippet :
     * gboolean gtk_tree_list_row_is_expandable(GtkTreeListRow* self);
     * }
     */
    public static int gtk_tree_list_row_is_expandable(MemorySegment self) {
        var mh$ = gtk_tree_list_row_is_expandable$MH();
        try {
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_list_row_get_position$MH() {
        return RuntimeHelper.requireNonNull(constants$1916.gtk_tree_list_row_get_position$MH,"gtk_tree_list_row_get_position");
    }
    /**
     * {@snippet :
     * guint gtk_tree_list_row_get_position(GtkTreeListRow* self);
     * }
     */
    public static int gtk_tree_list_row_get_position(MemorySegment self) {
        var mh$ = gtk_tree_list_row_get_position$MH();
        try {
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_list_row_get_depth$MH() {
        return RuntimeHelper.requireNonNull(constants$1916.gtk_tree_list_row_get_depth$MH,"gtk_tree_list_row_get_depth");
    }
    /**
     * {@snippet :
     * guint gtk_tree_list_row_get_depth(GtkTreeListRow* self);
     * }
     */
    public static int gtk_tree_list_row_get_depth(MemorySegment self) {
        var mh$ = gtk_tree_list_row_get_depth$MH();
        try {
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_list_row_get_children$MH() {
        return RuntimeHelper.requireNonNull(constants$1916.gtk_tree_list_row_get_children$MH,"gtk_tree_list_row_get_children");
    }
    /**
     * {@snippet :
     * GListModel* gtk_tree_list_row_get_children(GtkTreeListRow* self);
     * }
     */
    public static MemorySegment gtk_tree_list_row_get_children(MemorySegment self) {
        var mh$ = gtk_tree_list_row_get_children$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_list_row_get_parent$MH() {
        return RuntimeHelper.requireNonNull(constants$1916.gtk_tree_list_row_get_parent$MH,"gtk_tree_list_row_get_parent");
    }
    /**
     * {@snippet :
     * GtkTreeListRow* gtk_tree_list_row_get_parent(GtkTreeListRow* self);
     * }
     */
    public static MemorySegment gtk_tree_list_row_get_parent(MemorySegment self) {
        var mh$ = gtk_tree_list_row_get_parent$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_list_row_get_child_row$MH() {
        return RuntimeHelper.requireNonNull(constants$1916.gtk_tree_list_row_get_child_row$MH,"gtk_tree_list_row_get_child_row");
    }
    /**
     * {@snippet :
     * GtkTreeListRow* gtk_tree_list_row_get_child_row(GtkTreeListRow* self, guint position);
     * }
     */
    public static MemorySegment gtk_tree_list_row_get_child_row(MemorySegment self, int position) {
        var mh$ = gtk_tree_list_row_get_child_row$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(self, position);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_expander_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1917.gtk_tree_expander_get_type$MH,"gtk_tree_expander_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_tree_expander_get_type();
     * }
     */
    public static long gtk_tree_expander_get_type() {
        var mh$ = gtk_tree_expander_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _GtkTreeExpander* GtkTreeExpander_autoptr;
     * }
     */
    public static final OfAddress GtkTreeExpander_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkTreeExpander_listautoptr;
     * }
     */
    public static final OfAddress GtkTreeExpander_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkTreeExpander_slistautoptr;
     * }
     */
    public static final OfAddress GtkTreeExpander_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkTreeExpander_queueautoptr;
     * }
     */
    public static final OfAddress GtkTreeExpander_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct * GtkTreeExpanderClass_autoptr;
     * }
     */
    public static final OfAddress GtkTreeExpanderClass_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkTreeExpanderClass_listautoptr;
     * }
     */
    public static final OfAddress GtkTreeExpanderClass_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkTreeExpanderClass_slistautoptr;
     * }
     */
    public static final OfAddress GtkTreeExpanderClass_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkTreeExpanderClass_queueautoptr;
     * }
     */
    public static final OfAddress GtkTreeExpanderClass_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle gtk_tree_expander_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1917.gtk_tree_expander_new$MH,"gtk_tree_expander_new");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_tree_expander_new();
     * }
     */
    public static MemorySegment gtk_tree_expander_new() {
        var mh$ = gtk_tree_expander_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_expander_get_child$MH() {
        return RuntimeHelper.requireNonNull(constants$1917.gtk_tree_expander_get_child$MH,"gtk_tree_expander_get_child");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_tree_expander_get_child(GtkTreeExpander* self);
     * }
     */
    public static MemorySegment gtk_tree_expander_get_child(MemorySegment self) {
        var mh$ = gtk_tree_expander_get_child$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_expander_set_child$MH() {
        return RuntimeHelper.requireNonNull(constants$1917.gtk_tree_expander_set_child$MH,"gtk_tree_expander_set_child");
    }
    /**
     * {@snippet :
     * void gtk_tree_expander_set_child(GtkTreeExpander* self, GtkWidget* child);
     * }
     */
    public static void gtk_tree_expander_set_child(MemorySegment self, MemorySegment child) {
        var mh$ = gtk_tree_expander_set_child$MH();
        try {
            mh$.invokeExact(self, child);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_expander_get_item$MH() {
        return RuntimeHelper.requireNonNull(constants$1917.gtk_tree_expander_get_item$MH,"gtk_tree_expander_get_item");
    }
    /**
     * {@snippet :
     * gpointer gtk_tree_expander_get_item(GtkTreeExpander* self);
     * }
     */
    public static MemorySegment gtk_tree_expander_get_item(MemorySegment self) {
        var mh$ = gtk_tree_expander_get_item$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_expander_get_list_row$MH() {
        return RuntimeHelper.requireNonNull(constants$1917.gtk_tree_expander_get_list_row$MH,"gtk_tree_expander_get_list_row");
    }
    /**
     * {@snippet :
     * GtkTreeListRow* gtk_tree_expander_get_list_row(GtkTreeExpander* self);
     * }
     */
    public static MemorySegment gtk_tree_expander_get_list_row(MemorySegment self) {
        var mh$ = gtk_tree_expander_get_list_row$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_expander_set_list_row$MH() {
        return RuntimeHelper.requireNonNull(constants$1918.gtk_tree_expander_set_list_row$MH,"gtk_tree_expander_set_list_row");
    }
    /**
     * {@snippet :
     * void gtk_tree_expander_set_list_row(GtkTreeExpander* self, GtkTreeListRow* list_row);
     * }
     */
    public static void gtk_tree_expander_set_list_row(MemorySegment self, MemorySegment list_row) {
        var mh$ = gtk_tree_expander_set_list_row$MH();
        try {
            mh$.invokeExact(self, list_row);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_expander_get_indent_for_icon$MH() {
        return RuntimeHelper.requireNonNull(constants$1918.gtk_tree_expander_get_indent_for_icon$MH,"gtk_tree_expander_get_indent_for_icon");
    }
    /**
     * {@snippet :
     * gboolean gtk_tree_expander_get_indent_for_icon(GtkTreeExpander* self);
     * }
     */
    public static int gtk_tree_expander_get_indent_for_icon(MemorySegment self) {
        var mh$ = gtk_tree_expander_get_indent_for_icon$MH();
        try {
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_expander_set_indent_for_icon$MH() {
        return RuntimeHelper.requireNonNull(constants$1918.gtk_tree_expander_set_indent_for_icon$MH,"gtk_tree_expander_set_indent_for_icon");
    }
    /**
     * {@snippet :
     * void gtk_tree_expander_set_indent_for_icon(GtkTreeExpander* self, gboolean indent_for_icon);
     * }
     */
    public static void gtk_tree_expander_set_indent_for_icon(MemorySegment self, int indent_for_icon) {
        var mh$ = gtk_tree_expander_set_indent_for_icon$MH();
        try {
            mh$.invokeExact(self, indent_for_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_list_row_sorter_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1918.gtk_tree_list_row_sorter_get_type$MH,"gtk_tree_list_row_sorter_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_tree_list_row_sorter_get_type();
     * }
     */
    public static long gtk_tree_list_row_sorter_get_type() {
        var mh$ = gtk_tree_list_row_sorter_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _GtkTreeListRowSorter* GtkTreeListRowSorter_autoptr;
     * }
     */
    public static final OfAddress GtkTreeListRowSorter_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkTreeListRowSorter_listautoptr;
     * }
     */
    public static final OfAddress GtkTreeListRowSorter_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkTreeListRowSorter_slistautoptr;
     * }
     */
    public static final OfAddress GtkTreeListRowSorter_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkTreeListRowSorter_queueautoptr;
     * }
     */
    public static final OfAddress GtkTreeListRowSorter_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct * GtkTreeListRowSorterClass_autoptr;
     * }
     */
    public static final OfAddress GtkTreeListRowSorterClass_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkTreeListRowSorterClass_listautoptr;
     * }
     */
    public static final OfAddress GtkTreeListRowSorterClass_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkTreeListRowSorterClass_slistautoptr;
     * }
     */
    public static final OfAddress GtkTreeListRowSorterClass_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkTreeListRowSorterClass_queueautoptr;
     * }
     */
    public static final OfAddress GtkTreeListRowSorterClass_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle gtk_tree_list_row_sorter_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1918.gtk_tree_list_row_sorter_new$MH,"gtk_tree_list_row_sorter_new");
    }
    /**
     * {@snippet :
     * GtkTreeListRowSorter* gtk_tree_list_row_sorter_new(GtkSorter* sorter);
     * }
     */
    public static MemorySegment gtk_tree_list_row_sorter_new(MemorySegment sorter) {
        var mh$ = gtk_tree_list_row_sorter_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(sorter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_list_row_sorter_get_sorter$MH() {
        return RuntimeHelper.requireNonNull(constants$1918.gtk_tree_list_row_sorter_get_sorter$MH,"gtk_tree_list_row_sorter_get_sorter");
    }
    /**
     * {@snippet :
     * GtkSorter* gtk_tree_list_row_sorter_get_sorter(GtkTreeListRowSorter* self);
     * }
     */
    public static MemorySegment gtk_tree_list_row_sorter_get_sorter(MemorySegment self) {
        var mh$ = gtk_tree_list_row_sorter_get_sorter$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_list_row_sorter_set_sorter$MH() {
        return RuntimeHelper.requireNonNull(constants$1919.gtk_tree_list_row_sorter_set_sorter$MH,"gtk_tree_list_row_sorter_set_sorter");
    }
    /**
     * {@snippet :
     * void gtk_tree_list_row_sorter_set_sorter(GtkTreeListRowSorter* self, GtkSorter* sorter);
     * }
     */
    public static void gtk_tree_list_row_sorter_set_sorter(MemorySegment self, MemorySegment sorter) {
        var mh$ = gtk_tree_list_row_sorter_set_sorter$MH();
        try {
            mh$.invokeExact(self, sorter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_model_sort_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1919.gtk_tree_model_sort_get_type$MH,"gtk_tree_model_sort_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_tree_model_sort_get_type();
     * }
     */
    public static long gtk_tree_model_sort_get_type() {
        var mh$ = gtk_tree_model_sort_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_model_sort_new_with_model$MH() {
        return RuntimeHelper.requireNonNull(constants$1919.gtk_tree_model_sort_new_with_model$MH,"gtk_tree_model_sort_new_with_model");
    }
    /**
     * {@snippet :
     * GtkTreeModel* gtk_tree_model_sort_new_with_model(GtkTreeModel* child_model);
     * }
     */
    public static MemorySegment gtk_tree_model_sort_new_with_model(MemorySegment child_model) {
        var mh$ = gtk_tree_model_sort_new_with_model$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(child_model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_model_sort_get_model$MH() {
        return RuntimeHelper.requireNonNull(constants$1919.gtk_tree_model_sort_get_model$MH,"gtk_tree_model_sort_get_model");
    }
    /**
     * {@snippet :
     * GtkTreeModel* gtk_tree_model_sort_get_model(GtkTreeModelSort* tree_model);
     * }
     */
    public static MemorySegment gtk_tree_model_sort_get_model(MemorySegment tree_model) {
        var mh$ = gtk_tree_model_sort_get_model$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(tree_model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_model_sort_convert_child_path_to_path$MH() {
        return RuntimeHelper.requireNonNull(constants$1919.gtk_tree_model_sort_convert_child_path_to_path$MH,"gtk_tree_model_sort_convert_child_path_to_path");
    }
    /**
     * {@snippet :
     * GtkTreePath* gtk_tree_model_sort_convert_child_path_to_path(GtkTreeModelSort* tree_model_sort, GtkTreePath* child_path);
     * }
     */
    public static MemorySegment gtk_tree_model_sort_convert_child_path_to_path(MemorySegment tree_model_sort, MemorySegment child_path) {
        var mh$ = gtk_tree_model_sort_convert_child_path_to_path$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(tree_model_sort, child_path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_model_sort_convert_child_iter_to_iter$MH() {
        return RuntimeHelper.requireNonNull(constants$1919.gtk_tree_model_sort_convert_child_iter_to_iter$MH,"gtk_tree_model_sort_convert_child_iter_to_iter");
    }
    /**
     * {@snippet :
     * gboolean gtk_tree_model_sort_convert_child_iter_to_iter(GtkTreeModelSort* tree_model_sort, GtkTreeIter* sort_iter, GtkTreeIter* child_iter);
     * }
     */
    public static int gtk_tree_model_sort_convert_child_iter_to_iter(MemorySegment tree_model_sort, MemorySegment sort_iter, MemorySegment child_iter) {
        var mh$ = gtk_tree_model_sort_convert_child_iter_to_iter$MH();
        try {
            return (int)mh$.invokeExact(tree_model_sort, sort_iter, child_iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_model_sort_convert_path_to_child_path$MH() {
        return RuntimeHelper.requireNonNull(constants$1920.gtk_tree_model_sort_convert_path_to_child_path$MH,"gtk_tree_model_sort_convert_path_to_child_path");
    }
    /**
     * {@snippet :
     * GtkTreePath* gtk_tree_model_sort_convert_path_to_child_path(GtkTreeModelSort* tree_model_sort, GtkTreePath* sorted_path);
     * }
     */
    public static MemorySegment gtk_tree_model_sort_convert_path_to_child_path(MemorySegment tree_model_sort, MemorySegment sorted_path) {
        var mh$ = gtk_tree_model_sort_convert_path_to_child_path$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(tree_model_sort, sorted_path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_model_sort_convert_iter_to_child_iter$MH() {
        return RuntimeHelper.requireNonNull(constants$1920.gtk_tree_model_sort_convert_iter_to_child_iter$MH,"gtk_tree_model_sort_convert_iter_to_child_iter");
    }
    /**
     * {@snippet :
     * void gtk_tree_model_sort_convert_iter_to_child_iter(GtkTreeModelSort* tree_model_sort, GtkTreeIter* child_iter, GtkTreeIter* sorted_iter);
     * }
     */
    public static void gtk_tree_model_sort_convert_iter_to_child_iter(MemorySegment tree_model_sort, MemorySegment child_iter, MemorySegment sorted_iter) {
        var mh$ = gtk_tree_model_sort_convert_iter_to_child_iter$MH();
        try {
            mh$.invokeExact(tree_model_sort, child_iter, sorted_iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_model_sort_reset_default_sort_func$MH() {
        return RuntimeHelper.requireNonNull(constants$1920.gtk_tree_model_sort_reset_default_sort_func$MH,"gtk_tree_model_sort_reset_default_sort_func");
    }
    /**
     * {@snippet :
     * void gtk_tree_model_sort_reset_default_sort_func(GtkTreeModelSort* tree_model_sort);
     * }
     */
    public static void gtk_tree_model_sort_reset_default_sort_func(MemorySegment tree_model_sort) {
        var mh$ = gtk_tree_model_sort_reset_default_sort_func$MH();
        try {
            mh$.invokeExact(tree_model_sort);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_model_sort_clear_cache$MH() {
        return RuntimeHelper.requireNonNull(constants$1920.gtk_tree_model_sort_clear_cache$MH,"gtk_tree_model_sort_clear_cache");
    }
    /**
     * {@snippet :
     * void gtk_tree_model_sort_clear_cache(GtkTreeModelSort* tree_model_sort);
     * }
     */
    public static void gtk_tree_model_sort_clear_cache(MemorySegment tree_model_sort) {
        var mh$ = gtk_tree_model_sort_clear_cache$MH();
        try {
            mh$.invokeExact(tree_model_sort);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_model_sort_iter_is_valid$MH() {
        return RuntimeHelper.requireNonNull(constants$1920.gtk_tree_model_sort_iter_is_valid$MH,"gtk_tree_model_sort_iter_is_valid");
    }
    /**
     * {@snippet :
     * gboolean gtk_tree_model_sort_iter_is_valid(GtkTreeModelSort* tree_model_sort, GtkTreeIter* iter);
     * }
     */
    public static int gtk_tree_model_sort_iter_is_valid(MemorySegment tree_model_sort, MemorySegment iter) {
        var mh$ = gtk_tree_model_sort_iter_is_valid$MH();
        try {
            return (int)mh$.invokeExact(tree_model_sort, iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_selection_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1921.gtk_tree_selection_get_type$MH,"gtk_tree_selection_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_tree_selection_get_type();
     * }
     */
    public static long gtk_tree_selection_get_type() {
        var mh$ = gtk_tree_selection_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_selection_set_mode$MH() {
        return RuntimeHelper.requireNonNull(constants$1921.gtk_tree_selection_set_mode$MH,"gtk_tree_selection_set_mode");
    }
    /**
     * {@snippet :
     * void gtk_tree_selection_set_mode(GtkTreeSelection* selection, GtkSelectionMode type);
     * }
     */
    public static void gtk_tree_selection_set_mode(MemorySegment selection, int type) {
        var mh$ = gtk_tree_selection_set_mode$MH();
        try {
            mh$.invokeExact(selection, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_selection_get_mode$MH() {
        return RuntimeHelper.requireNonNull(constants$1921.gtk_tree_selection_get_mode$MH,"gtk_tree_selection_get_mode");
    }
    /**
     * {@snippet :
     * GtkSelectionMode gtk_tree_selection_get_mode(GtkTreeSelection* selection);
     * }
     */
    public static int gtk_tree_selection_get_mode(MemorySegment selection) {
        var mh$ = gtk_tree_selection_get_mode$MH();
        try {
            return (int)mh$.invokeExact(selection);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_selection_set_select_function$MH() {
        return RuntimeHelper.requireNonNull(constants$1922.gtk_tree_selection_set_select_function$MH,"gtk_tree_selection_set_select_function");
    }
    /**
     * {@snippet :
     * void gtk_tree_selection_set_select_function(GtkTreeSelection* selection, GtkTreeSelectionFunc func, gpointer data, GDestroyNotify destroy);
     * }
     */
    public static void gtk_tree_selection_set_select_function(MemorySegment selection, MemorySegment func, MemorySegment data, MemorySegment destroy) {
        var mh$ = gtk_tree_selection_set_select_function$MH();
        try {
            mh$.invokeExact(selection, func, data, destroy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_selection_get_user_data$MH() {
        return RuntimeHelper.requireNonNull(constants$1922.gtk_tree_selection_get_user_data$MH,"gtk_tree_selection_get_user_data");
    }
    /**
     * {@snippet :
     * gpointer gtk_tree_selection_get_user_data(GtkTreeSelection* selection);
     * }
     */
    public static MemorySegment gtk_tree_selection_get_user_data(MemorySegment selection) {
        var mh$ = gtk_tree_selection_get_user_data$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(selection);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_selection_get_tree_view$MH() {
        return RuntimeHelper.requireNonNull(constants$1922.gtk_tree_selection_get_tree_view$MH,"gtk_tree_selection_get_tree_view");
    }
    /**
     * {@snippet :
     * GtkTreeView* gtk_tree_selection_get_tree_view(GtkTreeSelection* selection);
     * }
     */
    public static MemorySegment gtk_tree_selection_get_tree_view(MemorySegment selection) {
        var mh$ = gtk_tree_selection_get_tree_view$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(selection);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_selection_get_select_function$MH() {
        return RuntimeHelper.requireNonNull(constants$1922.gtk_tree_selection_get_select_function$MH,"gtk_tree_selection_get_select_function");
    }
    /**
     * {@snippet :
     * GtkTreeSelectionFunc gtk_tree_selection_get_select_function(GtkTreeSelection* selection);
     * }
     */
    public static MemorySegment gtk_tree_selection_get_select_function(MemorySegment selection) {
        var mh$ = gtk_tree_selection_get_select_function$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(selection);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_selection_get_selected$MH() {
        return RuntimeHelper.requireNonNull(constants$1922.gtk_tree_selection_get_selected$MH,"gtk_tree_selection_get_selected");
    }
    /**
     * {@snippet :
     * gboolean gtk_tree_selection_get_selected(GtkTreeSelection* selection, GtkTreeModel** model, GtkTreeIter* iter);
     * }
     */
    public static int gtk_tree_selection_get_selected(MemorySegment selection, MemorySegment model, MemorySegment iter) {
        var mh$ = gtk_tree_selection_get_selected$MH();
        try {
            return (int)mh$.invokeExact(selection, model, iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_selection_get_selected_rows$MH() {
        return RuntimeHelper.requireNonNull(constants$1922.gtk_tree_selection_get_selected_rows$MH,"gtk_tree_selection_get_selected_rows");
    }
    /**
     * {@snippet :
     * GList* gtk_tree_selection_get_selected_rows(GtkTreeSelection* selection, GtkTreeModel** model);
     * }
     */
    public static MemorySegment gtk_tree_selection_get_selected_rows(MemorySegment selection, MemorySegment model) {
        var mh$ = gtk_tree_selection_get_selected_rows$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(selection, model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_selection_count_selected_rows$MH() {
        return RuntimeHelper.requireNonNull(constants$1923.gtk_tree_selection_count_selected_rows$MH,"gtk_tree_selection_count_selected_rows");
    }
    /**
     * {@snippet :
     * int gtk_tree_selection_count_selected_rows(GtkTreeSelection* selection);
     * }
     */
    public static int gtk_tree_selection_count_selected_rows(MemorySegment selection) {
        var mh$ = gtk_tree_selection_count_selected_rows$MH();
        try {
            return (int)mh$.invokeExact(selection);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_selection_selected_foreach$MH() {
        return RuntimeHelper.requireNonNull(constants$1923.gtk_tree_selection_selected_foreach$MH,"gtk_tree_selection_selected_foreach");
    }
    /**
     * {@snippet :
     * void gtk_tree_selection_selected_foreach(GtkTreeSelection* selection, GtkTreeSelectionForeachFunc func, gpointer data);
     * }
     */
    public static void gtk_tree_selection_selected_foreach(MemorySegment selection, MemorySegment func, MemorySegment data) {
        var mh$ = gtk_tree_selection_selected_foreach$MH();
        try {
            mh$.invokeExact(selection, func, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_selection_select_path$MH() {
        return RuntimeHelper.requireNonNull(constants$1923.gtk_tree_selection_select_path$MH,"gtk_tree_selection_select_path");
    }
    /**
     * {@snippet :
     * void gtk_tree_selection_select_path(GtkTreeSelection* selection, GtkTreePath* path);
     * }
     */
    public static void gtk_tree_selection_select_path(MemorySegment selection, MemorySegment path) {
        var mh$ = gtk_tree_selection_select_path$MH();
        try {
            mh$.invokeExact(selection, path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_selection_unselect_path$MH() {
        return RuntimeHelper.requireNonNull(constants$1923.gtk_tree_selection_unselect_path$MH,"gtk_tree_selection_unselect_path");
    }
    /**
     * {@snippet :
     * void gtk_tree_selection_unselect_path(GtkTreeSelection* selection, GtkTreePath* path);
     * }
     */
    public static void gtk_tree_selection_unselect_path(MemorySegment selection, MemorySegment path) {
        var mh$ = gtk_tree_selection_unselect_path$MH();
        try {
            mh$.invokeExact(selection, path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_selection_select_iter$MH() {
        return RuntimeHelper.requireNonNull(constants$1923.gtk_tree_selection_select_iter$MH,"gtk_tree_selection_select_iter");
    }
    /**
     * {@snippet :
     * void gtk_tree_selection_select_iter(GtkTreeSelection* selection, GtkTreeIter* iter);
     * }
     */
    public static void gtk_tree_selection_select_iter(MemorySegment selection, MemorySegment iter) {
        var mh$ = gtk_tree_selection_select_iter$MH();
        try {
            mh$.invokeExact(selection, iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_selection_unselect_iter$MH() {
        return RuntimeHelper.requireNonNull(constants$1923.gtk_tree_selection_unselect_iter$MH,"gtk_tree_selection_unselect_iter");
    }
    /**
     * {@snippet :
     * void gtk_tree_selection_unselect_iter(GtkTreeSelection* selection, GtkTreeIter* iter);
     * }
     */
    public static void gtk_tree_selection_unselect_iter(MemorySegment selection, MemorySegment iter) {
        var mh$ = gtk_tree_selection_unselect_iter$MH();
        try {
            mh$.invokeExact(selection, iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_selection_path_is_selected$MH() {
        return RuntimeHelper.requireNonNull(constants$1924.gtk_tree_selection_path_is_selected$MH,"gtk_tree_selection_path_is_selected");
    }
    /**
     * {@snippet :
     * gboolean gtk_tree_selection_path_is_selected(GtkTreeSelection* selection, GtkTreePath* path);
     * }
     */
    public static int gtk_tree_selection_path_is_selected(MemorySegment selection, MemorySegment path) {
        var mh$ = gtk_tree_selection_path_is_selected$MH();
        try {
            return (int)mh$.invokeExact(selection, path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_selection_iter_is_selected$MH() {
        return RuntimeHelper.requireNonNull(constants$1924.gtk_tree_selection_iter_is_selected$MH,"gtk_tree_selection_iter_is_selected");
    }
    /**
     * {@snippet :
     * gboolean gtk_tree_selection_iter_is_selected(GtkTreeSelection* selection, GtkTreeIter* iter);
     * }
     */
    public static int gtk_tree_selection_iter_is_selected(MemorySegment selection, MemorySegment iter) {
        var mh$ = gtk_tree_selection_iter_is_selected$MH();
        try {
            return (int)mh$.invokeExact(selection, iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_selection_select_all$MH() {
        return RuntimeHelper.requireNonNull(constants$1924.gtk_tree_selection_select_all$MH,"gtk_tree_selection_select_all");
    }
    /**
     * {@snippet :
     * void gtk_tree_selection_select_all(GtkTreeSelection* selection);
     * }
     */
    public static void gtk_tree_selection_select_all(MemorySegment selection) {
        var mh$ = gtk_tree_selection_select_all$MH();
        try {
            mh$.invokeExact(selection);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_selection_unselect_all$MH() {
        return RuntimeHelper.requireNonNull(constants$1924.gtk_tree_selection_unselect_all$MH,"gtk_tree_selection_unselect_all");
    }
    /**
     * {@snippet :
     * void gtk_tree_selection_unselect_all(GtkTreeSelection* selection);
     * }
     */
    public static void gtk_tree_selection_unselect_all(MemorySegment selection) {
        var mh$ = gtk_tree_selection_unselect_all$MH();
        try {
            mh$.invokeExact(selection);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_selection_select_range$MH() {
        return RuntimeHelper.requireNonNull(constants$1924.gtk_tree_selection_select_range$MH,"gtk_tree_selection_select_range");
    }
    /**
     * {@snippet :
     * void gtk_tree_selection_select_range(GtkTreeSelection* selection, GtkTreePath* start_path, GtkTreePath* end_path);
     * }
     */
    public static void gtk_tree_selection_select_range(MemorySegment selection, MemorySegment start_path, MemorySegment end_path) {
        var mh$ = gtk_tree_selection_select_range$MH();
        try {
            mh$.invokeExact(selection, start_path, end_path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_selection_unselect_range$MH() {
        return RuntimeHelper.requireNonNull(constants$1924.gtk_tree_selection_unselect_range$MH,"gtk_tree_selection_unselect_range");
    }
    /**
     * {@snippet :
     * void gtk_tree_selection_unselect_range(GtkTreeSelection* selection, GtkTreePath* start_path, GtkTreePath* end_path);
     * }
     */
    public static void gtk_tree_selection_unselect_range(MemorySegment selection, MemorySegment start_path, MemorySegment end_path) {
        var mh$ = gtk_tree_selection_unselect_range$MH();
        try {
            mh$.invokeExact(selection, start_path, end_path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_store_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1925.gtk_tree_store_get_type$MH,"gtk_tree_store_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_tree_store_get_type();
     * }
     */
    public static long gtk_tree_store_get_type() {
        var mh$ = gtk_tree_store_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_store_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1925.gtk_tree_store_new$MH,"gtk_tree_store_new");
    }
    /**
     * {@snippet :
     * GtkTreeStore* gtk_tree_store_new(int n_columns,...);
     * }
     */
    public static MemorySegment gtk_tree_store_new(int n_columns, Object... x1) {
        var mh$ = gtk_tree_store_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(n_columns, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_store_newv$MH() {
        return RuntimeHelper.requireNonNull(constants$1925.gtk_tree_store_newv$MH,"gtk_tree_store_newv");
    }
    /**
     * {@snippet :
     * GtkTreeStore* gtk_tree_store_newv(int n_columns, GType* types);
     * }
     */
    public static MemorySegment gtk_tree_store_newv(int n_columns, MemorySegment types) {
        var mh$ = gtk_tree_store_newv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(n_columns, types);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_store_set_column_types$MH() {
        return RuntimeHelper.requireNonNull(constants$1925.gtk_tree_store_set_column_types$MH,"gtk_tree_store_set_column_types");
    }
    /**
     * {@snippet :
     * void gtk_tree_store_set_column_types(GtkTreeStore* tree_store, int n_columns, GType* types);
     * }
     */
    public static void gtk_tree_store_set_column_types(MemorySegment tree_store, int n_columns, MemorySegment types) {
        var mh$ = gtk_tree_store_set_column_types$MH();
        try {
            mh$.invokeExact(tree_store, n_columns, types);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_store_set_value$MH() {
        return RuntimeHelper.requireNonNull(constants$1925.gtk_tree_store_set_value$MH,"gtk_tree_store_set_value");
    }
    /**
     * {@snippet :
     * void gtk_tree_store_set_value(GtkTreeStore* tree_store, GtkTreeIter* iter, int column, GValue* value);
     * }
     */
    public static void gtk_tree_store_set_value(MemorySegment tree_store, MemorySegment iter, int column, MemorySegment value) {
        var mh$ = gtk_tree_store_set_value$MH();
        try {
            mh$.invokeExact(tree_store, iter, column, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_store_set$MH() {
        return RuntimeHelper.requireNonNull(constants$1925.gtk_tree_store_set$MH,"gtk_tree_store_set");
    }
    /**
     * {@snippet :
     * void gtk_tree_store_set(GtkTreeStore* tree_store, GtkTreeIter* iter,...);
     * }
     */
    public static void gtk_tree_store_set(MemorySegment tree_store, MemorySegment iter, Object... x2) {
        var mh$ = gtk_tree_store_set$MH();
        try {
            mh$.invokeExact(tree_store, iter, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_store_set_valuesv$MH() {
        return RuntimeHelper.requireNonNull(constants$1926.gtk_tree_store_set_valuesv$MH,"gtk_tree_store_set_valuesv");
    }
    /**
     * {@snippet :
     * void gtk_tree_store_set_valuesv(GtkTreeStore* tree_store, GtkTreeIter* iter, int* columns, GValue* values, int n_values);
     * }
     */
    public static void gtk_tree_store_set_valuesv(MemorySegment tree_store, MemorySegment iter, MemorySegment columns, MemorySegment values, int n_values) {
        var mh$ = gtk_tree_store_set_valuesv$MH();
        try {
            mh$.invokeExact(tree_store, iter, columns, values, n_values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_store_set_valist$MH() {
        return RuntimeHelper.requireNonNull(constants$1926.gtk_tree_store_set_valist$MH,"gtk_tree_store_set_valist");
    }
    /**
     * {@snippet :
     * void gtk_tree_store_set_valist(GtkTreeStore* tree_store, GtkTreeIter* iter, va_list var_args);
     * }
     */
    public static void gtk_tree_store_set_valist(MemorySegment tree_store, MemorySegment iter, MemorySegment var_args) {
        var mh$ = gtk_tree_store_set_valist$MH();
        try {
            mh$.invokeExact(tree_store, iter, var_args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_store_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$1926.gtk_tree_store_remove$MH,"gtk_tree_store_remove");
    }
    /**
     * {@snippet :
     * gboolean gtk_tree_store_remove(GtkTreeStore* tree_store, GtkTreeIter* iter);
     * }
     */
    public static int gtk_tree_store_remove(MemorySegment tree_store, MemorySegment iter) {
        var mh$ = gtk_tree_store_remove$MH();
        try {
            return (int)mh$.invokeExact(tree_store, iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_store_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$1926.gtk_tree_store_insert$MH,"gtk_tree_store_insert");
    }
    /**
     * {@snippet :
     * void gtk_tree_store_insert(GtkTreeStore* tree_store, GtkTreeIter* iter, GtkTreeIter* parent, int position);
     * }
     */
    public static void gtk_tree_store_insert(MemorySegment tree_store, MemorySegment iter, MemorySegment parent, int position) {
        var mh$ = gtk_tree_store_insert$MH();
        try {
            mh$.invokeExact(tree_store, iter, parent, position);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_store_insert_before$MH() {
        return RuntimeHelper.requireNonNull(constants$1926.gtk_tree_store_insert_before$MH,"gtk_tree_store_insert_before");
    }
    /**
     * {@snippet :
     * void gtk_tree_store_insert_before(GtkTreeStore* tree_store, GtkTreeIter* iter, GtkTreeIter* parent, GtkTreeIter* sibling);
     * }
     */
    public static void gtk_tree_store_insert_before(MemorySegment tree_store, MemorySegment iter, MemorySegment parent, MemorySegment sibling) {
        var mh$ = gtk_tree_store_insert_before$MH();
        try {
            mh$.invokeExact(tree_store, iter, parent, sibling);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_store_insert_after$MH() {
        return RuntimeHelper.requireNonNull(constants$1926.gtk_tree_store_insert_after$MH,"gtk_tree_store_insert_after");
    }
    /**
     * {@snippet :
     * void gtk_tree_store_insert_after(GtkTreeStore* tree_store, GtkTreeIter* iter, GtkTreeIter* parent, GtkTreeIter* sibling);
     * }
     */
    public static void gtk_tree_store_insert_after(MemorySegment tree_store, MemorySegment iter, MemorySegment parent, MemorySegment sibling) {
        var mh$ = gtk_tree_store_insert_after$MH();
        try {
            mh$.invokeExact(tree_store, iter, parent, sibling);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_store_insert_with_values$MH() {
        return RuntimeHelper.requireNonNull(constants$1927.gtk_tree_store_insert_with_values$MH,"gtk_tree_store_insert_with_values");
    }
    /**
     * {@snippet :
     * void gtk_tree_store_insert_with_values(GtkTreeStore* tree_store, GtkTreeIter* iter, GtkTreeIter* parent, int position,...);
     * }
     */
    public static void gtk_tree_store_insert_with_values(MemorySegment tree_store, MemorySegment iter, MemorySegment parent, int position, Object... x4) {
        var mh$ = gtk_tree_store_insert_with_values$MH();
        try {
            mh$.invokeExact(tree_store, iter, parent, position, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_store_insert_with_valuesv$MH() {
        return RuntimeHelper.requireNonNull(constants$1927.gtk_tree_store_insert_with_valuesv$MH,"gtk_tree_store_insert_with_valuesv");
    }
    /**
     * {@snippet :
     * void gtk_tree_store_insert_with_valuesv(GtkTreeStore* tree_store, GtkTreeIter* iter, GtkTreeIter* parent, int position, int* columns, GValue* values, int n_values);
     * }
     */
    public static void gtk_tree_store_insert_with_valuesv(MemorySegment tree_store, MemorySegment iter, MemorySegment parent, int position, MemorySegment columns, MemorySegment values, int n_values) {
        var mh$ = gtk_tree_store_insert_with_valuesv$MH();
        try {
            mh$.invokeExact(tree_store, iter, parent, position, columns, values, n_values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_store_prepend$MH() {
        return RuntimeHelper.requireNonNull(constants$1927.gtk_tree_store_prepend$MH,"gtk_tree_store_prepend");
    }
    /**
     * {@snippet :
     * void gtk_tree_store_prepend(GtkTreeStore* tree_store, GtkTreeIter* iter, GtkTreeIter* parent);
     * }
     */
    public static void gtk_tree_store_prepend(MemorySegment tree_store, MemorySegment iter, MemorySegment parent) {
        var mh$ = gtk_tree_store_prepend$MH();
        try {
            mh$.invokeExact(tree_store, iter, parent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_store_append$MH() {
        return RuntimeHelper.requireNonNull(constants$1927.gtk_tree_store_append$MH,"gtk_tree_store_append");
    }
    /**
     * {@snippet :
     * void gtk_tree_store_append(GtkTreeStore* tree_store, GtkTreeIter* iter, GtkTreeIter* parent);
     * }
     */
    public static void gtk_tree_store_append(MemorySegment tree_store, MemorySegment iter, MemorySegment parent) {
        var mh$ = gtk_tree_store_append$MH();
        try {
            mh$.invokeExact(tree_store, iter, parent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_store_is_ancestor$MH() {
        return RuntimeHelper.requireNonNull(constants$1927.gtk_tree_store_is_ancestor$MH,"gtk_tree_store_is_ancestor");
    }
    /**
     * {@snippet :
     * gboolean gtk_tree_store_is_ancestor(GtkTreeStore* tree_store, GtkTreeIter* iter, GtkTreeIter* descendant);
     * }
     */
    public static int gtk_tree_store_is_ancestor(MemorySegment tree_store, MemorySegment iter, MemorySegment descendant) {
        var mh$ = gtk_tree_store_is_ancestor$MH();
        try {
            return (int)mh$.invokeExact(tree_store, iter, descendant);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_store_iter_depth$MH() {
        return RuntimeHelper.requireNonNull(constants$1927.gtk_tree_store_iter_depth$MH,"gtk_tree_store_iter_depth");
    }
    /**
     * {@snippet :
     * int gtk_tree_store_iter_depth(GtkTreeStore* tree_store, GtkTreeIter* iter);
     * }
     */
    public static int gtk_tree_store_iter_depth(MemorySegment tree_store, MemorySegment iter) {
        var mh$ = gtk_tree_store_iter_depth$MH();
        try {
            return (int)mh$.invokeExact(tree_store, iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_store_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$1928.gtk_tree_store_clear$MH,"gtk_tree_store_clear");
    }
    /**
     * {@snippet :
     * void gtk_tree_store_clear(GtkTreeStore* tree_store);
     * }
     */
    public static void gtk_tree_store_clear(MemorySegment tree_store) {
        var mh$ = gtk_tree_store_clear$MH();
        try {
            mh$.invokeExact(tree_store);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_store_iter_is_valid$MH() {
        return RuntimeHelper.requireNonNull(constants$1928.gtk_tree_store_iter_is_valid$MH,"gtk_tree_store_iter_is_valid");
    }
    /**
     * {@snippet :
     * gboolean gtk_tree_store_iter_is_valid(GtkTreeStore* tree_store, GtkTreeIter* iter);
     * }
     */
    public static int gtk_tree_store_iter_is_valid(MemorySegment tree_store, MemorySegment iter) {
        var mh$ = gtk_tree_store_iter_is_valid$MH();
        try {
            return (int)mh$.invokeExact(tree_store, iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_store_reorder$MH() {
        return RuntimeHelper.requireNonNull(constants$1928.gtk_tree_store_reorder$MH,"gtk_tree_store_reorder");
    }
    /**
     * {@snippet :
     * void gtk_tree_store_reorder(GtkTreeStore* tree_store, GtkTreeIter* parent, int* new_order);
     * }
     */
    public static void gtk_tree_store_reorder(MemorySegment tree_store, MemorySegment parent, MemorySegment new_order) {
        var mh$ = gtk_tree_store_reorder$MH();
        try {
            mh$.invokeExact(tree_store, parent, new_order);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_store_swap$MH() {
        return RuntimeHelper.requireNonNull(constants$1928.gtk_tree_store_swap$MH,"gtk_tree_store_swap");
    }
    /**
     * {@snippet :
     * void gtk_tree_store_swap(GtkTreeStore* tree_store, GtkTreeIter* a, GtkTreeIter* b);
     * }
     */
    public static void gtk_tree_store_swap(MemorySegment tree_store, MemorySegment a, MemorySegment b) {
        var mh$ = gtk_tree_store_swap$MH();
        try {
            mh$.invokeExact(tree_store, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_store_move_before$MH() {
        return RuntimeHelper.requireNonNull(constants$1928.gtk_tree_store_move_before$MH,"gtk_tree_store_move_before");
    }
    /**
     * {@snippet :
     * void gtk_tree_store_move_before(GtkTreeStore* tree_store, GtkTreeIter* iter, GtkTreeIter* position);
     * }
     */
    public static void gtk_tree_store_move_before(MemorySegment tree_store, MemorySegment iter, MemorySegment position) {
        var mh$ = gtk_tree_store_move_before$MH();
        try {
            mh$.invokeExact(tree_store, iter, position);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tree_store_move_after$MH() {
        return RuntimeHelper.requireNonNull(constants$1928.gtk_tree_store_move_after$MH,"gtk_tree_store_move_after");
    }
    /**
     * {@snippet :
     * void gtk_tree_store_move_after(GtkTreeStore* tree_store, GtkTreeIter* iter, GtkTreeIter* position);
     * }
     */
    public static void gtk_tree_store_move_after(MemorySegment tree_store, MemorySegment iter, MemorySegment position) {
        var mh$ = gtk_tree_store_move_after$MH();
        try {
            mh$.invokeExact(tree_store, iter, position);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_get_major_version$MH() {
        return RuntimeHelper.requireNonNull(constants$1929.gtk_get_major_version$MH,"gtk_get_major_version");
    }
    /**
     * {@snippet :
     * guint gtk_get_major_version();
     * }
     */
    public static int gtk_get_major_version() {
        var mh$ = gtk_get_major_version$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_get_minor_version$MH() {
        return RuntimeHelper.requireNonNull(constants$1929.gtk_get_minor_version$MH,"gtk_get_minor_version");
    }
    /**
     * {@snippet :
     * guint gtk_get_minor_version();
     * }
     */
    public static int gtk_get_minor_version() {
        var mh$ = gtk_get_minor_version$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_get_micro_version$MH() {
        return RuntimeHelper.requireNonNull(constants$1929.gtk_get_micro_version$MH,"gtk_get_micro_version");
    }
    /**
     * {@snippet :
     * guint gtk_get_micro_version();
     * }
     */
    public static int gtk_get_micro_version() {
        var mh$ = gtk_get_micro_version$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_get_binary_age$MH() {
        return RuntimeHelper.requireNonNull(constants$1929.gtk_get_binary_age$MH,"gtk_get_binary_age");
    }
    /**
     * {@snippet :
     * guint gtk_get_binary_age();
     * }
     */
    public static int gtk_get_binary_age() {
        var mh$ = gtk_get_binary_age$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_get_interface_age$MH() {
        return RuntimeHelper.requireNonNull(constants$1929.gtk_get_interface_age$MH,"gtk_get_interface_age");
    }
    /**
     * {@snippet :
     * guint gtk_get_interface_age();
     * }
     */
    public static int gtk_get_interface_age() {
        var mh$ = gtk_get_interface_age$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_check_version$MH() {
        return RuntimeHelper.requireNonNull(constants$1929.gtk_check_version$MH,"gtk_check_version");
    }
    /**
     * {@snippet :
     * char* gtk_check_version(guint required_major, guint required_minor, guint required_micro);
     * }
     */
    public static MemorySegment gtk_check_version(int required_major, int required_minor, int required_micro) {
        var mh$ = gtk_check_version$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(required_major, required_minor, required_micro);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_video_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1930.gtk_video_get_type$MH,"gtk_video_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_video_get_type();
     * }
     */
    public static long gtk_video_get_type() {
        var mh$ = gtk_video_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _GtkVideo* GtkVideo_autoptr;
     * }
     */
    public static final OfAddress GtkVideo_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkVideo_listautoptr;
     * }
     */
    public static final OfAddress GtkVideo_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkVideo_slistautoptr;
     * }
     */
    public static final OfAddress GtkVideo_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkVideo_queueautoptr;
     * }
     */
    public static final OfAddress GtkVideo_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct * GtkVideoClass_autoptr;
     * }
     */
    public static final OfAddress GtkVideoClass_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkVideoClass_listautoptr;
     * }
     */
    public static final OfAddress GtkVideoClass_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkVideoClass_slistautoptr;
     * }
     */
    public static final OfAddress GtkVideoClass_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkVideoClass_queueautoptr;
     * }
     */
    public static final OfAddress GtkVideoClass_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle gtk_video_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1930.gtk_video_new$MH,"gtk_video_new");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_video_new();
     * }
     */
    public static MemorySegment gtk_video_new() {
        var mh$ = gtk_video_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_video_new_for_media_stream$MH() {
        return RuntimeHelper.requireNonNull(constants$1930.gtk_video_new_for_media_stream$MH,"gtk_video_new_for_media_stream");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_video_new_for_media_stream(GtkMediaStream* stream);
     * }
     */
    public static MemorySegment gtk_video_new_for_media_stream(MemorySegment stream) {
        var mh$ = gtk_video_new_for_media_stream$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_video_new_for_file$MH() {
        return RuntimeHelper.requireNonNull(constants$1930.gtk_video_new_for_file$MH,"gtk_video_new_for_file");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_video_new_for_file(GFile* file);
     * }
     */
    public static MemorySegment gtk_video_new_for_file(MemorySegment file) {
        var mh$ = gtk_video_new_for_file$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(file);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_video_new_for_filename$MH() {
        return RuntimeHelper.requireNonNull(constants$1930.gtk_video_new_for_filename$MH,"gtk_video_new_for_filename");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_video_new_for_filename(char* filename);
     * }
     */
    public static MemorySegment gtk_video_new_for_filename(MemorySegment filename) {
        var mh$ = gtk_video_new_for_filename$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_video_new_for_resource$MH() {
        return RuntimeHelper.requireNonNull(constants$1930.gtk_video_new_for_resource$MH,"gtk_video_new_for_resource");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_video_new_for_resource(char* resource_path);
     * }
     */
    public static MemorySegment gtk_video_new_for_resource(MemorySegment resource_path) {
        var mh$ = gtk_video_new_for_resource$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(resource_path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_video_get_media_stream$MH() {
        return RuntimeHelper.requireNonNull(constants$1931.gtk_video_get_media_stream$MH,"gtk_video_get_media_stream");
    }
    /**
     * {@snippet :
     * GtkMediaStream* gtk_video_get_media_stream(GtkVideo* self);
     * }
     */
    public static MemorySegment gtk_video_get_media_stream(MemorySegment self) {
        var mh$ = gtk_video_get_media_stream$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_video_set_media_stream$MH() {
        return RuntimeHelper.requireNonNull(constants$1931.gtk_video_set_media_stream$MH,"gtk_video_set_media_stream");
    }
    /**
     * {@snippet :
     * void gtk_video_set_media_stream(GtkVideo* self, GtkMediaStream* stream);
     * }
     */
    public static void gtk_video_set_media_stream(MemorySegment self, MemorySegment stream) {
        var mh$ = gtk_video_set_media_stream$MH();
        try {
            mh$.invokeExact(self, stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_video_get_file$MH() {
        return RuntimeHelper.requireNonNull(constants$1931.gtk_video_get_file$MH,"gtk_video_get_file");
    }
    /**
     * {@snippet :
     * GFile* gtk_video_get_file(GtkVideo* self);
     * }
     */
    public static MemorySegment gtk_video_get_file(MemorySegment self) {
        var mh$ = gtk_video_get_file$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_video_set_file$MH() {
        return RuntimeHelper.requireNonNull(constants$1931.gtk_video_set_file$MH,"gtk_video_set_file");
    }
    /**
     * {@snippet :
     * void gtk_video_set_file(GtkVideo* self, GFile* file);
     * }
     */
    public static void gtk_video_set_file(MemorySegment self, MemorySegment file) {
        var mh$ = gtk_video_set_file$MH();
        try {
            mh$.invokeExact(self, file);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_video_set_filename$MH() {
        return RuntimeHelper.requireNonNull(constants$1931.gtk_video_set_filename$MH,"gtk_video_set_filename");
    }
    /**
     * {@snippet :
     * void gtk_video_set_filename(GtkVideo* self, char* filename);
     * }
     */
    public static void gtk_video_set_filename(MemorySegment self, MemorySegment filename) {
        var mh$ = gtk_video_set_filename$MH();
        try {
            mh$.invokeExact(self, filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_video_set_resource$MH() {
        return RuntimeHelper.requireNonNull(constants$1931.gtk_video_set_resource$MH,"gtk_video_set_resource");
    }
    /**
     * {@snippet :
     * void gtk_video_set_resource(GtkVideo* self, char* resource_path);
     * }
     */
    public static void gtk_video_set_resource(MemorySegment self, MemorySegment resource_path) {
        var mh$ = gtk_video_set_resource$MH();
        try {
            mh$.invokeExact(self, resource_path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_video_get_autoplay$MH() {
        return RuntimeHelper.requireNonNull(constants$1932.gtk_video_get_autoplay$MH,"gtk_video_get_autoplay");
    }
    /**
     * {@snippet :
     * gboolean gtk_video_get_autoplay(GtkVideo* self);
     * }
     */
    public static int gtk_video_get_autoplay(MemorySegment self) {
        var mh$ = gtk_video_get_autoplay$MH();
        try {
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_video_set_autoplay$MH() {
        return RuntimeHelper.requireNonNull(constants$1932.gtk_video_set_autoplay$MH,"gtk_video_set_autoplay");
    }
    /**
     * {@snippet :
     * void gtk_video_set_autoplay(GtkVideo* self, gboolean autoplay);
     * }
     */
    public static void gtk_video_set_autoplay(MemorySegment self, int autoplay) {
        var mh$ = gtk_video_set_autoplay$MH();
        try {
            mh$.invokeExact(self, autoplay);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_video_get_loop$MH() {
        return RuntimeHelper.requireNonNull(constants$1932.gtk_video_get_loop$MH,"gtk_video_get_loop");
    }
    /**
     * {@snippet :
     * gboolean gtk_video_get_loop(GtkVideo* self);
     * }
     */
    public static int gtk_video_get_loop(MemorySegment self) {
        var mh$ = gtk_video_get_loop$MH();
        try {
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_video_set_loop$MH() {
        return RuntimeHelper.requireNonNull(constants$1932.gtk_video_set_loop$MH,"gtk_video_set_loop");
    }
    /**
     * {@snippet :
     * void gtk_video_set_loop(GtkVideo* self, gboolean loop);
     * }
     */
    public static void gtk_video_set_loop(MemorySegment self, int loop) {
        var mh$ = gtk_video_set_loop$MH();
        try {
            mh$.invokeExact(self, loop);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_viewport_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1932.gtk_viewport_get_type$MH,"gtk_viewport_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_viewport_get_type();
     * }
     */
    public static long gtk_viewport_get_type() {
        var mh$ = gtk_viewport_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_viewport_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1932.gtk_viewport_new$MH,"gtk_viewport_new");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_viewport_new(GtkAdjustment* hadjustment, GtkAdjustment* vadjustment);
     * }
     */
    public static MemorySegment gtk_viewport_new(MemorySegment hadjustment, MemorySegment vadjustment) {
        var mh$ = gtk_viewport_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hadjustment, vadjustment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_viewport_get_scroll_to_focus$MH() {
        return RuntimeHelper.requireNonNull(constants$1933.gtk_viewport_get_scroll_to_focus$MH,"gtk_viewport_get_scroll_to_focus");
    }
    /**
     * {@snippet :
     * gboolean gtk_viewport_get_scroll_to_focus(GtkViewport* viewport);
     * }
     */
    public static int gtk_viewport_get_scroll_to_focus(MemorySegment viewport) {
        var mh$ = gtk_viewport_get_scroll_to_focus$MH();
        try {
            return (int)mh$.invokeExact(viewport);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_viewport_set_scroll_to_focus$MH() {
        return RuntimeHelper.requireNonNull(constants$1933.gtk_viewport_set_scroll_to_focus$MH,"gtk_viewport_set_scroll_to_focus");
    }
    /**
     * {@snippet :
     * void gtk_viewport_set_scroll_to_focus(GtkViewport* viewport, gboolean scroll_to_focus);
     * }
     */
    public static void gtk_viewport_set_scroll_to_focus(MemorySegment viewport, int scroll_to_focus) {
        var mh$ = gtk_viewport_set_scroll_to_focus$MH();
        try {
            mh$.invokeExact(viewport, scroll_to_focus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_viewport_set_child$MH() {
        return RuntimeHelper.requireNonNull(constants$1933.gtk_viewport_set_child$MH,"gtk_viewport_set_child");
    }
    /**
     * {@snippet :
     * void gtk_viewport_set_child(GtkViewport* viewport, GtkWidget* child);
     * }
     */
    public static void gtk_viewport_set_child(MemorySegment viewport, MemorySegment child) {
        var mh$ = gtk_viewport_set_child$MH();
        try {
            mh$.invokeExact(viewport, child);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_viewport_get_child$MH() {
        return RuntimeHelper.requireNonNull(constants$1933.gtk_viewport_get_child$MH,"gtk_viewport_get_child");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_viewport_get_child(GtkViewport* viewport);
     * }
     */
    public static MemorySegment gtk_viewport_get_child(MemorySegment viewport) {
        var mh$ = gtk_viewport_get_child$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(viewport);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_volume_button_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1933.gtk_volume_button_get_type$MH,"gtk_volume_button_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_volume_button_get_type();
     * }
     */
    public static long gtk_volume_button_get_type() {
        var mh$ = gtk_volume_button_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_volume_button_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1933.gtk_volume_button_new$MH,"gtk_volume_button_new");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_volume_button_new();
     * }
     */
    public static MemorySegment gtk_volume_button_new() {
        var mh$ = gtk_volume_button_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_paintable_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1934.gtk_widget_paintable_get_type$MH,"gtk_widget_paintable_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_widget_paintable_get_type();
     * }
     */
    public static long gtk_widget_paintable_get_type() {
        var mh$ = gtk_widget_paintable_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _GtkWidgetPaintable* GtkWidgetPaintable_autoptr;
     * }
     */
    public static final OfAddress GtkWidgetPaintable_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkWidgetPaintable_listautoptr;
     * }
     */
    public static final OfAddress GtkWidgetPaintable_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkWidgetPaintable_slistautoptr;
     * }
     */
    public static final OfAddress GtkWidgetPaintable_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkWidgetPaintable_queueautoptr;
     * }
     */
    public static final OfAddress GtkWidgetPaintable_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct * GtkWidgetPaintableClass_autoptr;
     * }
     */
    public static final OfAddress GtkWidgetPaintableClass_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkWidgetPaintableClass_listautoptr;
     * }
     */
    public static final OfAddress GtkWidgetPaintableClass_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkWidgetPaintableClass_slistautoptr;
     * }
     */
    public static final OfAddress GtkWidgetPaintableClass_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkWidgetPaintableClass_queueautoptr;
     * }
     */
    public static final OfAddress GtkWidgetPaintableClass_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle gtk_widget_paintable_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1934.gtk_widget_paintable_new$MH,"gtk_widget_paintable_new");
    }
    /**
     * {@snippet :
     * GdkPaintable* gtk_widget_paintable_new(GtkWidget* widget);
     * }
     */
    public static MemorySegment gtk_widget_paintable_new(MemorySegment widget) {
        var mh$ = gtk_widget_paintable_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_paintable_get_widget$MH() {
        return RuntimeHelper.requireNonNull(constants$1934.gtk_widget_paintable_get_widget$MH,"gtk_widget_paintable_get_widget");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_widget_paintable_get_widget(GtkWidgetPaintable* self);
     * }
     */
    public static MemorySegment gtk_widget_paintable_get_widget(MemorySegment self) {
        var mh$ = gtk_widget_paintable_get_widget$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_paintable_set_widget$MH() {
        return RuntimeHelper.requireNonNull(constants$1934.gtk_widget_paintable_set_widget$MH,"gtk_widget_paintable_set_widget");
    }
    /**
     * {@snippet :
     * void gtk_widget_paintable_set_widget(GtkWidgetPaintable* self, GtkWidget* widget);
     * }
     */
    public static void gtk_widget_paintable_set_widget(MemorySegment self, MemorySegment widget) {
        var mh$ = gtk_widget_paintable_set_widget$MH();
        try {
            mh$.invokeExact(self, widget);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_window_controls_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1934.gtk_window_controls_get_type$MH,"gtk_window_controls_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_window_controls_get_type();
     * }
     */
    public static long gtk_window_controls_get_type() {
        var mh$ = gtk_window_controls_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _GtkWindowControls* GtkWindowControls_autoptr;
     * }
     */
    public static final OfAddress GtkWindowControls_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkWindowControls_listautoptr;
     * }
     */
    public static final OfAddress GtkWindowControls_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkWindowControls_slistautoptr;
     * }
     */
    public static final OfAddress GtkWindowControls_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkWindowControls_queueautoptr;
     * }
     */
    public static final OfAddress GtkWindowControls_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct * GtkWindowControlsClass_autoptr;
     * }
     */
    public static final OfAddress GtkWindowControlsClass_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkWindowControlsClass_listautoptr;
     * }
     */
    public static final OfAddress GtkWindowControlsClass_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkWindowControlsClass_slistautoptr;
     * }
     */
    public static final OfAddress GtkWindowControlsClass_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkWindowControlsClass_queueautoptr;
     * }
     */
    public static final OfAddress GtkWindowControlsClass_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle gtk_window_controls_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1934.gtk_window_controls_new$MH,"gtk_window_controls_new");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_window_controls_new(GtkPackType side);
     * }
     */
    public static MemorySegment gtk_window_controls_new(int side) {
        var mh$ = gtk_window_controls_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(side);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_window_controls_get_side$MH() {
        return RuntimeHelper.requireNonNull(constants$1935.gtk_window_controls_get_side$MH,"gtk_window_controls_get_side");
    }
    /**
     * {@snippet :
     * GtkPackType gtk_window_controls_get_side(GtkWindowControls* self);
     * }
     */
    public static int gtk_window_controls_get_side(MemorySegment self) {
        var mh$ = gtk_window_controls_get_side$MH();
        try {
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_window_controls_set_side$MH() {
        return RuntimeHelper.requireNonNull(constants$1935.gtk_window_controls_set_side$MH,"gtk_window_controls_set_side");
    }
    /**
     * {@snippet :
     * void gtk_window_controls_set_side(GtkWindowControls* self, GtkPackType side);
     * }
     */
    public static void gtk_window_controls_set_side(MemorySegment self, int side) {
        var mh$ = gtk_window_controls_set_side$MH();
        try {
            mh$.invokeExact(self, side);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_window_controls_get_decoration_layout$MH() {
        return RuntimeHelper.requireNonNull(constants$1935.gtk_window_controls_get_decoration_layout$MH,"gtk_window_controls_get_decoration_layout");
    }
    /**
     * {@snippet :
     * char* gtk_window_controls_get_decoration_layout(GtkWindowControls* self);
     * }
     */
    public static MemorySegment gtk_window_controls_get_decoration_layout(MemorySegment self) {
        var mh$ = gtk_window_controls_get_decoration_layout$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_window_controls_set_decoration_layout$MH() {
        return RuntimeHelper.requireNonNull(constants$1935.gtk_window_controls_set_decoration_layout$MH,"gtk_window_controls_set_decoration_layout");
    }
    /**
     * {@snippet :
     * void gtk_window_controls_set_decoration_layout(GtkWindowControls* self, char* layout);
     * }
     */
    public static void gtk_window_controls_set_decoration_layout(MemorySegment self, MemorySegment layout) {
        var mh$ = gtk_window_controls_set_decoration_layout$MH();
        try {
            mh$.invokeExact(self, layout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_window_controls_get_empty$MH() {
        return RuntimeHelper.requireNonNull(constants$1935.gtk_window_controls_get_empty$MH,"gtk_window_controls_get_empty");
    }
    /**
     * {@snippet :
     * gboolean gtk_window_controls_get_empty(GtkWindowControls* self);
     * }
     */
    public static int gtk_window_controls_get_empty(MemorySegment self) {
        var mh$ = gtk_window_controls_get_empty$MH();
        try {
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_window_group_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1935.gtk_window_group_get_type$MH,"gtk_window_group_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_window_group_get_type();
     * }
     */
    public static long gtk_window_group_get_type() {
        var mh$ = gtk_window_group_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_window_group_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1936.gtk_window_group_new$MH,"gtk_window_group_new");
    }
    /**
     * {@snippet :
     * GtkWindowGroup* gtk_window_group_new();
     * }
     */
    public static MemorySegment gtk_window_group_new() {
        var mh$ = gtk_window_group_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_window_group_add_window$MH() {
        return RuntimeHelper.requireNonNull(constants$1936.gtk_window_group_add_window$MH,"gtk_window_group_add_window");
    }
    /**
     * {@snippet :
     * void gtk_window_group_add_window(GtkWindowGroup* window_group, GtkWindow* window);
     * }
     */
    public static void gtk_window_group_add_window(MemorySegment window_group, MemorySegment window) {
        var mh$ = gtk_window_group_add_window$MH();
        try {
            mh$.invokeExact(window_group, window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_window_group_remove_window$MH() {
        return RuntimeHelper.requireNonNull(constants$1936.gtk_window_group_remove_window$MH,"gtk_window_group_remove_window");
    }
    /**
     * {@snippet :
     * void gtk_window_group_remove_window(GtkWindowGroup* window_group, GtkWindow* window);
     * }
     */
    public static void gtk_window_group_remove_window(MemorySegment window_group, MemorySegment window) {
        var mh$ = gtk_window_group_remove_window$MH();
        try {
            mh$.invokeExact(window_group, window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_window_group_list_windows$MH() {
        return RuntimeHelper.requireNonNull(constants$1936.gtk_window_group_list_windows$MH,"gtk_window_group_list_windows");
    }
    /**
     * {@snippet :
     * GList* gtk_window_group_list_windows(GtkWindowGroup* window_group);
     * }
     */
    public static MemorySegment gtk_window_group_list_windows(MemorySegment window_group) {
        var mh$ = gtk_window_group_list_windows$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(window_group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_window_handle_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1936.gtk_window_handle_get_type$MH,"gtk_window_handle_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_window_handle_get_type();
     * }
     */
    public static long gtk_window_handle_get_type() {
        var mh$ = gtk_window_handle_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _GtkWindowHandle* GtkWindowHandle_autoptr;
     * }
     */
    public static final OfAddress GtkWindowHandle_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkWindowHandle_listautoptr;
     * }
     */
    public static final OfAddress GtkWindowHandle_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkWindowHandle_slistautoptr;
     * }
     */
    public static final OfAddress GtkWindowHandle_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkWindowHandle_queueautoptr;
     * }
     */
    public static final OfAddress GtkWindowHandle_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct * GtkWindowHandleClass_autoptr;
     * }
     */
    public static final OfAddress GtkWindowHandleClass_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkWindowHandleClass_listautoptr;
     * }
     */
    public static final OfAddress GtkWindowHandleClass_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkWindowHandleClass_slistautoptr;
     * }
     */
    public static final OfAddress GtkWindowHandleClass_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkWindowHandleClass_queueautoptr;
     * }
     */
    public static final OfAddress GtkWindowHandleClass_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle gtk_window_handle_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1936.gtk_window_handle_new$MH,"gtk_window_handle_new");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_window_handle_new();
     * }
     */
    public static MemorySegment gtk_window_handle_new() {
        var mh$ = gtk_window_handle_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_window_handle_get_child$MH() {
        return RuntimeHelper.requireNonNull(constants$1937.gtk_window_handle_get_child$MH,"gtk_window_handle_get_child");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_window_handle_get_child(GtkWindowHandle* self);
     * }
     */
    public static MemorySegment gtk_window_handle_get_child(MemorySegment self) {
        var mh$ = gtk_window_handle_get_child$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_window_handle_set_child$MH() {
        return RuntimeHelper.requireNonNull(constants$1937.gtk_window_handle_set_child$MH,"gtk_window_handle_set_child");
    }
    /**
     * {@snippet :
     * void gtk_window_handle_set_child(GtkWindowHandle* self, GtkWidget* child);
     * }
     */
    public static void gtk_window_handle_set_child(MemorySegment self, MemorySegment child) {
        var mh$ = gtk_window_handle_set_child$MH();
        try {
            mh$.invokeExact(self, child);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _GtkActionBar* GtkActionBar_autoptr;
     * }
     */
    public static final OfAddress GtkActionBar_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkActionBar_listautoptr;
     * }
     */
    public static final OfAddress GtkActionBar_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkActionBar_slistautoptr;
     * }
     */
    public static final OfAddress GtkActionBar_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkActionBar_queueautoptr;
     * }
     */
    public static final OfAddress GtkActionBar_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkActionable* GtkActionable_autoptr;
     * }
     */
    public static final OfAddress GtkActionable_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkActionable_listautoptr;
     * }
     */
    public static final OfAddress GtkActionable_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkActionable_slistautoptr;
     * }
     */
    public static final OfAddress GtkActionable_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkActionable_queueautoptr;
     * }
     */
    public static final OfAddress GtkActionable_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkAdjustment* GtkAdjustment_autoptr;
     * }
     */
    public static final OfAddress GtkAdjustment_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkAdjustment_listautoptr;
     * }
     */
    public static final OfAddress GtkAdjustment_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkAdjustment_slistautoptr;
     * }
     */
    public static final OfAddress GtkAdjustment_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkAdjustment_queueautoptr;
     * }
     */
    public static final OfAddress GtkAdjustment_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkAppChooser* GtkAppChooser_autoptr;
     * }
     */
    public static final OfAddress GtkAppChooser_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkAppChooser_listautoptr;
     * }
     */
    public static final OfAddress GtkAppChooser_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkAppChooser_slistautoptr;
     * }
     */
    public static final OfAddress GtkAppChooser_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkAppChooser_queueautoptr;
     * }
     */
    public static final OfAddress GtkAppChooser_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkAppChooserButton* GtkAppChooserButton_autoptr;
     * }
     */
    public static final OfAddress GtkAppChooserButton_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkAppChooserButton_listautoptr;
     * }
     */
    public static final OfAddress GtkAppChooserButton_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkAppChooserButton_slistautoptr;
     * }
     */
    public static final OfAddress GtkAppChooserButton_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkAppChooserButton_queueautoptr;
     * }
     */
    public static final OfAddress GtkAppChooserButton_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkAppChooserDialog* GtkAppChooserDialog_autoptr;
     * }
     */
    public static final OfAddress GtkAppChooserDialog_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkAppChooserDialog_listautoptr;
     * }
     */
    public static final OfAddress GtkAppChooserDialog_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkAppChooserDialog_slistautoptr;
     * }
     */
    public static final OfAddress GtkAppChooserDialog_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkAppChooserDialog_queueautoptr;
     * }
     */
    public static final OfAddress GtkAppChooserDialog_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkAppChooserWidget* GtkAppChooserWidget_autoptr;
     * }
     */
    public static final OfAddress GtkAppChooserWidget_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkAppChooserWidget_listautoptr;
     * }
     */
    public static final OfAddress GtkAppChooserWidget_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkAppChooserWidget_slistautoptr;
     * }
     */
    public static final OfAddress GtkAppChooserWidget_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkAppChooserWidget_queueautoptr;
     * }
     */
    public static final OfAddress GtkAppChooserWidget_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkApplicationWindow* GtkApplicationWindow_autoptr;
     * }
     */
    public static final OfAddress GtkApplicationWindow_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkApplicationWindow_listautoptr;
     * }
     */
    public static final OfAddress GtkApplicationWindow_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkApplicationWindow_slistautoptr;
     * }
     */
    public static final OfAddress GtkApplicationWindow_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkApplicationWindow_queueautoptr;
     * }
     */
    public static final OfAddress GtkApplicationWindow_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkAspectFrame* GtkAspectFrame_autoptr;
     * }
     */
    public static final OfAddress GtkAspectFrame_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkAspectFrame_listautoptr;
     * }
     */
    public static final OfAddress GtkAspectFrame_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkAspectFrame_slistautoptr;
     * }
     */
    public static final OfAddress GtkAspectFrame_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkAspectFrame_queueautoptr;
     * }
     */
    public static final OfAddress GtkAspectFrame_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkAssistant* GtkAssistant_autoptr;
     * }
     */
    public static final OfAddress GtkAssistant_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkAssistant_listautoptr;
     * }
     */
    public static final OfAddress GtkAssistant_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkAssistant_slistautoptr;
     * }
     */
    public static final OfAddress GtkAssistant_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkAssistant_queueautoptr;
     * }
     */
    public static final OfAddress GtkAssistant_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkBox* GtkBox_autoptr;
     * }
     */
    public static final OfAddress GtkBox_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkBox_listautoptr;
     * }
     */
    public static final OfAddress GtkBox_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkBox_slistautoptr;
     * }
     */
    public static final OfAddress GtkBox_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkBox_queueautoptr;
     * }
     */
    public static final OfAddress GtkBox_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkBuildable* GtkBuildable_autoptr;
     * }
     */
    public static final OfAddress GtkBuildable_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkBuildable_listautoptr;
     * }
     */
    public static final OfAddress GtkBuildable_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkBuildable_slistautoptr;
     * }
     */
    public static final OfAddress GtkBuildable_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkBuildable_queueautoptr;
     * }
     */
    public static final OfAddress GtkBuildable_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkBuilder* GtkBuilder_autoptr;
     * }
     */
    public static final OfAddress GtkBuilder_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkBuilder_listautoptr;
     * }
     */
    public static final OfAddress GtkBuilder_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkBuilder_slistautoptr;
     * }
     */
    public static final OfAddress GtkBuilder_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkBuilder_queueautoptr;
     * }
     */
    public static final OfAddress GtkBuilder_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkButton* GtkButton_autoptr;
     * }
     */
    public static final OfAddress GtkButton_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkButton_listautoptr;
     * }
     */
    public static final OfAddress GtkButton_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkButton_slistautoptr;
     * }
     */
    public static final OfAddress GtkButton_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkButton_queueautoptr;
     * }
     */
    public static final OfAddress GtkButton_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkCalendar* GtkCalendar_autoptr;
     * }
     */
    public static final OfAddress GtkCalendar_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCalendar_listautoptr;
     * }
     */
    public static final OfAddress GtkCalendar_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCalendar_slistautoptr;
     * }
     */
    public static final OfAddress GtkCalendar_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCalendar_queueautoptr;
     * }
     */
    public static final OfAddress GtkCalendar_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkCellArea* GtkCellArea_autoptr;
     * }
     */
    public static final OfAddress GtkCellArea_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellArea_listautoptr;
     * }
     */
    public static final OfAddress GtkCellArea_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellArea_slistautoptr;
     * }
     */
    public static final OfAddress GtkCellArea_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellArea_queueautoptr;
     * }
     */
    public static final OfAddress GtkCellArea_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkCellAreaBox* GtkCellAreaBox_autoptr;
     * }
     */
    public static final OfAddress GtkCellAreaBox_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellAreaBox_listautoptr;
     * }
     */
    public static final OfAddress GtkCellAreaBox_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellAreaBox_slistautoptr;
     * }
     */
    public static final OfAddress GtkCellAreaBox_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellAreaBox_queueautoptr;
     * }
     */
    public static final OfAddress GtkCellAreaBox_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkCellAreaContext* GtkCellAreaContext_autoptr;
     * }
     */
    public static final OfAddress GtkCellAreaContext_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellAreaContext_listautoptr;
     * }
     */
    public static final OfAddress GtkCellAreaContext_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellAreaContext_slistautoptr;
     * }
     */
    public static final OfAddress GtkCellAreaContext_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellAreaContext_queueautoptr;
     * }
     */
    public static final OfAddress GtkCellAreaContext_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkCellEditable* GtkCellEditable_autoptr;
     * }
     */
    public static final OfAddress GtkCellEditable_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellEditable_listautoptr;
     * }
     */
    public static final OfAddress GtkCellEditable_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellEditable_slistautoptr;
     * }
     */
    public static final OfAddress GtkCellEditable_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellEditable_queueautoptr;
     * }
     */
    public static final OfAddress GtkCellEditable_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkCellLayout* GtkCellLayout_autoptr;
     * }
     */
    public static final OfAddress GtkCellLayout_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellLayout_listautoptr;
     * }
     */
    public static final OfAddress GtkCellLayout_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellLayout_slistautoptr;
     * }
     */
    public static final OfAddress GtkCellLayout_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellLayout_queueautoptr;
     * }
     */
    public static final OfAddress GtkCellLayout_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkCellRenderer* GtkCellRenderer_autoptr;
     * }
     */
    public static final OfAddress GtkCellRenderer_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellRenderer_listautoptr;
     * }
     */
    public static final OfAddress GtkCellRenderer_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellRenderer_slistautoptr;
     * }
     */
    public static final OfAddress GtkCellRenderer_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellRenderer_queueautoptr;
     * }
     */
    public static final OfAddress GtkCellRenderer_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkCellRendererAccel* GtkCellRendererAccel_autoptr;
     * }
     */
    public static final OfAddress GtkCellRendererAccel_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellRendererAccel_listautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererAccel_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellRendererAccel_slistautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererAccel_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellRendererAccel_queueautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererAccel_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkCellRendererCombo* GtkCellRendererCombo_autoptr;
     * }
     */
    public static final OfAddress GtkCellRendererCombo_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellRendererCombo_listautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererCombo_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellRendererCombo_slistautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererCombo_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellRendererCombo_queueautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererCombo_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkCellRendererPixbuf* GtkCellRendererPixbuf_autoptr;
     * }
     */
    public static final OfAddress GtkCellRendererPixbuf_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellRendererPixbuf_listautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererPixbuf_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellRendererPixbuf_slistautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererPixbuf_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellRendererPixbuf_queueautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererPixbuf_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkCellRendererProgress* GtkCellRendererProgress_autoptr;
     * }
     */
    public static final OfAddress GtkCellRendererProgress_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellRendererProgress_listautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererProgress_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellRendererProgress_slistautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererProgress_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellRendererProgress_queueautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererProgress_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkCellRendererSpin* GtkCellRendererSpin_autoptr;
     * }
     */
    public static final OfAddress GtkCellRendererSpin_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellRendererSpin_listautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererSpin_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellRendererSpin_slistautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererSpin_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellRendererSpin_queueautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererSpin_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkCellRendererSpinner* GtkCellRendererSpinner_autoptr;
     * }
     */
    public static final OfAddress GtkCellRendererSpinner_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellRendererSpinner_listautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererSpinner_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellRendererSpinner_slistautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererSpinner_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellRendererSpinner_queueautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererSpinner_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkCellRendererText* GtkCellRendererText_autoptr;
     * }
     */
    public static final OfAddress GtkCellRendererText_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellRendererText_listautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererText_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellRendererText_slistautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererText_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellRendererText_queueautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererText_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkCellRendererToggle* GtkCellRendererToggle_autoptr;
     * }
     */
    public static final OfAddress GtkCellRendererToggle_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellRendererToggle_listautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererToggle_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellRendererToggle_slistautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererToggle_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellRendererToggle_queueautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererToggle_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkCellView* GtkCellView_autoptr;
     * }
     */
    public static final OfAddress GtkCellView_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellView_listautoptr;
     * }
     */
    public static final OfAddress GtkCellView_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellView_slistautoptr;
     * }
     */
    public static final OfAddress GtkCellView_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellView_queueautoptr;
     * }
     */
    public static final OfAddress GtkCellView_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkCheckButton* GtkCheckButton_autoptr;
     * }
     */
    public static final OfAddress GtkCheckButton_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCheckButton_listautoptr;
     * }
     */
    public static final OfAddress GtkCheckButton_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCheckButton_slistautoptr;
     * }
     */
    public static final OfAddress GtkCheckButton_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCheckButton_queueautoptr;
     * }
     */
    public static final OfAddress GtkCheckButton_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkColorButton* GtkColorButton_autoptr;
     * }
     */
    public static final OfAddress GtkColorButton_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkColorButton_listautoptr;
     * }
     */
    public static final OfAddress GtkColorButton_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkColorButton_slistautoptr;
     * }
     */
    public static final OfAddress GtkColorButton_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkColorButton_queueautoptr;
     * }
     */
    public static final OfAddress GtkColorButton_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkColorChooser* GtkColorChooser_autoptr;
     * }
     */
    public static final OfAddress GtkColorChooser_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkColorChooser_listautoptr;
     * }
     */
    public static final OfAddress GtkColorChooser_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkColorChooser_slistautoptr;
     * }
     */
    public static final OfAddress GtkColorChooser_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkColorChooser_queueautoptr;
     * }
     */
    public static final OfAddress GtkColorChooser_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkColorChooserDialog* GtkColorChooserDialog_autoptr;
     * }
     */
    public static final OfAddress GtkColorChooserDialog_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkColorChooserDialog_listautoptr;
     * }
     */
    public static final OfAddress GtkColorChooserDialog_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkColorChooserDialog_slistautoptr;
     * }
     */
    public static final OfAddress GtkColorChooserDialog_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkColorChooserDialog_queueautoptr;
     * }
     */
    public static final OfAddress GtkColorChooserDialog_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkColorChooserWidget* GtkColorChooserWidget_autoptr;
     * }
     */
    public static final OfAddress GtkColorChooserWidget_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkColorChooserWidget_listautoptr;
     * }
     */
    public static final OfAddress GtkColorChooserWidget_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkColorChooserWidget_slistautoptr;
     * }
     */
    public static final OfAddress GtkColorChooserWidget_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkColorChooserWidget_queueautoptr;
     * }
     */
    public static final OfAddress GtkColorChooserWidget_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkComboBox* GtkComboBox_autoptr;
     * }
     */
    public static final OfAddress GtkComboBox_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkComboBox_listautoptr;
     * }
     */
    public static final OfAddress GtkComboBox_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkComboBox_slistautoptr;
     * }
     */
    public static final OfAddress GtkComboBox_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkComboBox_queueautoptr;
     * }
     */
    public static final OfAddress GtkComboBox_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkComboBoxText* GtkComboBoxText_autoptr;
     * }
     */
    public static final OfAddress GtkComboBoxText_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkComboBoxText_listautoptr;
     * }
     */
    public static final OfAddress GtkComboBoxText_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkComboBoxText_slistautoptr;
     * }
     */
    public static final OfAddress GtkComboBoxText_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkComboBoxText_queueautoptr;
     * }
     */
    public static final OfAddress GtkComboBoxText_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkCssProvider* GtkCssProvider_autoptr;
     * }
     */
    public static final OfAddress GtkCssProvider_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCssProvider_listautoptr;
     * }
     */
    public static final OfAddress GtkCssProvider_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCssProvider_slistautoptr;
     * }
     */
    public static final OfAddress GtkCssProvider_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCssProvider_queueautoptr;
     * }
     */
    public static final OfAddress GtkCssProvider_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkDrawingArea* GtkDrawingArea_autoptr;
     * }
     */
    public static final OfAddress GtkDrawingArea_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkDrawingArea_listautoptr;
     * }
     */
    public static final OfAddress GtkDrawingArea_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkDrawingArea_slistautoptr;
     * }
     */
    public static final OfAddress GtkDrawingArea_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkDrawingArea_queueautoptr;
     * }
     */
    public static final OfAddress GtkDrawingArea_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkEditable* GtkEditable_autoptr;
     * }
     */
    public static final OfAddress GtkEditable_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkEditable_listautoptr;
     * }
     */
    public static final OfAddress GtkEditable_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkEditable_slistautoptr;
     * }
     */
    public static final OfAddress GtkEditable_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkEditable_queueautoptr;
     * }
     */
    public static final OfAddress GtkEditable_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkEntry* GtkEntry_autoptr;
     * }
     */
    public static final OfAddress GtkEntry_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkEntry_listautoptr;
     * }
     */
    public static final OfAddress GtkEntry_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkEntry_slistautoptr;
     * }
     */
    public static final OfAddress GtkEntry_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkEntry_queueautoptr;
     * }
     */
    public static final OfAddress GtkEntry_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkEntryCompletion* GtkEntryCompletion_autoptr;
     * }
     */
    public static final OfAddress GtkEntryCompletion_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkEntryCompletion_listautoptr;
     * }
     */
    public static final OfAddress GtkEntryCompletion_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkEntryCompletion_slistautoptr;
     * }
     */
    public static final OfAddress GtkEntryCompletion_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkEntryCompletion_queueautoptr;
     * }
     */
    public static final OfAddress GtkEntryCompletion_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkEventController* GtkEventController_autoptr;
     * }
     */
    public static final OfAddress GtkEventController_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkEventController_listautoptr;
     * }
     */
    public static final OfAddress GtkEventController_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkEventController_slistautoptr;
     * }
     */
    public static final OfAddress GtkEventController_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkEventController_queueautoptr;
     * }
     */
    public static final OfAddress GtkEventController_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkExpander* GtkExpander_autoptr;
     * }
     */
    public static final OfAddress GtkExpander_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkExpander_listautoptr;
     * }
     */
    public static final OfAddress GtkExpander_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkExpander_slistautoptr;
     * }
     */
    public static final OfAddress GtkExpander_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkExpander_queueautoptr;
     * }
     */
    public static final OfAddress GtkExpander_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkFileChooserDialog* GtkFileChooserDialog_autoptr;
     * }
     */
    public static final OfAddress GtkFileChooserDialog_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkFileChooserDialog_listautoptr;
     * }
     */
    public static final OfAddress GtkFileChooserDialog_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkFileChooserDialog_slistautoptr;
     * }
     */
    public static final OfAddress GtkFileChooserDialog_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkFileChooserDialog_queueautoptr;
     * }
     */
    public static final OfAddress GtkFileChooserDialog_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkFileChooserWidget* GtkFileChooserWidget_autoptr;
     * }
     */
    public static final OfAddress GtkFileChooserWidget_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkFileChooserWidget_listautoptr;
     * }
     */
    public static final OfAddress GtkFileChooserWidget_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkFileChooserWidget_slistautoptr;
     * }
     */
    public static final OfAddress GtkFileChooserWidget_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkFileChooserWidget_queueautoptr;
     * }
     */
    public static final OfAddress GtkFileChooserWidget_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkFileFilter* GtkFileFilter_autoptr;
     * }
     */
    public static final OfAddress GtkFileFilter_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkFileFilter_listautoptr;
     * }
     */
    public static final OfAddress GtkFileFilter_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkFileFilter_slistautoptr;
     * }
     */
    public static final OfAddress GtkFileFilter_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkFileFilter_queueautoptr;
     * }
     */
    public static final OfAddress GtkFileFilter_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkFixed* GtkFixed_autoptr;
     * }
     */
    public static final OfAddress GtkFixed_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkFixed_listautoptr;
     * }
     */
    public static final OfAddress GtkFixed_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkFixed_slistautoptr;
     * }
     */
    public static final OfAddress GtkFixed_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkFixed_queueautoptr;
     * }
     */
    public static final OfAddress GtkFixed_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkFlowBox* GtkFlowBox_autoptr;
     * }
     */
    public static final OfAddress GtkFlowBox_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkFlowBox_listautoptr;
     * }
     */
    public static final OfAddress GtkFlowBox_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkFlowBox_slistautoptr;
     * }
     */
    public static final OfAddress GtkFlowBox_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkFlowBox_queueautoptr;
     * }
     */
    public static final OfAddress GtkFlowBox_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkFlowBoxChild* GtkFlowBoxChild_autoptr;
     * }
     */
    public static final OfAddress GtkFlowBoxChild_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkFlowBoxChild_listautoptr;
     * }
     */
    public static final OfAddress GtkFlowBoxChild_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkFlowBoxChild_slistautoptr;
     * }
     */
    public static final OfAddress GtkFlowBoxChild_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkFlowBoxChild_queueautoptr;
     * }
     */
    public static final OfAddress GtkFlowBoxChild_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkFontButton* GtkFontButton_autoptr;
     * }
     */
    public static final OfAddress GtkFontButton_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkFontButton_listautoptr;
     * }
     */
    public static final OfAddress GtkFontButton_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkFontButton_slistautoptr;
     * }
     */
    public static final OfAddress GtkFontButton_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkFontButton_queueautoptr;
     * }
     */
    public static final OfAddress GtkFontButton_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkFontChooser* GtkFontChooser_autoptr;
     * }
     */
    public static final OfAddress GtkFontChooser_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkFontChooser_listautoptr;
     * }
     */
    public static final OfAddress GtkFontChooser_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkFontChooser_slistautoptr;
     * }
     */
    public static final OfAddress GtkFontChooser_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkFontChooser_queueautoptr;
     * }
     */
    public static final OfAddress GtkFontChooser_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkFontChooserDialog* GtkFontChooserDialog_autoptr;
     * }
     */
    public static final OfAddress GtkFontChooserDialog_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkFontChooserDialog_listautoptr;
     * }
     */
    public static final OfAddress GtkFontChooserDialog_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkFontChooserDialog_slistautoptr;
     * }
     */
    public static final OfAddress GtkFontChooserDialog_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkFontChooserDialog_queueautoptr;
     * }
     */
    public static final OfAddress GtkFontChooserDialog_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkFontChooserWidget* GtkFontChooserWidget_autoptr;
     * }
     */
    public static final OfAddress GtkFontChooserWidget_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkFontChooserWidget_listautoptr;
     * }
     */
    public static final OfAddress GtkFontChooserWidget_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkFontChooserWidget_slistautoptr;
     * }
     */
    public static final OfAddress GtkFontChooserWidget_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkFontChooserWidget_queueautoptr;
     * }
     */
    public static final OfAddress GtkFontChooserWidget_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkFrame* GtkFrame_autoptr;
     * }
     */
    public static final OfAddress GtkFrame_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkFrame_listautoptr;
     * }
     */
    public static final OfAddress GtkFrame_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkFrame_slistautoptr;
     * }
     */
    public static final OfAddress GtkFrame_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkFrame_queueautoptr;
     * }
     */
    public static final OfAddress GtkFrame_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkGLArea* GtkGLArea_autoptr;
     * }
     */
    public static final OfAddress GtkGLArea_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkGLArea_listautoptr;
     * }
     */
    public static final OfAddress GtkGLArea_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkGLArea_slistautoptr;
     * }
     */
    public static final OfAddress GtkGLArea_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkGLArea_queueautoptr;
     * }
     */
    public static final OfAddress GtkGLArea_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkGesture* GtkGesture_autoptr;
     * }
     */
    public static final OfAddress GtkGesture_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkGesture_listautoptr;
     * }
     */
    public static final OfAddress GtkGesture_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkGesture_slistautoptr;
     * }
     */
    public static final OfAddress GtkGesture_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkGesture_queueautoptr;
     * }
     */
    public static final OfAddress GtkGesture_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkGestureDrag* GtkGestureDrag_autoptr;
     * }
     */
    public static final OfAddress GtkGestureDrag_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkGestureDrag_listautoptr;
     * }
     */
    public static final OfAddress GtkGestureDrag_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkGestureDrag_slistautoptr;
     * }
     */
    public static final OfAddress GtkGestureDrag_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkGestureDrag_queueautoptr;
     * }
     */
    public static final OfAddress GtkGestureDrag_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkGestureLongPress* GtkGestureLongPress_autoptr;
     * }
     */
    public static final OfAddress GtkGestureLongPress_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkGestureLongPress_listautoptr;
     * }
     */
    public static final OfAddress GtkGestureLongPress_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkGestureLongPress_slistautoptr;
     * }
     */
    public static final OfAddress GtkGestureLongPress_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkGestureLongPress_queueautoptr;
     * }
     */
    public static final OfAddress GtkGestureLongPress_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkGestureClick* GtkGestureClick_autoptr;
     * }
     */
    public static final OfAddress GtkGestureClick_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkGestureClick_listautoptr;
     * }
     */
    public static final OfAddress GtkGestureClick_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkGestureClick_slistautoptr;
     * }
     */
    public static final OfAddress GtkGestureClick_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkGestureClick_queueautoptr;
     * }
     */
    public static final OfAddress GtkGestureClick_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkGesturePan* GtkGesturePan_autoptr;
     * }
     */
    public static final OfAddress GtkGesturePan_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkGesturePan_listautoptr;
     * }
     */
    public static final OfAddress GtkGesturePan_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkGesturePan_slistautoptr;
     * }
     */
    public static final OfAddress GtkGesturePan_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkGesturePan_queueautoptr;
     * }
     */
    public static final OfAddress GtkGesturePan_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkGestureRotate* GtkGestureRotate_autoptr;
     * }
     */
    public static final OfAddress GtkGestureRotate_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkGestureRotate_listautoptr;
     * }
     */
    public static final OfAddress GtkGestureRotate_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkGestureRotate_slistautoptr;
     * }
     */
    public static final OfAddress GtkGestureRotate_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkGestureRotate_queueautoptr;
     * }
     */
    public static final OfAddress GtkGestureRotate_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkGestureSingle* GtkGestureSingle_autoptr;
     * }
     */
    public static final OfAddress GtkGestureSingle_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkGestureSingle_listautoptr;
     * }
     */
    public static final OfAddress GtkGestureSingle_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkGestureSingle_slistautoptr;
     * }
     */
    public static final OfAddress GtkGestureSingle_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkGestureSingle_queueautoptr;
     * }
     */
    public static final OfAddress GtkGestureSingle_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkGestureSwipe* GtkGestureSwipe_autoptr;
     * }
     */
    public static final OfAddress GtkGestureSwipe_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkGestureSwipe_listautoptr;
     * }
     */
    public static final OfAddress GtkGestureSwipe_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkGestureSwipe_slistautoptr;
     * }
     */
    public static final OfAddress GtkGestureSwipe_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkGestureSwipe_queueautoptr;
     * }
     */
    public static final OfAddress GtkGestureSwipe_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkGestureZoom* GtkGestureZoom_autoptr;
     * }
     */
    public static final OfAddress GtkGestureZoom_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkGestureZoom_listautoptr;
     * }
     */
    public static final OfAddress GtkGestureZoom_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkGestureZoom_slistautoptr;
     * }
     */
    public static final OfAddress GtkGestureZoom_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkGestureZoom_queueautoptr;
     * }
     */
    public static final OfAddress GtkGestureZoom_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkGrid* GtkGrid_autoptr;
     * }
     */
    public static final OfAddress GtkGrid_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkGrid_listautoptr;
     * }
     */
    public static final OfAddress GtkGrid_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkGrid_slistautoptr;
     * }
     */
    public static final OfAddress GtkGrid_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkGrid_queueautoptr;
     * }
     */
    public static final OfAddress GtkGrid_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkGridView* GtkGridView_autoptr;
     * }
     */
    public static final OfAddress GtkGridView_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkGridView_listautoptr;
     * }
     */
    public static final OfAddress GtkGridView_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkGridView_slistautoptr;
     * }
     */
    public static final OfAddress GtkGridView_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkGridView_queueautoptr;
     * }
     */
    public static final OfAddress GtkGridView_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkHeaderBar* GtkHeaderBar_autoptr;
     * }
     */
    public static final OfAddress GtkHeaderBar_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkHeaderBar_listautoptr;
     * }
     */
    public static final OfAddress GtkHeaderBar_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkHeaderBar_slistautoptr;
     * }
     */
    public static final OfAddress GtkHeaderBar_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkHeaderBar_queueautoptr;
     * }
     */
    public static final OfAddress GtkHeaderBar_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkIMContext* GtkIMContext_autoptr;
     * }
     */
    public static final OfAddress GtkIMContext_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkIMContext_listautoptr;
     * }
     */
    public static final OfAddress GtkIMContext_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkIMContext_slistautoptr;
     * }
     */
    public static final OfAddress GtkIMContext_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkIMContext_queueautoptr;
     * }
     */
    public static final OfAddress GtkIMContext_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkIMContextSimple* GtkIMContextSimple_autoptr;
     * }
     */
    public static final OfAddress GtkIMContextSimple_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkIMContextSimple_listautoptr;
     * }
     */
    public static final OfAddress GtkIMContextSimple_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkIMContextSimple_slistautoptr;
     * }
     */
    public static final OfAddress GtkIMContextSimple_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkIMContextSimple_queueautoptr;
     * }
     */
    public static final OfAddress GtkIMContextSimple_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkIMMulticontext* GtkIMMulticontext_autoptr;
     * }
     */
    public static final OfAddress GtkIMMulticontext_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkIMMulticontext_listautoptr;
     * }
     */
    public static final OfAddress GtkIMMulticontext_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkIMMulticontext_slistautoptr;
     * }
     */
    public static final OfAddress GtkIMMulticontext_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkIMMulticontext_queueautoptr;
     * }
     */
    public static final OfAddress GtkIMMulticontext_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkIconPaintable* GtkIconPaintable_autoptr;
     * }
     */
    public static final OfAddress GtkIconPaintable_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkIconPaintable_listautoptr;
     * }
     */
    public static final OfAddress GtkIconPaintable_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkIconPaintable_slistautoptr;
     * }
     */
    public static final OfAddress GtkIconPaintable_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkIconPaintable_queueautoptr;
     * }
     */
    public static final OfAddress GtkIconPaintable_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkIconTheme* GtkIconTheme_autoptr;
     * }
     */
    public static final OfAddress GtkIconTheme_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkIconTheme_listautoptr;
     * }
     */
    public static final OfAddress GtkIconTheme_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkIconTheme_slistautoptr;
     * }
     */
    public static final OfAddress GtkIconTheme_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkIconTheme_queueautoptr;
     * }
     */
    public static final OfAddress GtkIconTheme_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkIconView* GtkIconView_autoptr;
     * }
     */
    public static final OfAddress GtkIconView_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkIconView_listautoptr;
     * }
     */
    public static final OfAddress GtkIconView_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkIconView_slistautoptr;
     * }
     */
    public static final OfAddress GtkIconView_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkIconView_queueautoptr;
     * }
     */
    public static final OfAddress GtkIconView_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkImage* GtkImage_autoptr;
     * }
     */
    public static final OfAddress GtkImage_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkImage_listautoptr;
     * }
     */
    public static final OfAddress GtkImage_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkImage_slistautoptr;
     * }
     */
    public static final OfAddress GtkImage_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkImage_queueautoptr;
     * }
     */
    public static final OfAddress GtkImage_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkInfoBar* GtkInfoBar_autoptr;
     * }
     */
    public static final OfAddress GtkInfoBar_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkInfoBar_listautoptr;
     * }
     */
    public static final OfAddress GtkInfoBar_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkInfoBar_slistautoptr;
     * }
     */
    public static final OfAddress GtkInfoBar_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkInfoBar_queueautoptr;
     * }
     */
    public static final OfAddress GtkInfoBar_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkLevelBar* GtkLevelBar_autoptr;
     * }
     */
    public static final OfAddress GtkLevelBar_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkLevelBar_listautoptr;
     * }
     */
    public static final OfAddress GtkLevelBar_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkLevelBar_slistautoptr;
     * }
     */
    public static final OfAddress GtkLevelBar_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkLevelBar_queueautoptr;
     * }
     */
    public static final OfAddress GtkLevelBar_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkLinkButton* GtkLinkButton_autoptr;
     * }
     */
    public static final OfAddress GtkLinkButton_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkLinkButton_listautoptr;
     * }
     */
    public static final OfAddress GtkLinkButton_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkLinkButton_slistautoptr;
     * }
     */
    public static final OfAddress GtkLinkButton_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkLinkButton_queueautoptr;
     * }
     */
    public static final OfAddress GtkLinkButton_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkListItem* GtkListItem_autoptr;
     * }
     */
    public static final OfAddress GtkListItem_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkListItem_listautoptr;
     * }
     */
    public static final OfAddress GtkListItem_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkListItem_slistautoptr;
     * }
     */
    public static final OfAddress GtkListItem_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkListItem_queueautoptr;
     * }
     */
    public static final OfAddress GtkListItem_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkListItemFactory* GtkListItemFactory_autoptr;
     * }
     */
    public static final OfAddress GtkListItemFactory_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkListItemFactory_listautoptr;
     * }
     */
    public static final OfAddress GtkListItemFactory_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkListItemFactory_slistautoptr;
     * }
     */
    public static final OfAddress GtkListItemFactory_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkListItemFactory_queueautoptr;
     * }
     */
    public static final OfAddress GtkListItemFactory_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkListStore* GtkListStore_autoptr;
     * }
     */
    public static final OfAddress GtkListStore_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkListStore_listautoptr;
     * }
     */
    public static final OfAddress GtkListStore_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkListStore_slistautoptr;
     * }
     */
    public static final OfAddress GtkListStore_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkListStore_queueautoptr;
     * }
     */
    public static final OfAddress GtkListStore_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkLockButton* GtkLockButton_autoptr;
     * }
     */
    public static final OfAddress GtkLockButton_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkLockButton_listautoptr;
     * }
     */
    public static final OfAddress GtkLockButton_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkLockButton_slistautoptr;
     * }
     */
    public static final OfAddress GtkLockButton_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkLockButton_queueautoptr;
     * }
     */
    public static final OfAddress GtkLockButton_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkMenuButton* GtkMenuButton_autoptr;
     * }
     */
    public static final OfAddress GtkMenuButton_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkMenuButton_listautoptr;
     * }
     */
    public static final OfAddress GtkMenuButton_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkMenuButton_slistautoptr;
     * }
     */
    public static final OfAddress GtkMenuButton_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkMenuButton_queueautoptr;
     * }
     */
    public static final OfAddress GtkMenuButton_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkMessageDialog* GtkMessageDialog_autoptr;
     * }
     */
    public static final OfAddress GtkMessageDialog_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkMessageDialog_listautoptr;
     * }
     */
    public static final OfAddress GtkMessageDialog_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkMessageDialog_slistautoptr;
     * }
     */
    public static final OfAddress GtkMessageDialog_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkMessageDialog_queueautoptr;
     * }
     */
    public static final OfAddress GtkMessageDialog_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkMountOperation* GtkMountOperation_autoptr;
     * }
     */
    public static final OfAddress GtkMountOperation_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkMountOperation_listautoptr;
     * }
     */
    public static final OfAddress GtkMountOperation_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkMountOperation_slistautoptr;
     * }
     */
    public static final OfAddress GtkMountOperation_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkMountOperation_queueautoptr;
     * }
     */
    public static final OfAddress GtkMountOperation_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkNotebook* GtkNotebook_autoptr;
     * }
     */
    public static final OfAddress GtkNotebook_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkNotebook_listautoptr;
     * }
     */
    public static final OfAddress GtkNotebook_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkNotebook_slistautoptr;
     * }
     */
    public static final OfAddress GtkNotebook_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkNotebook_queueautoptr;
     * }
     */
    public static final OfAddress GtkNotebook_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkOrientable* GtkOrientable_autoptr;
     * }
     */
    public static final OfAddress GtkOrientable_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkOrientable_listautoptr;
     * }
     */
    public static final OfAddress GtkOrientable_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkOrientable_slistautoptr;
     * }
     */
    public static final OfAddress GtkOrientable_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkOrientable_queueautoptr;
     * }
     */
    public static final OfAddress GtkOrientable_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkOverlay* GtkOverlay_autoptr;
     * }
     */
    public static final OfAddress GtkOverlay_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkOverlay_listautoptr;
     * }
     */
    public static final OfAddress GtkOverlay_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkOverlay_slistautoptr;
     * }
     */
    public static final OfAddress GtkOverlay_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkOverlay_queueautoptr;
     * }
     */
    public static final OfAddress GtkOverlay_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkPageSetup* GtkPageSetup_autoptr;
     * }
     */
    public static final OfAddress GtkPageSetup_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkPageSetup_listautoptr;
     * }
     */
    public static final OfAddress GtkPageSetup_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkPageSetup_slistautoptr;
     * }
     */
    public static final OfAddress GtkPageSetup_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkPageSetup_queueautoptr;
     * }
     */
    public static final OfAddress GtkPageSetup_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkPaned* GtkPaned_autoptr;
     * }
     */
    public static final OfAddress GtkPaned_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkPaned_listautoptr;
     * }
     */
    public static final OfAddress GtkPaned_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkPaned_slistautoptr;
     * }
     */
    public static final OfAddress GtkPaned_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkPaned_queueautoptr;
     * }
     */
    public static final OfAddress GtkPaned_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkPopover* GtkPopover_autoptr;
     * }
     */
    public static final OfAddress GtkPopover_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkPopover_listautoptr;
     * }
     */
    public static final OfAddress GtkPopover_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkPopover_slistautoptr;
     * }
     */
    public static final OfAddress GtkPopover_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkPopover_queueautoptr;
     * }
     */
    public static final OfAddress GtkPopover_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkPopoverMenu* GtkPopoverMenu_autoptr;
     * }
     */
    public static final OfAddress GtkPopoverMenu_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkPopoverMenu_listautoptr;
     * }
     */
    public static final OfAddress GtkPopoverMenu_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkPopoverMenu_slistautoptr;
     * }
     */
    public static final OfAddress GtkPopoverMenu_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkPopoverMenu_queueautoptr;
     * }
     */
    public static final OfAddress GtkPopoverMenu_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkPrintContext* GtkPrintContext_autoptr;
     * }
     */
    public static final OfAddress GtkPrintContext_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkPrintContext_listautoptr;
     * }
     */
    public static final OfAddress GtkPrintContext_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkPrintContext_slistautoptr;
     * }
     */
    public static final OfAddress GtkPrintContext_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkPrintContext_queueautoptr;
     * }
     */
    public static final OfAddress GtkPrintContext_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkPrintOperation* GtkPrintOperation_autoptr;
     * }
     */
    public static final OfAddress GtkPrintOperation_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkPrintOperation_listautoptr;
     * }
     */
    public static final OfAddress GtkPrintOperation_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkPrintOperation_slistautoptr;
     * }
     */
    public static final OfAddress GtkPrintOperation_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkPrintOperation_queueautoptr;
     * }
     */
    public static final OfAddress GtkPrintOperation_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkPrintOperationPreview* GtkPrintOperationPreview_autoptr;
     * }
     */
    public static final OfAddress GtkPrintOperationPreview_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkPrintOperationPreview_listautoptr;
     * }
     */
    public static final OfAddress GtkPrintOperationPreview_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkPrintOperationPreview_slistautoptr;
     * }
     */
    public static final OfAddress GtkPrintOperationPreview_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkPrintOperationPreview_queueautoptr;
     * }
     */
    public static final OfAddress GtkPrintOperationPreview_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkPrintSettings* GtkPrintSettings_autoptr;
     * }
     */
    public static final OfAddress GtkPrintSettings_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkPrintSettings_listautoptr;
     * }
     */
    public static final OfAddress GtkPrintSettings_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkPrintSettings_slistautoptr;
     * }
     */
    public static final OfAddress GtkPrintSettings_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkPrintSettings_queueautoptr;
     * }
     */
    public static final OfAddress GtkPrintSettings_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkProgressBar* GtkProgressBar_autoptr;
     * }
     */
    public static final OfAddress GtkProgressBar_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkProgressBar_listautoptr;
     * }
     */
    public static final OfAddress GtkProgressBar_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkProgressBar_slistautoptr;
     * }
     */
    public static final OfAddress GtkProgressBar_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkProgressBar_queueautoptr;
     * }
     */
    public static final OfAddress GtkProgressBar_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkRange* GtkRange_autoptr;
     * }
     */
    public static final OfAddress GtkRange_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkRange_listautoptr;
     * }
     */
    public static final OfAddress GtkRange_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkRange_slistautoptr;
     * }
     */
    public static final OfAddress GtkRange_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkRange_queueautoptr;
     * }
     */
    public static final OfAddress GtkRange_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkRecentManager* GtkRecentManager_autoptr;
     * }
     */
    public static final OfAddress GtkRecentManager_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkRecentManager_listautoptr;
     * }
     */
    public static final OfAddress GtkRecentManager_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkRecentManager_slistautoptr;
     * }
     */
    public static final OfAddress GtkRecentManager_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkRecentManager_queueautoptr;
     * }
     */
    public static final OfAddress GtkRecentManager_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkRevealer* GtkRevealer_autoptr;
     * }
     */
    public static final OfAddress GtkRevealer_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkRevealer_listautoptr;
     * }
     */
    public static final OfAddress GtkRevealer_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkRevealer_slistautoptr;
     * }
     */
    public static final OfAddress GtkRevealer_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkRevealer_queueautoptr;
     * }
     */
    public static final OfAddress GtkRevealer_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkScale* GtkScale_autoptr;
     * }
     */
    public static final OfAddress GtkScale_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkScale_listautoptr;
     * }
     */
    public static final OfAddress GtkScale_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkScale_slistautoptr;
     * }
     */
    public static final OfAddress GtkScale_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkScale_queueautoptr;
     * }
     */
    public static final OfAddress GtkScale_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkScaleButton* GtkScaleButton_autoptr;
     * }
     */
    public static final OfAddress GtkScaleButton_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkScaleButton_listautoptr;
     * }
     */
    public static final OfAddress GtkScaleButton_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkScaleButton_slistautoptr;
     * }
     */
    public static final OfAddress GtkScaleButton_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkScaleButton_queueautoptr;
     * }
     */
    public static final OfAddress GtkScaleButton_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkScrollable* GtkScrollable_autoptr;
     * }
     */
    public static final OfAddress GtkScrollable_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkScrollable_listautoptr;
     * }
     */
    public static final OfAddress GtkScrollable_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkScrollable_slistautoptr;
     * }
     */
    public static final OfAddress GtkScrollable_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkScrollable_queueautoptr;
     * }
     */
    public static final OfAddress GtkScrollable_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkScrollbar* GtkScrollbar_autoptr;
     * }
     */
    public static final OfAddress GtkScrollbar_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkScrollbar_listautoptr;
     * }
     */
    public static final OfAddress GtkScrollbar_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkScrollbar_slistautoptr;
     * }
     */
    public static final OfAddress GtkScrollbar_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkScrollbar_queueautoptr;
     * }
     */
    public static final OfAddress GtkScrollbar_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkScrolledWindow* GtkScrolledWindow_autoptr;
     * }
     */
    public static final OfAddress GtkScrolledWindow_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkScrolledWindow_listautoptr;
     * }
     */
    public static final OfAddress GtkScrolledWindow_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkScrolledWindow_slistautoptr;
     * }
     */
    public static final OfAddress GtkScrolledWindow_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkScrolledWindow_queueautoptr;
     * }
     */
    public static final OfAddress GtkScrolledWindow_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkSearchBar* GtkSearchBar_autoptr;
     * }
     */
    public static final OfAddress GtkSearchBar_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkSearchBar_listautoptr;
     * }
     */
    public static final OfAddress GtkSearchBar_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkSearchBar_slistautoptr;
     * }
     */
    public static final OfAddress GtkSearchBar_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkSearchBar_queueautoptr;
     * }
     */
    public static final OfAddress GtkSearchBar_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkSearchEntry* GtkSearchEntry_autoptr;
     * }
     */
    public static final OfAddress GtkSearchEntry_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkSearchEntry_listautoptr;
     * }
     */
    public static final OfAddress GtkSearchEntry_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkSearchEntry_slistautoptr;
     * }
     */
    public static final OfAddress GtkSearchEntry_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkSearchEntry_queueautoptr;
     * }
     */
    public static final OfAddress GtkSearchEntry_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkSeparator* GtkSeparator_autoptr;
     * }
     */
    public static final OfAddress GtkSeparator_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkSeparator_listautoptr;
     * }
     */
    public static final OfAddress GtkSeparator_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkSeparator_slistautoptr;
     * }
     */
    public static final OfAddress GtkSeparator_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkSeparator_queueautoptr;
     * }
     */
    public static final OfAddress GtkSeparator_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkSettings* GtkSettings_autoptr;
     * }
     */
    public static final OfAddress GtkSettings_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkSettings_listautoptr;
     * }
     */
    public static final OfAddress GtkSettings_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkSettings_slistautoptr;
     * }
     */
    public static final OfAddress GtkSettings_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkSettings_queueautoptr;
     * }
     */
    public static final OfAddress GtkSettings_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkStackSidebar* GtkStackSidebar_autoptr;
     * }
     */
    public static final OfAddress GtkStackSidebar_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkStackSidebar_listautoptr;
     * }
     */
    public static final OfAddress GtkStackSidebar_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkStackSidebar_slistautoptr;
     * }
     */
    public static final OfAddress GtkStackSidebar_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkStackSidebar_queueautoptr;
     * }
     */
    public static final OfAddress GtkStackSidebar_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkSizeGroup* GtkSizeGroup_autoptr;
     * }
     */
    public static final OfAddress GtkSizeGroup_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkSizeGroup_listautoptr;
     * }
     */
    public static final OfAddress GtkSizeGroup_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkSizeGroup_slistautoptr;
     * }
     */
    public static final OfAddress GtkSizeGroup_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkSizeGroup_queueautoptr;
     * }
     */
    public static final OfAddress GtkSizeGroup_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkSpinButton* GtkSpinButton_autoptr;
     * }
     */
    public static final OfAddress GtkSpinButton_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkSpinButton_listautoptr;
     * }
     */
    public static final OfAddress GtkSpinButton_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkSpinButton_slistautoptr;
     * }
     */
    public static final OfAddress GtkSpinButton_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkSpinButton_queueautoptr;
     * }
     */
    public static final OfAddress GtkSpinButton_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkSpinner* GtkSpinner_autoptr;
     * }
     */
    public static final OfAddress GtkSpinner_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkSpinner_listautoptr;
     * }
     */
    public static final OfAddress GtkSpinner_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkSpinner_slistautoptr;
     * }
     */
    public static final OfAddress GtkSpinner_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkSpinner_queueautoptr;
     * }
     */
    public static final OfAddress GtkSpinner_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkStack* GtkStack_autoptr;
     * }
     */
    public static final OfAddress GtkStack_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkStack_listautoptr;
     * }
     */
    public static final OfAddress GtkStack_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkStack_slistautoptr;
     * }
     */
    public static final OfAddress GtkStack_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkStack_queueautoptr;
     * }
     */
    public static final OfAddress GtkStack_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkStackSwitcher* GtkStackSwitcher_autoptr;
     * }
     */
    public static final OfAddress GtkStackSwitcher_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkStackSwitcher_listautoptr;
     * }
     */
    public static final OfAddress GtkStackSwitcher_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkStackSwitcher_slistautoptr;
     * }
     */
    public static final OfAddress GtkStackSwitcher_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkStackSwitcher_queueautoptr;
     * }
     */
    public static final OfAddress GtkStackSwitcher_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkStatusbar* GtkStatusbar_autoptr;
     * }
     */
    public static final OfAddress GtkStatusbar_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkStatusbar_listautoptr;
     * }
     */
    public static final OfAddress GtkStatusbar_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkStatusbar_slistautoptr;
     * }
     */
    public static final OfAddress GtkStatusbar_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkStatusbar_queueautoptr;
     * }
     */
    public static final OfAddress GtkStatusbar_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkStyleContext* GtkStyleContext_autoptr;
     * }
     */
    public static final OfAddress GtkStyleContext_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkStyleContext_listautoptr;
     * }
     */
    public static final OfAddress GtkStyleContext_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkStyleContext_slistautoptr;
     * }
     */
    public static final OfAddress GtkStyleContext_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkStyleContext_queueautoptr;
     * }
     */
    public static final OfAddress GtkStyleContext_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkStyleProvider* GtkStyleProvider_autoptr;
     * }
     */
    public static final OfAddress GtkStyleProvider_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkStyleProvider_listautoptr;
     * }
     */
    public static final OfAddress GtkStyleProvider_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkStyleProvider_slistautoptr;
     * }
     */
    public static final OfAddress GtkStyleProvider_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkStyleProvider_queueautoptr;
     * }
     */
    public static final OfAddress GtkStyleProvider_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkSwitch* GtkSwitch_autoptr;
     * }
     */
    public static final OfAddress GtkSwitch_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkSwitch_listautoptr;
     * }
     */
    public static final OfAddress GtkSwitch_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkSwitch_slistautoptr;
     * }
     */
    public static final OfAddress GtkSwitch_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkSwitch_queueautoptr;
     * }
     */
    public static final OfAddress GtkSwitch_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkTextBuffer* GtkTextBuffer_autoptr;
     * }
     */
    public static final OfAddress GtkTextBuffer_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkTextBuffer_listautoptr;
     * }
     */
    public static final OfAddress GtkTextBuffer_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkTextBuffer_slistautoptr;
     * }
     */
    public static final OfAddress GtkTextBuffer_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkTextBuffer_queueautoptr;
     * }
     */
    public static final OfAddress GtkTextBuffer_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkTextChildAnchor* GtkTextChildAnchor_autoptr;
     * }
     */
    public static final OfAddress GtkTextChildAnchor_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkTextChildAnchor_listautoptr;
     * }
     */
    public static final OfAddress GtkTextChildAnchor_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkTextChildAnchor_slistautoptr;
     * }
     */
    public static final OfAddress GtkTextChildAnchor_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkTextChildAnchor_queueautoptr;
     * }
     */
    public static final OfAddress GtkTextChildAnchor_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkTextMark* GtkTextMark_autoptr;
     * }
     */
    public static final OfAddress GtkTextMark_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkTextMark_listautoptr;
     * }
     */
    public static final OfAddress GtkTextMark_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkTextMark_slistautoptr;
     * }
     */
    public static final OfAddress GtkTextMark_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkTextMark_queueautoptr;
     * }
     */
    public static final OfAddress GtkTextMark_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkTextTag* GtkTextTag_autoptr;
     * }
     */
    public static final OfAddress GtkTextTag_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkTextTag_listautoptr;
     * }
     */
    public static final OfAddress GtkTextTag_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkTextTag_slistautoptr;
     * }
     */
    public static final OfAddress GtkTextTag_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkTextTag_queueautoptr;
     * }
     */
    public static final OfAddress GtkTextTag_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkTextTagTable* GtkTextTagTable_autoptr;
     * }
     */
    public static final OfAddress GtkTextTagTable_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkTextTagTable_listautoptr;
     * }
     */
    public static final OfAddress GtkTextTagTable_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkTextTagTable_slistautoptr;
     * }
     */
    public static final OfAddress GtkTextTagTable_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkTextTagTable_queueautoptr;
     * }
     */
    public static final OfAddress GtkTextTagTable_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkTextView* GtkTextView_autoptr;
     * }
     */
    public static final OfAddress GtkTextView_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkTextView_listautoptr;
     * }
     */
    public static final OfAddress GtkTextView_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkTextView_slistautoptr;
     * }
     */
    public static final OfAddress GtkTextView_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkTextView_queueautoptr;
     * }
     */
    public static final OfAddress GtkTextView_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkToggleButton* GtkToggleButton_autoptr;
     * }
     */
    public static final OfAddress GtkToggleButton_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkToggleButton_listautoptr;
     * }
     */
    public static final OfAddress GtkToggleButton_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkToggleButton_slistautoptr;
     * }
     */
    public static final OfAddress GtkToggleButton_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkToggleButton_queueautoptr;
     * }
     */
    public static final OfAddress GtkToggleButton_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkTooltip* GtkTooltip_autoptr;
     * }
     */
    public static final OfAddress GtkTooltip_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkTooltip_listautoptr;
     * }
     */
    public static final OfAddress GtkTooltip_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkTooltip_slistautoptr;
     * }
     */
    public static final OfAddress GtkTooltip_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkTooltip_queueautoptr;
     * }
     */
    public static final OfAddress GtkTooltip_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkTreeDragDest* GtkTreeDragDest_autoptr;
     * }
     */
    public static final OfAddress GtkTreeDragDest_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkTreeDragDest_listautoptr;
     * }
     */
    public static final OfAddress GtkTreeDragDest_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkTreeDragDest_slistautoptr;
     * }
     */
    public static final OfAddress GtkTreeDragDest_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkTreeDragDest_queueautoptr;
     * }
     */
    public static final OfAddress GtkTreeDragDest_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkTreeDragSource* GtkTreeDragSource_autoptr;
     * }
     */
    public static final OfAddress GtkTreeDragSource_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkTreeDragSource_listautoptr;
     * }
     */
    public static final OfAddress GtkTreeDragSource_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkTreeDragSource_slistautoptr;
     * }
     */
    public static final OfAddress GtkTreeDragSource_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkTreeDragSource_queueautoptr;
     * }
     */
    public static final OfAddress GtkTreeDragSource_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkTreeModel* GtkTreeModel_autoptr;
     * }
     */
    public static final OfAddress GtkTreeModel_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkTreeModel_listautoptr;
     * }
     */
    public static final OfAddress GtkTreeModel_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkTreeModel_slistautoptr;
     * }
     */
    public static final OfAddress GtkTreeModel_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkTreeModel_queueautoptr;
     * }
     */
    public static final OfAddress GtkTreeModel_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkTreeModelFilter* GtkTreeModelFilter_autoptr;
     * }
     */
    public static final OfAddress GtkTreeModelFilter_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkTreeModelFilter_listautoptr;
     * }
     */
    public static final OfAddress GtkTreeModelFilter_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkTreeModelFilter_slistautoptr;
     * }
     */
    public static final OfAddress GtkTreeModelFilter_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkTreeModelFilter_queueautoptr;
     * }
     */
    public static final OfAddress GtkTreeModelFilter_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkTreeModelSort* GtkTreeModelSort_autoptr;
     * }
     */
    public static final OfAddress GtkTreeModelSort_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkTreeModelSort_listautoptr;
     * }
     */
    public static final OfAddress GtkTreeModelSort_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkTreeModelSort_slistautoptr;
     * }
     */
    public static final OfAddress GtkTreeModelSort_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkTreeModelSort_queueautoptr;
     * }
     */
    public static final OfAddress GtkTreeModelSort_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkTreeSelection* GtkTreeSelection_autoptr;
     * }
     */
    public static final OfAddress GtkTreeSelection_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkTreeSelection_listautoptr;
     * }
     */
    public static final OfAddress GtkTreeSelection_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkTreeSelection_slistautoptr;
     * }
     */
    public static final OfAddress GtkTreeSelection_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkTreeSelection_queueautoptr;
     * }
     */
    public static final OfAddress GtkTreeSelection_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkTreeSortable* GtkTreeSortable_autoptr;
     * }
     */
    public static final OfAddress GtkTreeSortable_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkTreeSortable_listautoptr;
     * }
     */
    public static final OfAddress GtkTreeSortable_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkTreeSortable_slistautoptr;
     * }
     */
    public static final OfAddress GtkTreeSortable_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkTreeSortable_queueautoptr;
     * }
     */
    public static final OfAddress GtkTreeSortable_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkTreeStore* GtkTreeStore_autoptr;
     * }
     */
    public static final OfAddress GtkTreeStore_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkTreeStore_listautoptr;
     * }
     */
    public static final OfAddress GtkTreeStore_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkTreeStore_slistautoptr;
     * }
     */
    public static final OfAddress GtkTreeStore_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkTreeStore_queueautoptr;
     * }
     */
    public static final OfAddress GtkTreeStore_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkTreeView* GtkTreeView_autoptr;
     * }
     */
    public static final OfAddress GtkTreeView_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkTreeView_listautoptr;
     * }
     */
    public static final OfAddress GtkTreeView_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkTreeView_slistautoptr;
     * }
     */
    public static final OfAddress GtkTreeView_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkTreeView_queueautoptr;
     * }
     */
    public static final OfAddress GtkTreeView_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkTreeViewColumn* GtkTreeViewColumn_autoptr;
     * }
     */
    public static final OfAddress GtkTreeViewColumn_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkTreeViewColumn_listautoptr;
     * }
     */
    public static final OfAddress GtkTreeViewColumn_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkTreeViewColumn_slistautoptr;
     * }
     */
    public static final OfAddress GtkTreeViewColumn_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkTreeViewColumn_queueautoptr;
     * }
     */
    public static final OfAddress GtkTreeViewColumn_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkViewport* GtkViewport_autoptr;
     * }
     */
    public static final OfAddress GtkViewport_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkViewport_listautoptr;
     * }
     */
    public static final OfAddress GtkViewport_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkViewport_slistautoptr;
     * }
     */
    public static final OfAddress GtkViewport_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkViewport_queueautoptr;
     * }
     */
    public static final OfAddress GtkViewport_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkVolumeButton* GtkVolumeButton_autoptr;
     * }
     */
    public static final OfAddress GtkVolumeButton_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkVolumeButton_listautoptr;
     * }
     */
    public static final OfAddress GtkVolumeButton_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkVolumeButton_slistautoptr;
     * }
     */
    public static final OfAddress GtkVolumeButton_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkVolumeButton_queueautoptr;
     * }
     */
    public static final OfAddress GtkVolumeButton_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkPaperSize* GtkPaperSize_autoptr;
     * }
     */
    public static final OfAddress GtkPaperSize_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkPaperSize_listautoptr;
     * }
     */
    public static final OfAddress GtkPaperSize_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkPaperSize_slistautoptr;
     * }
     */
    public static final OfAddress GtkPaperSize_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkPaperSize_queueautoptr;
     * }
     */
    public static final OfAddress GtkPaperSize_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkRecentInfo* GtkRecentInfo_autoptr;
     * }
     */
    public static final OfAddress GtkRecentInfo_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkRecentInfo_listautoptr;
     * }
     */
    public static final OfAddress GtkRecentInfo_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkRecentInfo_slistautoptr;
     * }
     */
    public static final OfAddress GtkRecentInfo_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkRecentInfo_queueautoptr;
     * }
     */
    public static final OfAddress GtkRecentInfo_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkTextIter* GtkTextIter_autoptr;
     * }
     */
    public static final OfAddress GtkTextIter_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkTextIter_listautoptr;
     * }
     */
    public static final OfAddress GtkTextIter_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkTextIter_slistautoptr;
     * }
     */
    public static final OfAddress GtkTextIter_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkTextIter_queueautoptr;
     * }
     */
    public static final OfAddress GtkTextIter_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkTreeIter* GtkTreeIter_autoptr;
     * }
     */
    public static final OfAddress GtkTreeIter_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkTreeIter_listautoptr;
     * }
     */
    public static final OfAddress GtkTreeIter_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkTreeIter_slistautoptr;
     * }
     */
    public static final OfAddress GtkTreeIter_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkTreeIter_queueautoptr;
     * }
     */
    public static final OfAddress GtkTreeIter_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkTreePath* GtkTreePath_autoptr;
     * }
     */
    public static final OfAddress GtkTreePath_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkTreePath_listautoptr;
     * }
     */
    public static final OfAddress GtkTreePath_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkTreePath_slistautoptr;
     * }
     */
    public static final OfAddress GtkTreePath_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkTreePath_queueautoptr;
     * }
     */
    public static final OfAddress GtkTreePath_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkTreeRowReference* GtkTreeRowReference_autoptr;
     * }
     */
    public static final OfAddress GtkTreeRowReference_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkTreeRowReference_listautoptr;
     * }
     */
    public static final OfAddress GtkTreeRowReference_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkTreeRowReference_slistautoptr;
     * }
     */
    public static final OfAddress GtkTreeRowReference_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkTreeRowReference_queueautoptr;
     * }
     */
    public static final OfAddress GtkTreeRowReference_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * #define NULL 0
     * }
     */
    public static MemorySegment NULL() {
        return constants$1937.NULL$ADDR;
    }
    /**
     * {@snippet :
     * #define g_macro__has_attribute 0
     * }
     */
    public static int g_macro__has_attribute() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define g_macro__has_feature 0
     * }
     */
    public static int g_macro__has_feature() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define g_macro__has_builtin 0
     * }
     */
    public static int g_macro__has_builtin() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define g_macro__has_extension 0
     * }
     */
    public static int g_macro__has_extension() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define G_GNUC_FUNCTION ""
     * }
     */
    public static MemorySegment G_GNUC_FUNCTION() {
        return constants$1937.G_GNUC_FUNCTION$SEGMENT;
    }
    /**
     * {@snippet :
     * #define G_GNUC_PRETTY_FUNCTION ""
     * }
     */
    public static MemorySegment G_GNUC_PRETTY_FUNCTION() {
        return constants$1937.G_GNUC_PRETTY_FUNCTION$SEGMENT;
    }
    /**
     * {@snippet :
     * #define G_STRLOC "/tmp/jextract$15822390321994032325.h:46"
     * }
     */
    public static MemorySegment G_STRLOC() {
        return constants$1937.G_STRLOC$SEGMENT;
    }
    /**
     * {@snippet :
     * #define FALSE 0
     * }
     */
    public static int FALSE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define TRUE 1
     * }
     */
    public static int TRUE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_C_SOURCE 200809
     * }
     */
    public static long _POSIX_C_SOURCE() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define __TIMESIZE 64
     * }
     */
    public static int __TIMESIZE() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define __STDC_IEC_60559_BFP__ 201404
     * }
     */
    public static long __STDC_IEC_60559_BFP__() {
        return 201404L;
    }
    /**
     * {@snippet :
     * #define __STDC_IEC_60559_COMPLEX__ 201404
     * }
     */
    public static long __STDC_IEC_60559_COMPLEX__() {
        return 201404L;
    }
    /**
     * {@snippet :
     * #define __STDC_ISO_10646__ 201706
     * }
     */
    public static long __STDC_ISO_10646__() {
        return 201706L;
    }
    /**
     * {@snippet :
     * #define LLONG_MIN -9223372036854775808
     * }
     */
    public static long LLONG_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define LLONG_MAX 9223372036854775807
     * }
     */
    public static long LLONG_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define ULLONG_MAX -1
     * }
     */
    public static long ULLONG_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define PTHREAD_DESTRUCTOR_ITERATIONS 4
     * }
     */
    public static int PTHREAD_DESTRUCTOR_ITERATIONS() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define SEM_VALUE_MAX 2147483647
     * }
     */
    public static int SEM_VALUE_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define SSIZE_MAX 9223372036854775807
     * }
     */
    public static long SSIZE_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define BC_BASE_MAX 99
     * }
     */
    public static int BC_BASE_MAX() {
        return (int)99L;
    }
    /**
     * {@snippet :
     * #define BC_DIM_MAX 2048
     * }
     */
    public static int BC_DIM_MAX() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define BC_SCALE_MAX 99
     * }
     */
    public static int BC_SCALE_MAX() {
        return (int)99L;
    }
    /**
     * {@snippet :
     * #define BC_STRING_MAX 1000
     * }
     */
    public static int BC_STRING_MAX() {
        return (int)1000L;
    }
    /**
     * {@snippet :
     * #define EXPR_NEST_MAX 32
     * }
     */
    public static int EXPR_NEST_MAX() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define LINE_MAX 2048
     * }
     */
    public static int LINE_MAX() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define RE_DUP_MAX 32767
     * }
     */
    public static int RE_DUP_MAX() {
        return (int)32767L;
    }
    /**
     * {@snippet :
     * #define SCHAR_MAX 127
     * }
     */
    public static int SCHAR_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define SHRT_MAX 32767
     * }
     */
    public static int SHRT_MAX() {
        return (int)32767L;
    }
    /**
     * {@snippet :
     * #define INT_MAX 2147483647
     * }
     */
    public static int INT_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define LONG_MAX 9223372036854775807
     * }
     */
    public static long LONG_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define SCHAR_MIN -128
     * }
     */
    public static int SCHAR_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define SHRT_MIN -32768
     * }
     */
    public static int SHRT_MIN() {
        return (int)-32768L;
    }
    /**
     * {@snippet :
     * #define INT_MIN -2147483648
     * }
     */
    public static int INT_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define LONG_MIN -9223372036854775808
     * }
     */
    public static long LONG_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define UCHAR_MAX 255
     * }
     */
    public static int UCHAR_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define USHRT_MAX 65535
     * }
     */
    public static int USHRT_MAX() {
        return (int)65535L;
    }
    /**
     * {@snippet :
     * #define UINT_MAX 4294967295
     * }
     */
    public static int UINT_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define ULONG_MAX -1
     * }
     */
    public static long ULONG_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define CHAR_BIT 8
     * }
     */
    public static int CHAR_BIT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define CHAR_MIN -128
     * }
     */
    public static int CHAR_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define CHAR_MAX 127
     * }
     */
    public static int CHAR_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define FLT_EVAL_METHOD 0
     * }
     */
    public static int FLT_EVAL_METHOD() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define FLT_RADIX 2
     * }
     */
    public static int FLT_RADIX() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define FLT_MANT_DIG 24
     * }
     */
    public static int FLT_MANT_DIG() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * #define DBL_MANT_DIG 53
     * }
     */
    public static int DBL_MANT_DIG() {
        return (int)53L;
    }
    /**
     * {@snippet :
     * #define LDBL_MANT_DIG 64
     * }
     */
    public static int LDBL_MANT_DIG() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define DECIMAL_DIG 21
     * }
     */
    public static int DECIMAL_DIG() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * #define FLT_DIG 6
     * }
     */
    public static int FLT_DIG() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define DBL_DIG 15
     * }
     */
    public static int DBL_DIG() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * #define LDBL_DIG 18
     * }
     */
    public static int LDBL_DIG() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * #define FLT_MIN_EXP -125
     * }
     */
    public static int FLT_MIN_EXP() {
        return (int)-125L;
    }
    /**
     * {@snippet :
     * #define DBL_MIN_EXP -1021
     * }
     */
    public static int DBL_MIN_EXP() {
        return (int)-1021L;
    }
    /**
     * {@snippet :
     * #define LDBL_MIN_EXP -16381
     * }
     */
    public static int LDBL_MIN_EXP() {
        return (int)-16381L;
    }
    /**
     * {@snippet :
     * #define FLT_MIN_10_EXP -37
     * }
     */
    public static int FLT_MIN_10_EXP() {
        return (int)-37L;
    }
    /**
     * {@snippet :
     * #define DBL_MIN_10_EXP -307
     * }
     */
    public static int DBL_MIN_10_EXP() {
        return (int)-307L;
    }
    /**
     * {@snippet :
     * #define LDBL_MIN_10_EXP -4931
     * }
     */
    public static int LDBL_MIN_10_EXP() {
        return (int)-4931L;
    }
    /**
     * {@snippet :
     * #define FLT_MAX_EXP 128
     * }
     */
    public static int FLT_MAX_EXP() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define DBL_MAX_EXP 1024
     * }
     */
    public static int DBL_MAX_EXP() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define LDBL_MAX_EXP 16384
     * }
     */
    public static int LDBL_MAX_EXP() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * #define FLT_MAX_10_EXP 38
     * }
     */
    public static int FLT_MAX_10_EXP() {
        return (int)38L;
    }
    /**
     * {@snippet :
     * #define DBL_MAX_10_EXP 308
     * }
     */
    public static int DBL_MAX_10_EXP() {
        return (int)308L;
    }
    /**
     * {@snippet :
     * #define LDBL_MAX_10_EXP 4932
     * }
     */
    public static int LDBL_MAX_10_EXP() {
        return (int)4932L;
    }
    /**
     * {@snippet :
     * #define FLT_MAX 3.4028234663852886E38
     * }
     */
    public static float FLT_MAX() {
        return 3.4028234663852886E38f;
    }
    /**
     * {@snippet :
     * #define DBL_MAX 1.7976931348623157E308
     * }
     */
    public static double DBL_MAX() {
        return 1.7976931348623157E308d;
    }
    /**
     * {@snippet :
     * #define FLT_EPSILON 1.1920928955078125E-7
     * }
     */
    public static float FLT_EPSILON() {
        return 1.1920928955078125E-7f;
    }
    /**
     * {@snippet :
     * #define DBL_EPSILON 2.220446049250313E-16
     * }
     */
    public static double DBL_EPSILON() {
        return 2.220446049250313E-16d;
    }
    /**
     * {@snippet :
     * #define FLT_MIN 1.1754943508222875E-38
     * }
     */
    public static float FLT_MIN() {
        return 1.1754943508222875E-38f;
    }
    /**
     * {@snippet :
     * #define DBL_MIN 2.2250738585072014E-308
     * }
     */
    public static double DBL_MIN() {
        return 2.2250738585072014E-308d;
    }
    /**
     * {@snippet :
     * #define FLT_TRUE_MIN 1.401298464324817E-45
     * }
     */
    public static float FLT_TRUE_MIN() {
        return 1.401298464324817E-45f;
    }
    /**
     * {@snippet :
     * #define DBL_TRUE_MIN 4.9E-324
     * }
     */
    public static double DBL_TRUE_MIN() {
        return 4.9E-324d;
    }
    /**
     * {@snippet :
     * #define FLT_DECIMAL_DIG 9
     * }
     */
    public static int FLT_DECIMAL_DIG() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define DBL_DECIMAL_DIG 17
     * }
     */
    public static int DBL_DECIMAL_DIG() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * #define LDBL_DECIMAL_DIG 21
     * }
     */
    public static int LDBL_DECIMAL_DIG() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * #define FLT_HAS_SUBNORM 1
     * }
     */
    public static int FLT_HAS_SUBNORM() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define DBL_HAS_SUBNORM 1
     * }
     */
    public static int DBL_HAS_SUBNORM() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define LDBL_HAS_SUBNORM 1
     * }
     */
    public static int LDBL_HAS_SUBNORM() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define G_MINFLOAT 1.1754943508222875E-38
     * }
     */
    public static float G_MINFLOAT() {
        return 1.1754943508222875E-38f;
    }
    /**
     * {@snippet :
     * #define G_MAXFLOAT 3.4028234663852886E38
     * }
     */
    public static float G_MAXFLOAT() {
        return 3.4028234663852886E38f;
    }
    /**
     * {@snippet :
     * #define G_MINDOUBLE 2.2250738585072014E-308
     * }
     */
    public static double G_MINDOUBLE() {
        return 2.2250738585072014E-308d;
    }
    /**
     * {@snippet :
     * #define G_MAXDOUBLE 1.7976931348623157E308
     * }
     */
    public static double G_MAXDOUBLE() {
        return 1.7976931348623157E308d;
    }
    /**
     * {@snippet :
     * #define G_MINSHORT -32768
     * }
     */
    public static int G_MINSHORT() {
        return (int)-32768L;
    }
    /**
     * {@snippet :
     * #define G_MAXSHORT 32767
     * }
     */
    public static int G_MAXSHORT() {
        return (int)32767L;
    }
    /**
     * {@snippet :
     * #define G_MAXUSHORT 65535
     * }
     */
    public static int G_MAXUSHORT() {
        return (int)65535L;
    }
    /**
     * {@snippet :
     * #define G_MININT -2147483648
     * }
     */
    public static int G_MININT() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define G_MAXINT 2147483647
     * }
     */
    public static int G_MAXINT() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define G_MAXUINT 4294967295
     * }
     */
    public static int G_MAXUINT() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define G_MINLONG -9223372036854775808
     * }
     */
    public static long G_MINLONG() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define G_MAXLONG 9223372036854775807
     * }
     */
    public static long G_MAXLONG() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define G_MAXULONG -1
     * }
     */
    public static long G_MAXULONG() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define G_GINT16_MODIFIER "h"
     * }
     */
    public static MemorySegment G_GINT16_MODIFIER() {
        return constants$1938.G_GINT16_MODIFIER$SEGMENT;
    }
    /**
     * {@snippet :
     * #define G_GINT16_FORMAT "hi"
     * }
     */
    public static MemorySegment G_GINT16_FORMAT() {
        return constants$1938.G_GINT16_FORMAT$SEGMENT;
    }
    /**
     * {@snippet :
     * #define G_GUINT16_FORMAT "hu"
     * }
     */
    public static MemorySegment G_GUINT16_FORMAT() {
        return constants$1938.G_GUINT16_FORMAT$SEGMENT;
    }
    /**
     * {@snippet :
     * #define G_GINT32_MODIFIER ""
     * }
     */
    public static MemorySegment G_GINT32_MODIFIER() {
        return constants$1938.G_GINT32_MODIFIER$SEGMENT;
    }
    /**
     * {@snippet :
     * #define G_GINT32_FORMAT "i"
     * }
     */
    public static MemorySegment G_GINT32_FORMAT() {
        return constants$1938.G_GINT32_FORMAT$SEGMENT;
    }
    /**
     * {@snippet :
     * #define G_GUINT32_FORMAT "u"
     * }
     */
    public static MemorySegment G_GUINT32_FORMAT() {
        return constants$1938.G_GUINT32_FORMAT$SEGMENT;
    }
    /**
     * {@snippet :
     * #define G_GINT64_MODIFIER "l"
     * }
     */
    public static MemorySegment G_GINT64_MODIFIER() {
        return constants$1939.G_GINT64_MODIFIER$SEGMENT;
    }
    /**
     * {@snippet :
     * #define G_GINT64_FORMAT "li"
     * }
     */
    public static MemorySegment G_GINT64_FORMAT() {
        return constants$1939.G_GINT64_FORMAT$SEGMENT;
    }
    /**
     * {@snippet :
     * #define G_GUINT64_FORMAT "lu"
     * }
     */
    public static MemorySegment G_GUINT64_FORMAT() {
        return constants$1939.G_GUINT64_FORMAT$SEGMENT;
    }
    /**
     * {@snippet :
     * #define G_GSIZE_MODIFIER "l"
     * }
     */
    public static MemorySegment G_GSIZE_MODIFIER() {
        return constants$1939.G_GSIZE_MODIFIER$SEGMENT;
    }
    /**
     * {@snippet :
     * #define G_GSSIZE_MODIFIER "l"
     * }
     */
    public static MemorySegment G_GSSIZE_MODIFIER() {
        return constants$1939.G_GSSIZE_MODIFIER$SEGMENT;
    }
    /**
     * {@snippet :
     * #define G_GSIZE_FORMAT "lu"
     * }
     */
    public static MemorySegment G_GSIZE_FORMAT() {
        return constants$1939.G_GSIZE_FORMAT$SEGMENT;
    }
    /**
     * {@snippet :
     * #define G_GSSIZE_FORMAT "li"
     * }
     */
    public static MemorySegment G_GSSIZE_FORMAT() {
        return constants$1940.G_GSSIZE_FORMAT$SEGMENT;
    }
    /**
     * {@snippet :
     * #define G_MAXSIZE -1
     * }
     */
    public static long G_MAXSIZE() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define G_MINSSIZE -9223372036854775808
     * }
     */
    public static long G_MINSSIZE() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define G_MAXSSIZE 9223372036854775807
     * }
     */
    public static long G_MAXSSIZE() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define G_MINOFFSET -9223372036854775808
     * }
     */
    public static long G_MINOFFSET() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define G_MAXOFFSET 9223372036854775807
     * }
     */
    public static long G_MAXOFFSET() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define G_GOFFSET_MODIFIER "l"
     * }
     */
    public static MemorySegment G_GOFFSET_MODIFIER() {
        return constants$1940.G_GOFFSET_MODIFIER$SEGMENT;
    }
    /**
     * {@snippet :
     * #define G_GOFFSET_FORMAT "li"
     * }
     */
    public static MemorySegment G_GOFFSET_FORMAT() {
        return constants$1940.G_GOFFSET_FORMAT$SEGMENT;
    }
    /**
     * {@snippet :
     * #define G_POLLFD_FORMAT "%d"
     * }
     */
    public static MemorySegment G_POLLFD_FORMAT() {
        return constants$1940.G_POLLFD_FORMAT$SEGMENT;
    }
    /**
     * {@snippet :
     * #define G_GINTPTR_MODIFIER "l"
     * }
     */
    public static MemorySegment G_GINTPTR_MODIFIER() {
        return constants$1940.G_GINTPTR_MODIFIER$SEGMENT;
    }
    /**
     * {@snippet :
     * #define G_GINTPTR_FORMAT "li"
     * }
     */
    public static MemorySegment G_GINTPTR_FORMAT() {
        return constants$1940.G_GINTPTR_FORMAT$SEGMENT;
    }
}


