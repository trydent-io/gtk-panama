// Generated by jextract

package gtk;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GtkCellRendererClass {
 *     GInitiallyUnownedClass parent_class;
 *     GtkSizeRequestMode (*get_request_mode)(GtkCellRenderer*);
 *     void (*get_preferred_width)(GtkCellRenderer*,GtkWidget*,int*,int*);
 *     void (*get_preferred_height_for_width)(GtkCellRenderer*,GtkWidget*,int,int*,int*);
 *     void (*get_preferred_height)(GtkCellRenderer*,GtkWidget*,int*,int*);
 *     void (*get_preferred_width_for_height)(GtkCellRenderer*,GtkWidget*,int,int*,int*);
 *     void (*get_aligned_area)(GtkCellRenderer*,GtkWidget*,GtkCellRendererState,const GdkRectangle*,GdkRectangle*);
 *     void (*snapshot)(GtkCellRenderer*,GtkSnapshot*,GtkWidget*,const GdkRectangle*,const GdkRectangle*,GtkCellRendererState);
 *     gboolean (*activate)(GtkCellRenderer*,GdkEvent*,GtkWidget*,char*,const GdkRectangle*,const GdkRectangle*,GtkCellRendererState);
 *     GtkCellEditable* (*start_editing)(GtkCellRenderer*,GdkEvent*,GtkWidget*,char*,const GdkRectangle*,const GdkRectangle*,GtkCellRendererState);
 *     void (*editing_canceled)(GtkCellRenderer*);
 *     void (*editing_started)(GtkCellRenderer*,GtkCellEditable*,char*);
 *     gpointer padding[8];
 * };
 * }
 */
public class _GtkCellRendererClass {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("get_request_mode"),
        Constants$root.C_POINTER$LAYOUT.withName("get_preferred_width"),
        Constants$root.C_POINTER$LAYOUT.withName("get_preferred_height_for_width"),
        Constants$root.C_POINTER$LAYOUT.withName("get_preferred_height"),
        Constants$root.C_POINTER$LAYOUT.withName("get_preferred_width_for_height"),
        Constants$root.C_POINTER$LAYOUT.withName("get_aligned_area"),
        Constants$root.C_POINTER$LAYOUT.withName("snapshot"),
        Constants$root.C_POINTER$LAYOUT.withName("activate"),
        Constants$root.C_POINTER$LAYOUT.withName("start_editing"),
        Constants$root.C_POINTER$LAYOUT.withName("editing_canceled"),
        Constants$root.C_POINTER$LAYOUT.withName("editing_started"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_POINTER$LAYOUT).withName("padding")
    ).withName("_GtkCellRendererClass");
    public static MemoryLayout $LAYOUT() {
        return _GtkCellRendererClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor get_request_mode$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_request_mode_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_request_mode_UP$MH = RuntimeHelper.upcallHandle(get_request_mode.class, "apply", _GtkCellRendererClass.get_request_mode_UP$FUNC);
    static final FunctionDescriptor get_request_mode_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_request_mode_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkCellRendererClass.get_request_mode_DOWN$FUNC
    );
    /**
     * {@snippet :
 * GtkSizeRequestMode (*get_request_mode)(GtkCellRenderer*);
     * }
     */
    public interface get_request_mode {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(get_request_mode fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkCellRendererClass.get_request_mode_UP$MH, fi, _GtkCellRendererClass.get_request_mode$FUNC, scope);
        }
        static get_request_mode ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)_GtkCellRendererClass.get_request_mode_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_request_mode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_request_mode"));
    public static VarHandle get_request_mode$VH() {
        return _GtkCellRendererClass.get_request_mode$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GtkSizeRequestMode (*get_request_mode)(GtkCellRenderer*);
     * }
     */
    public static MemorySegment get_request_mode$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkCellRendererClass.get_request_mode$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GtkSizeRequestMode (*get_request_mode)(GtkCellRenderer*);
     * }
     */
    public static void get_request_mode$set(MemorySegment seg, MemorySegment x) {
        _GtkCellRendererClass.get_request_mode$VH.set(seg, x);
    }
    public static MemorySegment get_request_mode$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkCellRendererClass.get_request_mode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_request_mode$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkCellRendererClass.get_request_mode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_request_mode get_request_mode(MemorySegment segment, SegmentScope scope) {
        return get_request_mode.ofAddress(get_request_mode$get(segment), scope);
    }
    static final FunctionDescriptor get_preferred_width$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_preferred_width_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_preferred_width_UP$MH = RuntimeHelper.upcallHandle(get_preferred_width.class, "apply", _GtkCellRendererClass.get_preferred_width_UP$FUNC);
    static final FunctionDescriptor get_preferred_width_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_preferred_width_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkCellRendererClass.get_preferred_width_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*get_preferred_width)(GtkCellRenderer*,GtkWidget*,int*,int*);
     * }
     */
    public interface get_preferred_width {

        void apply(java.lang.foreign.MemorySegment model, java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment iter, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(get_preferred_width fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkCellRendererClass.get_preferred_width_UP$MH, fi, _GtkCellRendererClass.get_preferred_width$FUNC, scope);
        }
        static get_preferred_width ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _model, java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _iter, java.lang.foreign.MemorySegment _data) -> {
                try {
                    _GtkCellRendererClass.get_preferred_width_DOWN$MH.invokeExact(symbol, _model, _path, _iter, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_preferred_width$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_preferred_width"));
    public static VarHandle get_preferred_width$VH() {
        return _GtkCellRendererClass.get_preferred_width$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_preferred_width)(GtkCellRenderer*,GtkWidget*,int*,int*);
     * }
     */
    public static MemorySegment get_preferred_width$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkCellRendererClass.get_preferred_width$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_preferred_width)(GtkCellRenderer*,GtkWidget*,int*,int*);
     * }
     */
    public static void get_preferred_width$set(MemorySegment seg, MemorySegment x) {
        _GtkCellRendererClass.get_preferred_width$VH.set(seg, x);
    }
    public static MemorySegment get_preferred_width$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkCellRendererClass.get_preferred_width$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_preferred_width$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkCellRendererClass.get_preferred_width$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_preferred_width get_preferred_width(MemorySegment segment, SegmentScope scope) {
        return get_preferred_width.ofAddress(get_preferred_width$get(segment), scope);
    }
    static final FunctionDescriptor get_preferred_height_for_width$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_preferred_height_for_width_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_preferred_height_for_width_UP$MH = RuntimeHelper.upcallHandle(get_preferred_height_for_width.class, "apply", _GtkCellRendererClass.get_preferred_height_for_width_UP$FUNC);
    static final FunctionDescriptor get_preferred_height_for_width_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_preferred_height_for_width_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkCellRendererClass.get_preferred_height_for_width_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*get_preferred_height_for_width)(GtkCellRenderer*,GtkWidget*,int,int*,int*);
     * }
     */
    public interface get_preferred_height_for_width {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(get_preferred_height_for_width fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkCellRendererClass.get_preferred_height_for_width_UP$MH, fi, _GtkCellRendererClass.get_preferred_height_for_width$FUNC, scope);
        }
        static get_preferred_height_for_width ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    _GtkCellRendererClass.get_preferred_height_for_width_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_preferred_height_for_width$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_preferred_height_for_width"));
    public static VarHandle get_preferred_height_for_width$VH() {
        return _GtkCellRendererClass.get_preferred_height_for_width$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_preferred_height_for_width)(GtkCellRenderer*,GtkWidget*,int,int*,int*);
     * }
     */
    public static MemorySegment get_preferred_height_for_width$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkCellRendererClass.get_preferred_height_for_width$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_preferred_height_for_width)(GtkCellRenderer*,GtkWidget*,int,int*,int*);
     * }
     */
    public static void get_preferred_height_for_width$set(MemorySegment seg, MemorySegment x) {
        _GtkCellRendererClass.get_preferred_height_for_width$VH.set(seg, x);
    }
    public static MemorySegment get_preferred_height_for_width$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkCellRendererClass.get_preferred_height_for_width$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_preferred_height_for_width$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkCellRendererClass.get_preferred_height_for_width$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_preferred_height_for_width get_preferred_height_for_width(MemorySegment segment, SegmentScope scope) {
        return get_preferred_height_for_width.ofAddress(get_preferred_height_for_width$get(segment), scope);
    }
    static final FunctionDescriptor get_preferred_height$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_preferred_height_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_preferred_height_UP$MH = RuntimeHelper.upcallHandle(get_preferred_height.class, "apply", _GtkCellRendererClass.get_preferred_height_UP$FUNC);
    static final FunctionDescriptor get_preferred_height_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_preferred_height_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkCellRendererClass.get_preferred_height_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*get_preferred_height)(GtkCellRenderer*,GtkWidget*,int*,int*);
     * }
     */
    public interface get_preferred_height {

        void apply(java.lang.foreign.MemorySegment model, java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment iter, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(get_preferred_height fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkCellRendererClass.get_preferred_height_UP$MH, fi, _GtkCellRendererClass.get_preferred_height$FUNC, scope);
        }
        static get_preferred_height ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _model, java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _iter, java.lang.foreign.MemorySegment _data) -> {
                try {
                    _GtkCellRendererClass.get_preferred_height_DOWN$MH.invokeExact(symbol, _model, _path, _iter, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_preferred_height$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_preferred_height"));
    public static VarHandle get_preferred_height$VH() {
        return _GtkCellRendererClass.get_preferred_height$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_preferred_height)(GtkCellRenderer*,GtkWidget*,int*,int*);
     * }
     */
    public static MemorySegment get_preferred_height$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkCellRendererClass.get_preferred_height$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_preferred_height)(GtkCellRenderer*,GtkWidget*,int*,int*);
     * }
     */
    public static void get_preferred_height$set(MemorySegment seg, MemorySegment x) {
        _GtkCellRendererClass.get_preferred_height$VH.set(seg, x);
    }
    public static MemorySegment get_preferred_height$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkCellRendererClass.get_preferred_height$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_preferred_height$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkCellRendererClass.get_preferred_height$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_preferred_height get_preferred_height(MemorySegment segment, SegmentScope scope) {
        return get_preferred_height.ofAddress(get_preferred_height$get(segment), scope);
    }
    static final FunctionDescriptor get_preferred_width_for_height$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_preferred_width_for_height_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_preferred_width_for_height_UP$MH = RuntimeHelper.upcallHandle(get_preferred_width_for_height.class, "apply", _GtkCellRendererClass.get_preferred_width_for_height_UP$FUNC);
    static final FunctionDescriptor get_preferred_width_for_height_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_preferred_width_for_height_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkCellRendererClass.get_preferred_width_for_height_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*get_preferred_width_for_height)(GtkCellRenderer*,GtkWidget*,int,int*,int*);
     * }
     */
    public interface get_preferred_width_for_height {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(get_preferred_width_for_height fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkCellRendererClass.get_preferred_width_for_height_UP$MH, fi, _GtkCellRendererClass.get_preferred_width_for_height$FUNC, scope);
        }
        static get_preferred_width_for_height ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    _GtkCellRendererClass.get_preferred_width_for_height_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_preferred_width_for_height$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_preferred_width_for_height"));
    public static VarHandle get_preferred_width_for_height$VH() {
        return _GtkCellRendererClass.get_preferred_width_for_height$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_preferred_width_for_height)(GtkCellRenderer*,GtkWidget*,int,int*,int*);
     * }
     */
    public static MemorySegment get_preferred_width_for_height$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkCellRendererClass.get_preferred_width_for_height$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_preferred_width_for_height)(GtkCellRenderer*,GtkWidget*,int,int*,int*);
     * }
     */
    public static void get_preferred_width_for_height$set(MemorySegment seg, MemorySegment x) {
        _GtkCellRendererClass.get_preferred_width_for_height$VH.set(seg, x);
    }
    public static MemorySegment get_preferred_width_for_height$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkCellRendererClass.get_preferred_width_for_height$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_preferred_width_for_height$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkCellRendererClass.get_preferred_width_for_height$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_preferred_width_for_height get_preferred_width_for_height(MemorySegment segment, SegmentScope scope) {
        return get_preferred_width_for_height.ofAddress(get_preferred_width_for_height$get(segment), scope);
    }
    static final FunctionDescriptor get_aligned_area$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_aligned_area_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_aligned_area_UP$MH = RuntimeHelper.upcallHandle(get_aligned_area.class, "apply", _GtkCellRendererClass.get_aligned_area_UP$FUNC);
    static final FunctionDescriptor get_aligned_area_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_aligned_area_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkCellRendererClass.get_aligned_area_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*get_aligned_area)(GtkCellRenderer*,GtkWidget*,GtkCellRendererState,const GdkRectangle*,GdkRectangle*);
     * }
     */
    public interface get_aligned_area {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(get_aligned_area fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkCellRendererClass.get_aligned_area_UP$MH, fi, _GtkCellRendererClass.get_aligned_area$FUNC, scope);
        }
        static get_aligned_area ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    _GtkCellRendererClass.get_aligned_area_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_aligned_area$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_aligned_area"));
    public static VarHandle get_aligned_area$VH() {
        return _GtkCellRendererClass.get_aligned_area$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_aligned_area)(GtkCellRenderer*,GtkWidget*,GtkCellRendererState,const GdkRectangle*,GdkRectangle*);
     * }
     */
    public static MemorySegment get_aligned_area$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkCellRendererClass.get_aligned_area$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_aligned_area)(GtkCellRenderer*,GtkWidget*,GtkCellRendererState,const GdkRectangle*,GdkRectangle*);
     * }
     */
    public static void get_aligned_area$set(MemorySegment seg, MemorySegment x) {
        _GtkCellRendererClass.get_aligned_area$VH.set(seg, x);
    }
    public static MemorySegment get_aligned_area$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkCellRendererClass.get_aligned_area$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_aligned_area$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkCellRendererClass.get_aligned_area$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_aligned_area get_aligned_area(MemorySegment segment, SegmentScope scope) {
        return get_aligned_area.ofAddress(get_aligned_area$get(segment), scope);
    }
    static final FunctionDescriptor snapshot$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor snapshot_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle snapshot_UP$MH = RuntimeHelper.upcallHandle(snapshot.class, "apply", _GtkCellRendererClass.snapshot_UP$FUNC);
    static final FunctionDescriptor snapshot_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle snapshot_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkCellRendererClass.snapshot_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*snapshot)(GtkCellRenderer*,GtkSnapshot*,GtkWidget*,const GdkRectangle*,const GdkRectangle*,GtkCellRendererState);
     * }
     */
    public interface snapshot {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, int _x5);
        static MemorySegment allocate(snapshot fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkCellRendererClass.snapshot_UP$MH, fi, _GtkCellRendererClass.snapshot$FUNC, scope);
        }
        static snapshot ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, int __x5) -> {
                try {
                    _GtkCellRendererClass.snapshot_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle snapshot$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("snapshot"));
    public static VarHandle snapshot$VH() {
        return _GtkCellRendererClass.snapshot$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*snapshot)(GtkCellRenderer*,GtkSnapshot*,GtkWidget*,const GdkRectangle*,const GdkRectangle*,GtkCellRendererState);
     * }
     */
    public static MemorySegment snapshot$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkCellRendererClass.snapshot$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*snapshot)(GtkCellRenderer*,GtkSnapshot*,GtkWidget*,const GdkRectangle*,const GdkRectangle*,GtkCellRendererState);
     * }
     */
    public static void snapshot$set(MemorySegment seg, MemorySegment x) {
        _GtkCellRendererClass.snapshot$VH.set(seg, x);
    }
    public static MemorySegment snapshot$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkCellRendererClass.snapshot$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void snapshot$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkCellRendererClass.snapshot$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static snapshot snapshot(MemorySegment segment, SegmentScope scope) {
        return snapshot.ofAddress(snapshot$get(segment), scope);
    }
    static final FunctionDescriptor activate$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor activate_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle activate_UP$MH = RuntimeHelper.upcallHandle(activate.class, "apply", _GtkCellRendererClass.activate_UP$FUNC);
    static final FunctionDescriptor activate_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle activate_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkCellRendererClass.activate_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*activate)(GtkCellRenderer*,GdkEvent*,GtkWidget*,char*,const GdkRectangle*,const GdkRectangle*,GtkCellRendererState);
     * }
     */
    public interface activate {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, int _x6);
        static MemorySegment allocate(activate fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkCellRendererClass.activate_UP$MH, fi, _GtkCellRendererClass.activate$FUNC, scope);
        }
        static activate ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, int __x6) -> {
                try {
                    return (int)_GtkCellRendererClass.activate_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle activate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("activate"));
    public static VarHandle activate$VH() {
        return _GtkCellRendererClass.activate$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*activate)(GtkCellRenderer*,GdkEvent*,GtkWidget*,char*,const GdkRectangle*,const GdkRectangle*,GtkCellRendererState);
     * }
     */
    public static MemorySegment activate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkCellRendererClass.activate$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*activate)(GtkCellRenderer*,GdkEvent*,GtkWidget*,char*,const GdkRectangle*,const GdkRectangle*,GtkCellRendererState);
     * }
     */
    public static void activate$set(MemorySegment seg, MemorySegment x) {
        _GtkCellRendererClass.activate$VH.set(seg, x);
    }
    public static MemorySegment activate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkCellRendererClass.activate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void activate$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkCellRendererClass.activate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static activate activate(MemorySegment segment, SegmentScope scope) {
        return activate.ofAddress(activate$get(segment), scope);
    }
    static final FunctionDescriptor start_editing$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor start_editing_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle start_editing_UP$MH = RuntimeHelper.upcallHandle(start_editing.class, "apply", _GtkCellRendererClass.start_editing_UP$FUNC);
    static final FunctionDescriptor start_editing_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle start_editing_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkCellRendererClass.start_editing_DOWN$FUNC
    );
    /**
     * {@snippet :
 * GtkCellEditable* (*start_editing)(GtkCellRenderer*,GdkEvent*,GtkWidget*,char*,const GdkRectangle*,const GdkRectangle*,GtkCellRendererState);
     * }
     */
    public interface start_editing {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, int _x6);
        static MemorySegment allocate(start_editing fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkCellRendererClass.start_editing_UP$MH, fi, _GtkCellRendererClass.start_editing$FUNC, scope);
        }
        static start_editing ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, int __x6) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_GtkCellRendererClass.start_editing_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle start_editing$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("start_editing"));
    public static VarHandle start_editing$VH() {
        return _GtkCellRendererClass.start_editing$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GtkCellEditable* (*start_editing)(GtkCellRenderer*,GdkEvent*,GtkWidget*,char*,const GdkRectangle*,const GdkRectangle*,GtkCellRendererState);
     * }
     */
    public static MemorySegment start_editing$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkCellRendererClass.start_editing$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GtkCellEditable* (*start_editing)(GtkCellRenderer*,GdkEvent*,GtkWidget*,char*,const GdkRectangle*,const GdkRectangle*,GtkCellRendererState);
     * }
     */
    public static void start_editing$set(MemorySegment seg, MemorySegment x) {
        _GtkCellRendererClass.start_editing$VH.set(seg, x);
    }
    public static MemorySegment start_editing$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkCellRendererClass.start_editing$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void start_editing$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkCellRendererClass.start_editing$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static start_editing start_editing(MemorySegment segment, SegmentScope scope) {
        return start_editing.ofAddress(start_editing$get(segment), scope);
    }
    static final FunctionDescriptor editing_canceled$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor editing_canceled_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle editing_canceled_UP$MH = RuntimeHelper.upcallHandle(editing_canceled.class, "apply", _GtkCellRendererClass.editing_canceled_UP$FUNC);
    static final FunctionDescriptor editing_canceled_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle editing_canceled_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkCellRendererClass.editing_canceled_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*editing_canceled)(GtkCellRenderer*);
     * }
     */
    public interface editing_canceled {

        void apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(editing_canceled fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkCellRendererClass.editing_canceled_UP$MH, fi, _GtkCellRendererClass.editing_canceled$FUNC, scope);
        }
        static editing_canceled ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    _GtkCellRendererClass.editing_canceled_DOWN$MH.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle editing_canceled$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("editing_canceled"));
    public static VarHandle editing_canceled$VH() {
        return _GtkCellRendererClass.editing_canceled$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*editing_canceled)(GtkCellRenderer*);
     * }
     */
    public static MemorySegment editing_canceled$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkCellRendererClass.editing_canceled$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*editing_canceled)(GtkCellRenderer*);
     * }
     */
    public static void editing_canceled$set(MemorySegment seg, MemorySegment x) {
        _GtkCellRendererClass.editing_canceled$VH.set(seg, x);
    }
    public static MemorySegment editing_canceled$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkCellRendererClass.editing_canceled$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void editing_canceled$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkCellRendererClass.editing_canceled$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static editing_canceled editing_canceled(MemorySegment segment, SegmentScope scope) {
        return editing_canceled.ofAddress(editing_canceled$get(segment), scope);
    }
    static final FunctionDescriptor editing_started$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor editing_started_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle editing_started_UP$MH = RuntimeHelper.upcallHandle(editing_started.class, "apply", _GtkCellRendererClass.editing_started_UP$FUNC);
    static final FunctionDescriptor editing_started_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle editing_started_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkCellRendererClass.editing_started_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*editing_started)(GtkCellRenderer*,GtkCellEditable*,char*);
     * }
     */
    public interface editing_started {

        void apply(java.lang.foreign.MemorySegment key, java.lang.foreign.MemorySegment value, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(editing_started fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkCellRendererClass.editing_started_UP$MH, fi, _GtkCellRendererClass.editing_started$FUNC, scope);
        }
        static editing_started ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _key, java.lang.foreign.MemorySegment _value, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    _GtkCellRendererClass.editing_started_DOWN$MH.invokeExact(symbol, _key, _value, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle editing_started$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("editing_started"));
    public static VarHandle editing_started$VH() {
        return _GtkCellRendererClass.editing_started$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*editing_started)(GtkCellRenderer*,GtkCellEditable*,char*);
     * }
     */
    public static MemorySegment editing_started$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkCellRendererClass.editing_started$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*editing_started)(GtkCellRenderer*,GtkCellEditable*,char*);
     * }
     */
    public static void editing_started$set(MemorySegment seg, MemorySegment x) {
        _GtkCellRendererClass.editing_started$VH.set(seg, x);
    }
    public static MemorySegment editing_started$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkCellRendererClass.editing_started$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void editing_started$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkCellRendererClass.editing_started$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static editing_started editing_started(MemorySegment segment, SegmentScope scope) {
        return editing_started.ofAddress(editing_started$get(segment), scope);
    }
    public static MemorySegment padding$slice(MemorySegment seg) {
        return seg.asSlice(224, 64);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


