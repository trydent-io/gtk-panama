// Generated by jextract

package gtk;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GtkButtonClass {
 *     GtkWidgetClass parent_class;
 *     void (*clicked)(GtkButton*);
 *     void (*activate)(GtkButton*);
 *     gpointer padding[8];
 * };
 * }
 */
public class _GtkButtonClass {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
                ).withName("g_type_class"),
                Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
                Constants$root.C_POINTER$LAYOUT.withName("constructor"),
                Constants$root.C_POINTER$LAYOUT.withName("set_property"),
                Constants$root.C_POINTER$LAYOUT.withName("get_property"),
                Constants$root.C_POINTER$LAYOUT.withName("dispose"),
                Constants$root.C_POINTER$LAYOUT.withName("finalize"),
                Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
                Constants$root.C_POINTER$LAYOUT.withName("notify"),
                Constants$root.C_POINTER$LAYOUT.withName("constructed"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
                MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
            ).withName("parent_class"),
            Constants$root.C_POINTER$LAYOUT.withName("show"),
            Constants$root.C_POINTER$LAYOUT.withName("hide"),
            Constants$root.C_POINTER$LAYOUT.withName("map"),
            Constants$root.C_POINTER$LAYOUT.withName("unmap"),
            Constants$root.C_POINTER$LAYOUT.withName("realize"),
            Constants$root.C_POINTER$LAYOUT.withName("unrealize"),
            Constants$root.C_POINTER$LAYOUT.withName("root"),
            Constants$root.C_POINTER$LAYOUT.withName("unroot"),
            Constants$root.C_POINTER$LAYOUT.withName("size_allocate"),
            Constants$root.C_POINTER$LAYOUT.withName("state_flags_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("direction_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("get_request_mode"),
            Constants$root.C_POINTER$LAYOUT.withName("measure"),
            Constants$root.C_POINTER$LAYOUT.withName("mnemonic_activate"),
            Constants$root.C_POINTER$LAYOUT.withName("grab_focus"),
            Constants$root.C_POINTER$LAYOUT.withName("focus"),
            Constants$root.C_POINTER$LAYOUT.withName("set_focus_child"),
            Constants$root.C_POINTER$LAYOUT.withName("move_focus"),
            Constants$root.C_POINTER$LAYOUT.withName("keynav_failed"),
            Constants$root.C_POINTER$LAYOUT.withName("query_tooltip"),
            Constants$root.C_POINTER$LAYOUT.withName("compute_expand"),
            Constants$root.C_POINTER$LAYOUT.withName("css_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("system_setting_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("snapshot"),
            Constants$root.C_POINTER$LAYOUT.withName("contains"),
            Constants$root.C_POINTER$LAYOUT.withName("priv"),
            MemoryLayout.sequenceLayout(8, Constants$root.C_POINTER$LAYOUT).withName("padding")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("clicked"),
        Constants$root.C_POINTER$LAYOUT.withName("activate"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_POINTER$LAYOUT).withName("padding")
    ).withName("_GtkButtonClass");
    public static MemoryLayout $LAYOUT() {
        return _GtkButtonClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 408);
    }
    static final FunctionDescriptor clicked$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor clicked_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle clicked_UP$MH = RuntimeHelper.upcallHandle(clicked.class, "apply", _GtkButtonClass.clicked_UP$FUNC);
    static final FunctionDescriptor clicked_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle clicked_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkButtonClass.clicked_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*clicked)(GtkButton*);
     * }
     */
    public interface clicked {

        void apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(clicked fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkButtonClass.clicked_UP$MH, fi, _GtkButtonClass.clicked$FUNC, scope);
        }
        static clicked ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    _GtkButtonClass.clicked_DOWN$MH.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle clicked$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("clicked"));
    public static VarHandle clicked$VH() {
        return _GtkButtonClass.clicked$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*clicked)(GtkButton*);
     * }
     */
    public static MemorySegment clicked$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkButtonClass.clicked$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*clicked)(GtkButton*);
     * }
     */
    public static void clicked$set(MemorySegment seg, MemorySegment x) {
        _GtkButtonClass.clicked$VH.set(seg, x);
    }
    public static MemorySegment clicked$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkButtonClass.clicked$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void clicked$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkButtonClass.clicked$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static clicked clicked(MemorySegment segment, SegmentScope scope) {
        return clicked.ofAddress(clicked$get(segment), scope);
    }
    static final FunctionDescriptor activate$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor activate_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle activate_UP$MH = RuntimeHelper.upcallHandle(activate.class, "apply", _GtkButtonClass.activate_UP$FUNC);
    static final FunctionDescriptor activate_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle activate_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkButtonClass.activate_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*activate)(GtkButton*);
     * }
     */
    public interface activate {

        void apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(activate fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkButtonClass.activate_UP$MH, fi, _GtkButtonClass.activate$FUNC, scope);
        }
        static activate ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    _GtkButtonClass.activate_DOWN$MH.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle activate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("activate"));
    public static VarHandle activate$VH() {
        return _GtkButtonClass.activate$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*activate)(GtkButton*);
     * }
     */
    public static MemorySegment activate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkButtonClass.activate$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*activate)(GtkButton*);
     * }
     */
    public static void activate$set(MemorySegment seg, MemorySegment x) {
        _GtkButtonClass.activate$VH.set(seg, x);
    }
    public static MemorySegment activate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkButtonClass.activate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void activate$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkButtonClass.activate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static activate activate(MemorySegment segment, SegmentScope scope) {
        return activate.ofAddress(activate$get(segment), scope);
    }
    public static MemorySegment padding$slice(MemorySegment seg) {
        return seg.asSlice(424, 64);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


