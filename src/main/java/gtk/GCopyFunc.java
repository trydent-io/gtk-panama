// Generated by jextract

package gtk;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * void* (*GCopyFunc)(void* src,void* data);
 * }
 */
public interface GCopyFunc {

    java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment item, java.lang.foreign.MemorySegment user_data);
    static MemorySegment allocate(GCopyFunc fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$8.GCopyFunc_UP$MH, fi, constants$8.GCopyFunc$FUNC, scope);
    }
    static GCopyFunc ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _item, java.lang.foreign.MemorySegment _user_data) -> {
            try {
                return (java.lang.foreign.MemorySegment)constants$8.GCopyFunc_DOWN$MH.invokeExact(symbol, _item, _user_data);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


