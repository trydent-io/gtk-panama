// Generated by jextract

package gtk;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GdkTimeCoord {
 *     guint32 time;
 *     GdkAxisFlags flags;
 *     double axes[12];
 * };
 * }
 */
public class _GdkTimeCoord {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("time"),
        Constants$root.C_INT$LAYOUT.withName("flags"),
        MemoryLayout.sequenceLayout(12, Constants$root.C_DOUBLE$LAYOUT).withName("axes")
    ).withName("_GdkTimeCoord");
    public static MemoryLayout $LAYOUT() {
        return _GdkTimeCoord.$struct$LAYOUT;
    }
    static final VarHandle time$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("time"));
    public static VarHandle time$VH() {
        return _GdkTimeCoord.time$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * guint32 time;
     * }
     */
    public static int time$get(MemorySegment seg) {
        return (int)_GdkTimeCoord.time$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * guint32 time;
     * }
     */
    public static void time$set(MemorySegment seg, int x) {
        _GdkTimeCoord.time$VH.set(seg, x);
    }
    public static int time$get(MemorySegment seg, long index) {
        return (int)_GdkTimeCoord.time$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void time$set(MemorySegment seg, long index, int x) {
        _GdkTimeCoord.time$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("flags"));
    public static VarHandle flags$VH() {
        return _GdkTimeCoord.flags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GdkAxisFlags flags;
     * }
     */
    public static int flags$get(MemorySegment seg) {
        return (int)_GdkTimeCoord.flags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GdkAxisFlags flags;
     * }
     */
    public static void flags$set(MemorySegment seg, int x) {
        _GdkTimeCoord.flags$VH.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)_GdkTimeCoord.flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        _GdkTimeCoord.flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment axes$slice(MemorySegment seg) {
        return seg.asSlice(8, 96);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


