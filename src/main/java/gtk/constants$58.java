// Generated by jextract

package gtk;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
final class constants$58 {

    // Suppresses default constructor, ensuring non-instantiability.
    private constants$58() {}
    static final FunctionDescriptor getloadavg$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle getloadavg$MH = RuntimeHelper.downcallHandle(
        "getloadavg",
        constants$58.getloadavg$FUNC
    );
    static final FunctionDescriptor g_thread_error_quark$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT);
    static final MethodHandle g_thread_error_quark$MH = RuntimeHelper.downcallHandle(
        "g_thread_error_quark",
        constants$58.g_thread_error_quark$FUNC
    );
    static final FunctionDescriptor GThreadFunc$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GThreadFunc_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GThreadFunc_UP$MH = RuntimeHelper.upcallHandle(GThreadFunc.class, "apply", constants$58.GThreadFunc_UP$FUNC);
    static final FunctionDescriptor GThreadFunc_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GThreadFunc_DOWN$MH = RuntimeHelper.downcallHandle(
        constants$58.GThreadFunc_DOWN$FUNC
    );
    static final FunctionDescriptor g_thread_ref$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle g_thread_ref$MH = RuntimeHelper.downcallHandle(
        "g_thread_ref",
        constants$58.g_thread_ref$FUNC
    );
    static final FunctionDescriptor g_thread_unref$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle g_thread_unref$MH = RuntimeHelper.downcallHandle(
        "g_thread_unref",
        constants$58.g_thread_unref$FUNC
    );
}


