// Generated by jextract

package gtk;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
final class constants$344 {

    // Suppresses default constructor, ensuring non-instantiability.
    private constants$344() {}
    static final StructLayout g_thread_functions_for_glib_use$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("mutex_new"),
        Constants$root.C_POINTER$LAYOUT.withName("mutex_lock"),
        Constants$root.C_POINTER$LAYOUT.withName("mutex_trylock"),
        Constants$root.C_POINTER$LAYOUT.withName("mutex_unlock"),
        Constants$root.C_POINTER$LAYOUT.withName("mutex_free"),
        Constants$root.C_POINTER$LAYOUT.withName("cond_new"),
        Constants$root.C_POINTER$LAYOUT.withName("cond_signal"),
        Constants$root.C_POINTER$LAYOUT.withName("cond_broadcast"),
        Constants$root.C_POINTER$LAYOUT.withName("cond_wait"),
        Constants$root.C_POINTER$LAYOUT.withName("cond_timed_wait"),
        Constants$root.C_POINTER$LAYOUT.withName("cond_free"),
        Constants$root.C_POINTER$LAYOUT.withName("private_new"),
        Constants$root.C_POINTER$LAYOUT.withName("private_get"),
        Constants$root.C_POINTER$LAYOUT.withName("private_set"),
        Constants$root.C_POINTER$LAYOUT.withName("thread_create"),
        Constants$root.C_POINTER$LAYOUT.withName("thread_yield"),
        Constants$root.C_POINTER$LAYOUT.withName("thread_join"),
        Constants$root.C_POINTER$LAYOUT.withName("thread_exit"),
        Constants$root.C_POINTER$LAYOUT.withName("thread_set_priority"),
        Constants$root.C_POINTER$LAYOUT.withName("thread_self"),
        Constants$root.C_POINTER$LAYOUT.withName("thread_equal")
    ).withName("_GThreadFunctions");
    static final MemorySegment g_thread_functions_for_glib_use$SEGMENT = RuntimeHelper.lookupGlobalVariable("g_thread_functions_for_glib_use", constants$344.g_thread_functions_for_glib_use$LAYOUT);
    static final OfInt g_thread_use_default_impl$LAYOUT = Constants$root.C_INT$LAYOUT;
    static final VarHandle g_thread_use_default_impl$VH = constants$344.g_thread_use_default_impl$LAYOUT.varHandle();
    static final MemorySegment g_thread_use_default_impl$SEGMENT = RuntimeHelper.lookupGlobalVariable("g_thread_use_default_impl", constants$344.g_thread_use_default_impl$LAYOUT);
    static final FunctionDescriptor g_thread_gettime$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT);
    static final FunctionDescriptor g_thread_gettime_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT);
    static final MethodHandle g_thread_gettime_UP$MH = RuntimeHelper.upcallHandle(g_thread_gettime.class, "apply", constants$344.g_thread_gettime_UP$FUNC);
    static final FunctionDescriptor g_thread_gettime_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT);
    static final MethodHandle g_thread_gettime_DOWN$MH = RuntimeHelper.downcallHandle(
        constants$344.g_thread_gettime_DOWN$FUNC
    );
    static final OfAddress g_thread_gettime$LAYOUT = Constants$root.C_POINTER$LAYOUT;
    static final VarHandle g_thread_gettime$VH = constants$344.g_thread_gettime$LAYOUT.varHandle();
    static final MemorySegment g_thread_gettime$SEGMENT = RuntimeHelper.lookupGlobalVariable("g_thread_gettime", constants$344.g_thread_gettime$LAYOUT);
    static final FunctionDescriptor g_thread_create$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle g_thread_create$MH = RuntimeHelper.downcallHandle(
        "g_thread_create",
        constants$344.g_thread_create$FUNC
    );
}


