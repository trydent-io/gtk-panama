// Generated by jextract

package gtk;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GdkRGBA {
 *     float red;
 *     float green;
 *     float blue;
 *     float alpha;
 * };
 * }
 */
public class _GdkRGBA {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_FLOAT$LAYOUT.withName("red"),
        Constants$root.C_FLOAT$LAYOUT.withName("green"),
        Constants$root.C_FLOAT$LAYOUT.withName("blue"),
        Constants$root.C_FLOAT$LAYOUT.withName("alpha")
    ).withName("_GdkRGBA");
    public static MemoryLayout $LAYOUT() {
        return _GdkRGBA.$struct$LAYOUT;
    }
    static final VarHandle red$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("red"));
    public static VarHandle red$VH() {
        return _GdkRGBA.red$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float red;
     * }
     */
    public static float red$get(MemorySegment seg) {
        return (float)_GdkRGBA.red$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float red;
     * }
     */
    public static void red$set(MemorySegment seg, float x) {
        _GdkRGBA.red$VH.set(seg, x);
    }
    public static float red$get(MemorySegment seg, long index) {
        return (float)_GdkRGBA.red$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void red$set(MemorySegment seg, long index, float x) {
        _GdkRGBA.red$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle green$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("green"));
    public static VarHandle green$VH() {
        return _GdkRGBA.green$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float green;
     * }
     */
    public static float green$get(MemorySegment seg) {
        return (float)_GdkRGBA.green$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float green;
     * }
     */
    public static void green$set(MemorySegment seg, float x) {
        _GdkRGBA.green$VH.set(seg, x);
    }
    public static float green$get(MemorySegment seg, long index) {
        return (float)_GdkRGBA.green$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void green$set(MemorySegment seg, long index, float x) {
        _GdkRGBA.green$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle blue$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("blue"));
    public static VarHandle blue$VH() {
        return _GdkRGBA.blue$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float blue;
     * }
     */
    public static float blue$get(MemorySegment seg) {
        return (float)_GdkRGBA.blue$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float blue;
     * }
     */
    public static void blue$set(MemorySegment seg, float x) {
        _GdkRGBA.blue$VH.set(seg, x);
    }
    public static float blue$get(MemorySegment seg, long index) {
        return (float)_GdkRGBA.blue$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void blue$set(MemorySegment seg, long index, float x) {
        _GdkRGBA.blue$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle alpha$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("alpha"));
    public static VarHandle alpha$VH() {
        return _GdkRGBA.alpha$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float alpha;
     * }
     */
    public static float alpha$get(MemorySegment seg) {
        return (float)_GdkRGBA.alpha$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float alpha;
     * }
     */
    public static void alpha$set(MemorySegment seg, float x) {
        _GdkRGBA.alpha$VH.set(seg, x);
    }
    public static float alpha$get(MemorySegment seg, long index) {
        return (float)_GdkRGBA.alpha$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void alpha$set(MemorySegment seg, long index, float x) {
        _GdkRGBA.alpha$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


