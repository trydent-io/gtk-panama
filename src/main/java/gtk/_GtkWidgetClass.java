// Generated by jextract

package gtk;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GtkWidgetClass {
 *     GInitiallyUnownedClass parent_class;
 *     void (*show)(GtkWidget*);
 *     void (*hide)(GtkWidget*);
 *     void (*map)(GtkWidget*);
 *     void (*unmap)(GtkWidget*);
 *     void (*realize)(GtkWidget*);
 *     void (*unrealize)(GtkWidget*);
 *     void (*root)(GtkWidget*);
 *     void (*unroot)(GtkWidget*);
 *     void (*size_allocate)(GtkWidget*,int,int,int);
 *     void (*state_flags_changed)(GtkWidget*,GtkStateFlags);
 *     void (*direction_changed)(GtkWidget*,GtkTextDirection);
 *     GtkSizeRequestMode (*get_request_mode)(GtkWidget*);
 *     void (*measure)(GtkWidget*,GtkOrientation,int,int*,int*,int*,int*);
 *     gboolean (*mnemonic_activate)(GtkWidget*,gboolean);
 *     gboolean (*grab_focus)(GtkWidget*);
 *     gboolean (*focus)(GtkWidget*,GtkDirectionType);
 *     void (*set_focus_child)(GtkWidget*,GtkWidget*);
 *     void (*move_focus)(GtkWidget*,GtkDirectionType);
 *     gboolean (*keynav_failed)(GtkWidget*,GtkDirectionType);
 *     gboolean (*query_tooltip)(GtkWidget*,int,int,gboolean,GtkTooltip*);
 *     void (*compute_expand)(GtkWidget*,gboolean*,gboolean*);
 *     void (*css_changed)(GtkWidget*,GtkCssStyleChange*);
 *     void (*system_setting_changed)(GtkWidget*,GtkSystemSetting);
 *     void (*snapshot)(GtkWidget*,GtkSnapshot*);
 *     gboolean (*contains)(GtkWidget*,double,double);
 *     GtkWidgetClassPrivate* priv;
 *     gpointer padding[8];
 * };
 * }
 */
public class _GtkWidgetClass {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("show"),
        Constants$root.C_POINTER$LAYOUT.withName("hide"),
        Constants$root.C_POINTER$LAYOUT.withName("map"),
        Constants$root.C_POINTER$LAYOUT.withName("unmap"),
        Constants$root.C_POINTER$LAYOUT.withName("realize"),
        Constants$root.C_POINTER$LAYOUT.withName("unrealize"),
        Constants$root.C_POINTER$LAYOUT.withName("root"),
        Constants$root.C_POINTER$LAYOUT.withName("unroot"),
        Constants$root.C_POINTER$LAYOUT.withName("size_allocate"),
        Constants$root.C_POINTER$LAYOUT.withName("state_flags_changed"),
        Constants$root.C_POINTER$LAYOUT.withName("direction_changed"),
        Constants$root.C_POINTER$LAYOUT.withName("get_request_mode"),
        Constants$root.C_POINTER$LAYOUT.withName("measure"),
        Constants$root.C_POINTER$LAYOUT.withName("mnemonic_activate"),
        Constants$root.C_POINTER$LAYOUT.withName("grab_focus"),
        Constants$root.C_POINTER$LAYOUT.withName("focus"),
        Constants$root.C_POINTER$LAYOUT.withName("set_focus_child"),
        Constants$root.C_POINTER$LAYOUT.withName("move_focus"),
        Constants$root.C_POINTER$LAYOUT.withName("keynav_failed"),
        Constants$root.C_POINTER$LAYOUT.withName("query_tooltip"),
        Constants$root.C_POINTER$LAYOUT.withName("compute_expand"),
        Constants$root.C_POINTER$LAYOUT.withName("css_changed"),
        Constants$root.C_POINTER$LAYOUT.withName("system_setting_changed"),
        Constants$root.C_POINTER$LAYOUT.withName("snapshot"),
        Constants$root.C_POINTER$LAYOUT.withName("contains"),
        Constants$root.C_POINTER$LAYOUT.withName("priv"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_POINTER$LAYOUT).withName("padding")
    ).withName("_GtkWidgetClass");
    public static MemoryLayout $LAYOUT() {
        return _GtkWidgetClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor show$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor show_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle show_UP$MH = RuntimeHelper.upcallHandle(show.class, "apply", _GtkWidgetClass.show_UP$FUNC);
    static final FunctionDescriptor show_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle show_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkWidgetClass.show_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*show)(GtkWidget*);
     * }
     */
    public interface show {

        void apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(show fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkWidgetClass.show_UP$MH, fi, _GtkWidgetClass.show$FUNC, scope);
        }
        static show ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    _GtkWidgetClass.show_DOWN$MH.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle show$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("show"));
    public static VarHandle show$VH() {
        return _GtkWidgetClass.show$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*show)(GtkWidget*);
     * }
     */
    public static MemorySegment show$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.show$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*show)(GtkWidget*);
     * }
     */
    public static void show$set(MemorySegment seg, MemorySegment x) {
        _GtkWidgetClass.show$VH.set(seg, x);
    }
    public static MemorySegment show$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.show$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void show$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkWidgetClass.show$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static show show(MemorySegment segment, SegmentScope scope) {
        return show.ofAddress(show$get(segment), scope);
    }
    static final FunctionDescriptor hide$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor hide_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle hide_UP$MH = RuntimeHelper.upcallHandle(hide.class, "apply", _GtkWidgetClass.hide_UP$FUNC);
    static final FunctionDescriptor hide_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle hide_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkWidgetClass.hide_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*hide)(GtkWidget*);
     * }
     */
    public interface hide {

        void apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(hide fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkWidgetClass.hide_UP$MH, fi, _GtkWidgetClass.hide$FUNC, scope);
        }
        static hide ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    _GtkWidgetClass.hide_DOWN$MH.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle hide$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hide"));
    public static VarHandle hide$VH() {
        return _GtkWidgetClass.hide$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*hide)(GtkWidget*);
     * }
     */
    public static MemorySegment hide$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.hide$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*hide)(GtkWidget*);
     * }
     */
    public static void hide$set(MemorySegment seg, MemorySegment x) {
        _GtkWidgetClass.hide$VH.set(seg, x);
    }
    public static MemorySegment hide$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.hide$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hide$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkWidgetClass.hide$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static hide hide(MemorySegment segment, SegmentScope scope) {
        return hide.ofAddress(hide$get(segment), scope);
    }
    static final FunctionDescriptor map$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor map_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle map_UP$MH = RuntimeHelper.upcallHandle(map.class, "apply", _GtkWidgetClass.map_UP$FUNC);
    static final FunctionDescriptor map_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle map_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkWidgetClass.map_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*map)(GtkWidget*);
     * }
     */
    public interface map {

        void apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(map fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkWidgetClass.map_UP$MH, fi, _GtkWidgetClass.map$FUNC, scope);
        }
        static map ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    _GtkWidgetClass.map_DOWN$MH.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle map$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("map"));
    public static VarHandle map$VH() {
        return _GtkWidgetClass.map$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*map)(GtkWidget*);
     * }
     */
    public static MemorySegment map$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.map$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*map)(GtkWidget*);
     * }
     */
    public static void map$set(MemorySegment seg, MemorySegment x) {
        _GtkWidgetClass.map$VH.set(seg, x);
    }
    public static MemorySegment map$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.map$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void map$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkWidgetClass.map$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static map map(MemorySegment segment, SegmentScope scope) {
        return map.ofAddress(map$get(segment), scope);
    }
    static final FunctionDescriptor unmap$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor unmap_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle unmap_UP$MH = RuntimeHelper.upcallHandle(unmap.class, "apply", _GtkWidgetClass.unmap_UP$FUNC);
    static final FunctionDescriptor unmap_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle unmap_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkWidgetClass.unmap_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*unmap)(GtkWidget*);
     * }
     */
    public interface unmap {

        void apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(unmap fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkWidgetClass.unmap_UP$MH, fi, _GtkWidgetClass.unmap$FUNC, scope);
        }
        static unmap ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    _GtkWidgetClass.unmap_DOWN$MH.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle unmap$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("unmap"));
    public static VarHandle unmap$VH() {
        return _GtkWidgetClass.unmap$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*unmap)(GtkWidget*);
     * }
     */
    public static MemorySegment unmap$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.unmap$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*unmap)(GtkWidget*);
     * }
     */
    public static void unmap$set(MemorySegment seg, MemorySegment x) {
        _GtkWidgetClass.unmap$VH.set(seg, x);
    }
    public static MemorySegment unmap$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.unmap$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void unmap$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkWidgetClass.unmap$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static unmap unmap(MemorySegment segment, SegmentScope scope) {
        return unmap.ofAddress(unmap$get(segment), scope);
    }
    static final FunctionDescriptor realize$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor realize_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle realize_UP$MH = RuntimeHelper.upcallHandle(realize.class, "apply", _GtkWidgetClass.realize_UP$FUNC);
    static final FunctionDescriptor realize_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle realize_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkWidgetClass.realize_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*realize)(GtkWidget*);
     * }
     */
    public interface realize {

        void apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(realize fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkWidgetClass.realize_UP$MH, fi, _GtkWidgetClass.realize$FUNC, scope);
        }
        static realize ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    _GtkWidgetClass.realize_DOWN$MH.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle realize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("realize"));
    public static VarHandle realize$VH() {
        return _GtkWidgetClass.realize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*realize)(GtkWidget*);
     * }
     */
    public static MemorySegment realize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.realize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*realize)(GtkWidget*);
     * }
     */
    public static void realize$set(MemorySegment seg, MemorySegment x) {
        _GtkWidgetClass.realize$VH.set(seg, x);
    }
    public static MemorySegment realize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.realize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void realize$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkWidgetClass.realize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static realize realize(MemorySegment segment, SegmentScope scope) {
        return realize.ofAddress(realize$get(segment), scope);
    }
    static final FunctionDescriptor unrealize$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor unrealize_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle unrealize_UP$MH = RuntimeHelper.upcallHandle(unrealize.class, "apply", _GtkWidgetClass.unrealize_UP$FUNC);
    static final FunctionDescriptor unrealize_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle unrealize_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkWidgetClass.unrealize_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*unrealize)(GtkWidget*);
     * }
     */
    public interface unrealize {

        void apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(unrealize fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkWidgetClass.unrealize_UP$MH, fi, _GtkWidgetClass.unrealize$FUNC, scope);
        }
        static unrealize ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    _GtkWidgetClass.unrealize_DOWN$MH.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle unrealize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("unrealize"));
    public static VarHandle unrealize$VH() {
        return _GtkWidgetClass.unrealize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*unrealize)(GtkWidget*);
     * }
     */
    public static MemorySegment unrealize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.unrealize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*unrealize)(GtkWidget*);
     * }
     */
    public static void unrealize$set(MemorySegment seg, MemorySegment x) {
        _GtkWidgetClass.unrealize$VH.set(seg, x);
    }
    public static MemorySegment unrealize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.unrealize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void unrealize$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkWidgetClass.unrealize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static unrealize unrealize(MemorySegment segment, SegmentScope scope) {
        return unrealize.ofAddress(unrealize$get(segment), scope);
    }
    static final FunctionDescriptor root$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor root_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle root_UP$MH = RuntimeHelper.upcallHandle(root.class, "apply", _GtkWidgetClass.root_UP$FUNC);
    static final FunctionDescriptor root_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle root_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkWidgetClass.root_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*root)(GtkWidget*);
     * }
     */
    public interface root {

        void apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(root fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkWidgetClass.root_UP$MH, fi, _GtkWidgetClass.root$FUNC, scope);
        }
        static root ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    _GtkWidgetClass.root_DOWN$MH.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle root$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("root"));
    public static VarHandle root$VH() {
        return _GtkWidgetClass.root$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*root)(GtkWidget*);
     * }
     */
    public static MemorySegment root$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.root$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*root)(GtkWidget*);
     * }
     */
    public static void root$set(MemorySegment seg, MemorySegment x) {
        _GtkWidgetClass.root$VH.set(seg, x);
    }
    public static MemorySegment root$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.root$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void root$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkWidgetClass.root$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static root root(MemorySegment segment, SegmentScope scope) {
        return root.ofAddress(root$get(segment), scope);
    }
    static final FunctionDescriptor unroot$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor unroot_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle unroot_UP$MH = RuntimeHelper.upcallHandle(unroot.class, "apply", _GtkWidgetClass.unroot_UP$FUNC);
    static final FunctionDescriptor unroot_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle unroot_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkWidgetClass.unroot_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*unroot)(GtkWidget*);
     * }
     */
    public interface unroot {

        void apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(unroot fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkWidgetClass.unroot_UP$MH, fi, _GtkWidgetClass.unroot$FUNC, scope);
        }
        static unroot ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    _GtkWidgetClass.unroot_DOWN$MH.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle unroot$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("unroot"));
    public static VarHandle unroot$VH() {
        return _GtkWidgetClass.unroot$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*unroot)(GtkWidget*);
     * }
     */
    public static MemorySegment unroot$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.unroot$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*unroot)(GtkWidget*);
     * }
     */
    public static void unroot$set(MemorySegment seg, MemorySegment x) {
        _GtkWidgetClass.unroot$VH.set(seg, x);
    }
    public static MemorySegment unroot$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.unroot$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void unroot$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkWidgetClass.unroot$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static unroot unroot(MemorySegment segment, SegmentScope scope) {
        return unroot.ofAddress(unroot$get(segment), scope);
    }
    static final FunctionDescriptor size_allocate$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor size_allocate_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle size_allocate_UP$MH = RuntimeHelper.upcallHandle(size_allocate.class, "apply", _GtkWidgetClass.size_allocate_UP$FUNC);
    static final FunctionDescriptor size_allocate_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle size_allocate_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkWidgetClass.size_allocate_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*size_allocate)(GtkWidget*,int,int,int);
     * }
     */
    public interface size_allocate {

        void apply(java.lang.foreign.MemorySegment widget, int width, int height, int baseline);
        static MemorySegment allocate(size_allocate fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkWidgetClass.size_allocate_UP$MH, fi, _GtkWidgetClass.size_allocate$FUNC, scope);
        }
        static size_allocate ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _widget, int _width, int _height, int _baseline) -> {
                try {
                    _GtkWidgetClass.size_allocate_DOWN$MH.invokeExact(symbol, _widget, _width, _height, _baseline);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle size_allocate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("size_allocate"));
    public static VarHandle size_allocate$VH() {
        return _GtkWidgetClass.size_allocate$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*size_allocate)(GtkWidget*,int,int,int);
     * }
     */
    public static MemorySegment size_allocate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.size_allocate$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*size_allocate)(GtkWidget*,int,int,int);
     * }
     */
    public static void size_allocate$set(MemorySegment seg, MemorySegment x) {
        _GtkWidgetClass.size_allocate$VH.set(seg, x);
    }
    public static MemorySegment size_allocate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.size_allocate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void size_allocate$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkWidgetClass.size_allocate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static size_allocate size_allocate(MemorySegment segment, SegmentScope scope) {
        return size_allocate.ofAddress(size_allocate$get(segment), scope);
    }
    static final FunctionDescriptor state_flags_changed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor state_flags_changed_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle state_flags_changed_UP$MH = RuntimeHelper.upcallHandle(state_flags_changed.class, "apply", _GtkWidgetClass.state_flags_changed_UP$FUNC);
    static final FunctionDescriptor state_flags_changed_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle state_flags_changed_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkWidgetClass.state_flags_changed_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*state_flags_changed)(GtkWidget*,GtkStateFlags);
     * }
     */
    public interface state_flags_changed {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(state_flags_changed fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkWidgetClass.state_flags_changed_UP$MH, fi, _GtkWidgetClass.state_flags_changed$FUNC, scope);
        }
        static state_flags_changed ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    _GtkWidgetClass.state_flags_changed_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle state_flags_changed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("state_flags_changed"));
    public static VarHandle state_flags_changed$VH() {
        return _GtkWidgetClass.state_flags_changed$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*state_flags_changed)(GtkWidget*,GtkStateFlags);
     * }
     */
    public static MemorySegment state_flags_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.state_flags_changed$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*state_flags_changed)(GtkWidget*,GtkStateFlags);
     * }
     */
    public static void state_flags_changed$set(MemorySegment seg, MemorySegment x) {
        _GtkWidgetClass.state_flags_changed$VH.set(seg, x);
    }
    public static MemorySegment state_flags_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.state_flags_changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void state_flags_changed$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkWidgetClass.state_flags_changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static state_flags_changed state_flags_changed(MemorySegment segment, SegmentScope scope) {
        return state_flags_changed.ofAddress(state_flags_changed$get(segment), scope);
    }
    static final FunctionDescriptor direction_changed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor direction_changed_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle direction_changed_UP$MH = RuntimeHelper.upcallHandle(direction_changed.class, "apply", _GtkWidgetClass.direction_changed_UP$FUNC);
    static final FunctionDescriptor direction_changed_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle direction_changed_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkWidgetClass.direction_changed_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*direction_changed)(GtkWidget*,GtkTextDirection);
     * }
     */
    public interface direction_changed {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(direction_changed fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkWidgetClass.direction_changed_UP$MH, fi, _GtkWidgetClass.direction_changed$FUNC, scope);
        }
        static direction_changed ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    _GtkWidgetClass.direction_changed_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle direction_changed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("direction_changed"));
    public static VarHandle direction_changed$VH() {
        return _GtkWidgetClass.direction_changed$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*direction_changed)(GtkWidget*,GtkTextDirection);
     * }
     */
    public static MemorySegment direction_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.direction_changed$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*direction_changed)(GtkWidget*,GtkTextDirection);
     * }
     */
    public static void direction_changed$set(MemorySegment seg, MemorySegment x) {
        _GtkWidgetClass.direction_changed$VH.set(seg, x);
    }
    public static MemorySegment direction_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.direction_changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void direction_changed$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkWidgetClass.direction_changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static direction_changed direction_changed(MemorySegment segment, SegmentScope scope) {
        return direction_changed.ofAddress(direction_changed$get(segment), scope);
    }
    static final FunctionDescriptor get_request_mode$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_request_mode_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_request_mode_UP$MH = RuntimeHelper.upcallHandle(get_request_mode.class, "apply", _GtkWidgetClass.get_request_mode_UP$FUNC);
    static final FunctionDescriptor get_request_mode_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_request_mode_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkWidgetClass.get_request_mode_DOWN$FUNC
    );
    /**
     * {@snippet :
 * GtkSizeRequestMode (*get_request_mode)(GtkWidget*);
     * }
     */
    public interface get_request_mode {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(get_request_mode fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkWidgetClass.get_request_mode_UP$MH, fi, _GtkWidgetClass.get_request_mode$FUNC, scope);
        }
        static get_request_mode ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)_GtkWidgetClass.get_request_mode_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_request_mode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_request_mode"));
    public static VarHandle get_request_mode$VH() {
        return _GtkWidgetClass.get_request_mode$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GtkSizeRequestMode (*get_request_mode)(GtkWidget*);
     * }
     */
    public static MemorySegment get_request_mode$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.get_request_mode$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GtkSizeRequestMode (*get_request_mode)(GtkWidget*);
     * }
     */
    public static void get_request_mode$set(MemorySegment seg, MemorySegment x) {
        _GtkWidgetClass.get_request_mode$VH.set(seg, x);
    }
    public static MemorySegment get_request_mode$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.get_request_mode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_request_mode$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkWidgetClass.get_request_mode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_request_mode get_request_mode(MemorySegment segment, SegmentScope scope) {
        return get_request_mode.ofAddress(get_request_mode$get(segment), scope);
    }
    static final FunctionDescriptor measure$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor measure_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle measure_UP$MH = RuntimeHelper.upcallHandle(measure.class, "apply", _GtkWidgetClass.measure_UP$FUNC);
    static final FunctionDescriptor measure_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle measure_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkWidgetClass.measure_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*measure)(GtkWidget*,GtkOrientation,int,int*,int*,int*,int*);
     * }
     */
    public interface measure {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6);
        static MemorySegment allocate(measure fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkWidgetClass.measure_UP$MH, fi, _GtkWidgetClass.measure$FUNC, scope);
        }
        static measure ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6) -> {
                try {
                    _GtkWidgetClass.measure_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle measure$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("measure"));
    public static VarHandle measure$VH() {
        return _GtkWidgetClass.measure$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*measure)(GtkWidget*,GtkOrientation,int,int*,int*,int*,int*);
     * }
     */
    public static MemorySegment measure$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.measure$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*measure)(GtkWidget*,GtkOrientation,int,int*,int*,int*,int*);
     * }
     */
    public static void measure$set(MemorySegment seg, MemorySegment x) {
        _GtkWidgetClass.measure$VH.set(seg, x);
    }
    public static MemorySegment measure$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.measure$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void measure$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkWidgetClass.measure$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static measure measure(MemorySegment segment, SegmentScope scope) {
        return measure.ofAddress(measure$get(segment), scope);
    }
    static final FunctionDescriptor mnemonic_activate$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor mnemonic_activate_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle mnemonic_activate_UP$MH = RuntimeHelper.upcallHandle(mnemonic_activate.class, "apply", _GtkWidgetClass.mnemonic_activate_UP$FUNC);
    static final FunctionDescriptor mnemonic_activate_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle mnemonic_activate_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkWidgetClass.mnemonic_activate_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*mnemonic_activate)(GtkWidget*,gboolean);
     * }
     */
    public interface mnemonic_activate {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(mnemonic_activate fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkWidgetClass.mnemonic_activate_UP$MH, fi, _GtkWidgetClass.mnemonic_activate$FUNC, scope);
        }
        static mnemonic_activate ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)_GtkWidgetClass.mnemonic_activate_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle mnemonic_activate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("mnemonic_activate"));
    public static VarHandle mnemonic_activate$VH() {
        return _GtkWidgetClass.mnemonic_activate$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*mnemonic_activate)(GtkWidget*,gboolean);
     * }
     */
    public static MemorySegment mnemonic_activate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.mnemonic_activate$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*mnemonic_activate)(GtkWidget*,gboolean);
     * }
     */
    public static void mnemonic_activate$set(MemorySegment seg, MemorySegment x) {
        _GtkWidgetClass.mnemonic_activate$VH.set(seg, x);
    }
    public static MemorySegment mnemonic_activate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.mnemonic_activate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void mnemonic_activate$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkWidgetClass.mnemonic_activate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static mnemonic_activate mnemonic_activate(MemorySegment segment, SegmentScope scope) {
        return mnemonic_activate.ofAddress(mnemonic_activate$get(segment), scope);
    }
    static final FunctionDescriptor grab_focus$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor grab_focus_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle grab_focus_UP$MH = RuntimeHelper.upcallHandle(grab_focus.class, "apply", _GtkWidgetClass.grab_focus_UP$FUNC);
    static final FunctionDescriptor grab_focus_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle grab_focus_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkWidgetClass.grab_focus_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*grab_focus)(GtkWidget*);
     * }
     */
    public interface grab_focus {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(grab_focus fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkWidgetClass.grab_focus_UP$MH, fi, _GtkWidgetClass.grab_focus$FUNC, scope);
        }
        static grab_focus ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)_GtkWidgetClass.grab_focus_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle grab_focus$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("grab_focus"));
    public static VarHandle grab_focus$VH() {
        return _GtkWidgetClass.grab_focus$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*grab_focus)(GtkWidget*);
     * }
     */
    public static MemorySegment grab_focus$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.grab_focus$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*grab_focus)(GtkWidget*);
     * }
     */
    public static void grab_focus$set(MemorySegment seg, MemorySegment x) {
        _GtkWidgetClass.grab_focus$VH.set(seg, x);
    }
    public static MemorySegment grab_focus$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.grab_focus$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void grab_focus$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkWidgetClass.grab_focus$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static grab_focus grab_focus(MemorySegment segment, SegmentScope scope) {
        return grab_focus.ofAddress(grab_focus$get(segment), scope);
    }
    static final FunctionDescriptor focus$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor focus_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle focus_UP$MH = RuntimeHelper.upcallHandle(focus.class, "apply", _GtkWidgetClass.focus_UP$FUNC);
    static final FunctionDescriptor focus_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle focus_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkWidgetClass.focus_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*focus)(GtkWidget*,GtkDirectionType);
     * }
     */
    public interface focus {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(focus fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkWidgetClass.focus_UP$MH, fi, _GtkWidgetClass.focus$FUNC, scope);
        }
        static focus ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)_GtkWidgetClass.focus_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle focus$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("focus"));
    public static VarHandle focus$VH() {
        return _GtkWidgetClass.focus$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*focus)(GtkWidget*,GtkDirectionType);
     * }
     */
    public static MemorySegment focus$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.focus$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*focus)(GtkWidget*,GtkDirectionType);
     * }
     */
    public static void focus$set(MemorySegment seg, MemorySegment x) {
        _GtkWidgetClass.focus$VH.set(seg, x);
    }
    public static MemorySegment focus$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.focus$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void focus$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkWidgetClass.focus$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static focus focus(MemorySegment segment, SegmentScope scope) {
        return focus.ofAddress(focus$get(segment), scope);
    }
    static final FunctionDescriptor set_focus_child$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor set_focus_child_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_focus_child_UP$MH = RuntimeHelper.upcallHandle(set_focus_child.class, "apply", _GtkWidgetClass.set_focus_child_UP$FUNC);
    static final FunctionDescriptor set_focus_child_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_focus_child_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkWidgetClass.set_focus_child_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*set_focus_child)(GtkWidget*,GtkWidget*);
     * }
     */
    public interface set_focus_child {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(set_focus_child fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkWidgetClass.set_focus_child_UP$MH, fi, _GtkWidgetClass.set_focus_child$FUNC, scope);
        }
        static set_focus_child ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    _GtkWidgetClass.set_focus_child_DOWN$MH.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_focus_child$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_focus_child"));
    public static VarHandle set_focus_child$VH() {
        return _GtkWidgetClass.set_focus_child$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*set_focus_child)(GtkWidget*,GtkWidget*);
     * }
     */
    public static MemorySegment set_focus_child$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.set_focus_child$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*set_focus_child)(GtkWidget*,GtkWidget*);
     * }
     */
    public static void set_focus_child$set(MemorySegment seg, MemorySegment x) {
        _GtkWidgetClass.set_focus_child$VH.set(seg, x);
    }
    public static MemorySegment set_focus_child$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.set_focus_child$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_focus_child$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkWidgetClass.set_focus_child$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_focus_child set_focus_child(MemorySegment segment, SegmentScope scope) {
        return set_focus_child.ofAddress(set_focus_child$get(segment), scope);
    }
    static final FunctionDescriptor move_focus$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor move_focus_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle move_focus_UP$MH = RuntimeHelper.upcallHandle(move_focus.class, "apply", _GtkWidgetClass.move_focus_UP$FUNC);
    static final FunctionDescriptor move_focus_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle move_focus_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkWidgetClass.move_focus_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*move_focus)(GtkWidget*,GtkDirectionType);
     * }
     */
    public interface move_focus {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(move_focus fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkWidgetClass.move_focus_UP$MH, fi, _GtkWidgetClass.move_focus$FUNC, scope);
        }
        static move_focus ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    _GtkWidgetClass.move_focus_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle move_focus$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("move_focus"));
    public static VarHandle move_focus$VH() {
        return _GtkWidgetClass.move_focus$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*move_focus)(GtkWidget*,GtkDirectionType);
     * }
     */
    public static MemorySegment move_focus$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.move_focus$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*move_focus)(GtkWidget*,GtkDirectionType);
     * }
     */
    public static void move_focus$set(MemorySegment seg, MemorySegment x) {
        _GtkWidgetClass.move_focus$VH.set(seg, x);
    }
    public static MemorySegment move_focus$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.move_focus$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void move_focus$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkWidgetClass.move_focus$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static move_focus move_focus(MemorySegment segment, SegmentScope scope) {
        return move_focus.ofAddress(move_focus$get(segment), scope);
    }
    static final FunctionDescriptor keynav_failed$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor keynav_failed_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle keynav_failed_UP$MH = RuntimeHelper.upcallHandle(keynav_failed.class, "apply", _GtkWidgetClass.keynav_failed_UP$FUNC);
    static final FunctionDescriptor keynav_failed_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle keynav_failed_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkWidgetClass.keynav_failed_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*keynav_failed)(GtkWidget*,GtkDirectionType);
     * }
     */
    public interface keynav_failed {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(keynav_failed fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkWidgetClass.keynav_failed_UP$MH, fi, _GtkWidgetClass.keynav_failed$FUNC, scope);
        }
        static keynav_failed ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)_GtkWidgetClass.keynav_failed_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle keynav_failed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("keynav_failed"));
    public static VarHandle keynav_failed$VH() {
        return _GtkWidgetClass.keynav_failed$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*keynav_failed)(GtkWidget*,GtkDirectionType);
     * }
     */
    public static MemorySegment keynav_failed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.keynav_failed$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*keynav_failed)(GtkWidget*,GtkDirectionType);
     * }
     */
    public static void keynav_failed$set(MemorySegment seg, MemorySegment x) {
        _GtkWidgetClass.keynav_failed$VH.set(seg, x);
    }
    public static MemorySegment keynav_failed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.keynav_failed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void keynav_failed$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkWidgetClass.keynav_failed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static keynav_failed keynav_failed(MemorySegment segment, SegmentScope scope) {
        return keynav_failed.ofAddress(keynav_failed$get(segment), scope);
    }
    static final FunctionDescriptor query_tooltip$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor query_tooltip_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle query_tooltip_UP$MH = RuntimeHelper.upcallHandle(query_tooltip.class, "apply", _GtkWidgetClass.query_tooltip_UP$FUNC);
    static final FunctionDescriptor query_tooltip_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle query_tooltip_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkWidgetClass.query_tooltip_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*query_tooltip)(GtkWidget*,int,int,gboolean,GtkTooltip*);
     * }
     */
    public interface query_tooltip {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(query_tooltip fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkWidgetClass.query_tooltip_UP$MH, fi, _GtkWidgetClass.query_tooltip$FUNC, scope);
        }
        static query_tooltip ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)_GtkWidgetClass.query_tooltip_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle query_tooltip$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("query_tooltip"));
    public static VarHandle query_tooltip$VH() {
        return _GtkWidgetClass.query_tooltip$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*query_tooltip)(GtkWidget*,int,int,gboolean,GtkTooltip*);
     * }
     */
    public static MemorySegment query_tooltip$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.query_tooltip$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*query_tooltip)(GtkWidget*,int,int,gboolean,GtkTooltip*);
     * }
     */
    public static void query_tooltip$set(MemorySegment seg, MemorySegment x) {
        _GtkWidgetClass.query_tooltip$VH.set(seg, x);
    }
    public static MemorySegment query_tooltip$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.query_tooltip$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void query_tooltip$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkWidgetClass.query_tooltip$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static query_tooltip query_tooltip(MemorySegment segment, SegmentScope scope) {
        return query_tooltip.ofAddress(query_tooltip$get(segment), scope);
    }
    static final FunctionDescriptor compute_expand$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor compute_expand_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle compute_expand_UP$MH = RuntimeHelper.upcallHandle(compute_expand.class, "apply", _GtkWidgetClass.compute_expand_UP$FUNC);
    static final FunctionDescriptor compute_expand_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle compute_expand_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkWidgetClass.compute_expand_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*compute_expand)(GtkWidget*,gboolean*,gboolean*);
     * }
     */
    public interface compute_expand {

        void apply(java.lang.foreign.MemorySegment key, java.lang.foreign.MemorySegment value, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(compute_expand fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkWidgetClass.compute_expand_UP$MH, fi, _GtkWidgetClass.compute_expand$FUNC, scope);
        }
        static compute_expand ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _key, java.lang.foreign.MemorySegment _value, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    _GtkWidgetClass.compute_expand_DOWN$MH.invokeExact(symbol, _key, _value, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle compute_expand$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("compute_expand"));
    public static VarHandle compute_expand$VH() {
        return _GtkWidgetClass.compute_expand$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*compute_expand)(GtkWidget*,gboolean*,gboolean*);
     * }
     */
    public static MemorySegment compute_expand$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.compute_expand$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*compute_expand)(GtkWidget*,gboolean*,gboolean*);
     * }
     */
    public static void compute_expand$set(MemorySegment seg, MemorySegment x) {
        _GtkWidgetClass.compute_expand$VH.set(seg, x);
    }
    public static MemorySegment compute_expand$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.compute_expand$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void compute_expand$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkWidgetClass.compute_expand$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static compute_expand compute_expand(MemorySegment segment, SegmentScope scope) {
        return compute_expand.ofAddress(compute_expand$get(segment), scope);
    }
    static final FunctionDescriptor css_changed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor css_changed_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle css_changed_UP$MH = RuntimeHelper.upcallHandle(css_changed.class, "apply", _GtkWidgetClass.css_changed_UP$FUNC);
    static final FunctionDescriptor css_changed_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle css_changed_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkWidgetClass.css_changed_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*css_changed)(GtkWidget*,GtkCssStyleChange*);
     * }
     */
    public interface css_changed {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(css_changed fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkWidgetClass.css_changed_UP$MH, fi, _GtkWidgetClass.css_changed$FUNC, scope);
        }
        static css_changed ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    _GtkWidgetClass.css_changed_DOWN$MH.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle css_changed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("css_changed"));
    public static VarHandle css_changed$VH() {
        return _GtkWidgetClass.css_changed$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*css_changed)(GtkWidget*,GtkCssStyleChange*);
     * }
     */
    public static MemorySegment css_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.css_changed$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*css_changed)(GtkWidget*,GtkCssStyleChange*);
     * }
     */
    public static void css_changed$set(MemorySegment seg, MemorySegment x) {
        _GtkWidgetClass.css_changed$VH.set(seg, x);
    }
    public static MemorySegment css_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.css_changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void css_changed$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkWidgetClass.css_changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static css_changed css_changed(MemorySegment segment, SegmentScope scope) {
        return css_changed.ofAddress(css_changed$get(segment), scope);
    }
    static final FunctionDescriptor system_setting_changed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor system_setting_changed_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle system_setting_changed_UP$MH = RuntimeHelper.upcallHandle(system_setting_changed.class, "apply", _GtkWidgetClass.system_setting_changed_UP$FUNC);
    static final FunctionDescriptor system_setting_changed_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle system_setting_changed_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkWidgetClass.system_setting_changed_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*system_setting_changed)(GtkWidget*,GtkSystemSetting);
     * }
     */
    public interface system_setting_changed {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(system_setting_changed fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkWidgetClass.system_setting_changed_UP$MH, fi, _GtkWidgetClass.system_setting_changed$FUNC, scope);
        }
        static system_setting_changed ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    _GtkWidgetClass.system_setting_changed_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle system_setting_changed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("system_setting_changed"));
    public static VarHandle system_setting_changed$VH() {
        return _GtkWidgetClass.system_setting_changed$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*system_setting_changed)(GtkWidget*,GtkSystemSetting);
     * }
     */
    public static MemorySegment system_setting_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.system_setting_changed$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*system_setting_changed)(GtkWidget*,GtkSystemSetting);
     * }
     */
    public static void system_setting_changed$set(MemorySegment seg, MemorySegment x) {
        _GtkWidgetClass.system_setting_changed$VH.set(seg, x);
    }
    public static MemorySegment system_setting_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.system_setting_changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void system_setting_changed$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkWidgetClass.system_setting_changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static system_setting_changed system_setting_changed(MemorySegment segment, SegmentScope scope) {
        return system_setting_changed.ofAddress(system_setting_changed$get(segment), scope);
    }
    static final FunctionDescriptor snapshot$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor snapshot_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle snapshot_UP$MH = RuntimeHelper.upcallHandle(snapshot.class, "apply", _GtkWidgetClass.snapshot_UP$FUNC);
    static final FunctionDescriptor snapshot_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle snapshot_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkWidgetClass.snapshot_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*snapshot)(GtkWidget*,GtkSnapshot*);
     * }
     */
    public interface snapshot {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(snapshot fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkWidgetClass.snapshot_UP$MH, fi, _GtkWidgetClass.snapshot$FUNC, scope);
        }
        static snapshot ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    _GtkWidgetClass.snapshot_DOWN$MH.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle snapshot$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("snapshot"));
    public static VarHandle snapshot$VH() {
        return _GtkWidgetClass.snapshot$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*snapshot)(GtkWidget*,GtkSnapshot*);
     * }
     */
    public static MemorySegment snapshot$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.snapshot$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*snapshot)(GtkWidget*,GtkSnapshot*);
     * }
     */
    public static void snapshot$set(MemorySegment seg, MemorySegment x) {
        _GtkWidgetClass.snapshot$VH.set(seg, x);
    }
    public static MemorySegment snapshot$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.snapshot$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void snapshot$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkWidgetClass.snapshot$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static snapshot snapshot(MemorySegment segment, SegmentScope scope) {
        return snapshot.ofAddress(snapshot$get(segment), scope);
    }
    static final FunctionDescriptor contains$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final FunctionDescriptor contains_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle contains_UP$MH = RuntimeHelper.upcallHandle(contains.class, "apply", _GtkWidgetClass.contains_UP$FUNC);
    static final FunctionDescriptor contains_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle contains_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkWidgetClass.contains_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*contains)(GtkWidget*,double,double);
     * }
     */
    public interface contains {

        int apply(java.lang.foreign.MemorySegment _x0, double _x1, double _x2);
        static MemorySegment allocate(contains fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkWidgetClass.contains_UP$MH, fi, _GtkWidgetClass.contains$FUNC, scope);
        }
        static contains ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, double __x1, double __x2) -> {
                try {
                    return (int)_GtkWidgetClass.contains_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle contains$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("contains"));
    public static VarHandle contains$VH() {
        return _GtkWidgetClass.contains$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*contains)(GtkWidget*,double,double);
     * }
     */
    public static MemorySegment contains$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.contains$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*contains)(GtkWidget*,double,double);
     * }
     */
    public static void contains$set(MemorySegment seg, MemorySegment x) {
        _GtkWidgetClass.contains$VH.set(seg, x);
    }
    public static MemorySegment contains$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.contains$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void contains$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkWidgetClass.contains$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static contains contains(MemorySegment segment, SegmentScope scope) {
        return contains.ofAddress(contains$get(segment), scope);
    }
    static final VarHandle priv$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("priv"));
    public static VarHandle priv$VH() {
        return _GtkWidgetClass.priv$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GtkWidgetClassPrivate* priv;
     * }
     */
    public static MemorySegment priv$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.priv$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GtkWidgetClassPrivate* priv;
     * }
     */
    public static void priv$set(MemorySegment seg, MemorySegment x) {
        _GtkWidgetClass.priv$VH.set(seg, x);
    }
    public static MemorySegment priv$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkWidgetClass.priv$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void priv$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkWidgetClass.priv$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment padding$slice(MemorySegment seg) {
        return seg.asSlice(344, 64);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


