// Generated by jextract

package gtk;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
final class constants$319 {

    // Suppresses default constructor, ensuring non-instantiability.
    private constants$319() {}
    static final FunctionDescriptor g_thread_pool_get_max_idle_time$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT);
    static final MethodHandle g_thread_pool_get_max_idle_time$MH = RuntimeHelper.downcallHandle(
        "g_thread_pool_get_max_idle_time",
        constants$319.g_thread_pool_get_max_idle_time$FUNC
    );
    static final FunctionDescriptor g_timer_new$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT);
    static final MethodHandle g_timer_new$MH = RuntimeHelper.downcallHandle(
        "g_timer_new",
        constants$319.g_timer_new$FUNC
    );
    static final FunctionDescriptor g_timer_destroy$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle g_timer_destroy$MH = RuntimeHelper.downcallHandle(
        "g_timer_destroy",
        constants$319.g_timer_destroy$FUNC
    );
    static final FunctionDescriptor g_timer_start$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle g_timer_start$MH = RuntimeHelper.downcallHandle(
        "g_timer_start",
        constants$319.g_timer_start$FUNC
    );
    static final FunctionDescriptor g_timer_stop$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle g_timer_stop$MH = RuntimeHelper.downcallHandle(
        "g_timer_stop",
        constants$319.g_timer_stop$FUNC
    );
    static final FunctionDescriptor g_timer_reset$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle g_timer_reset$MH = RuntimeHelper.downcallHandle(
        "g_timer_reset",
        constants$319.g_timer_reset$FUNC
    );
}


