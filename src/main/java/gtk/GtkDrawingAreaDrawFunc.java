// Generated by jextract

package gtk;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * void (*GtkDrawingAreaDrawFunc)(struct _GtkDrawingArea* drawing_area,struct _cairo* cr,int width,int height,void* user_data);
 * }
 */
public interface GtkDrawingAreaDrawFunc {

    void apply(java.lang.foreign.MemorySegment drawing_area, java.lang.foreign.MemorySegment cr, int width, int height, java.lang.foreign.MemorySegment user_data);
    static MemorySegment allocate(GtkDrawingAreaDrawFunc fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$1581.GtkDrawingAreaDrawFunc_UP$MH, fi, constants$1581.GtkDrawingAreaDrawFunc$FUNC, scope);
    }
    static GtkDrawingAreaDrawFunc ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _drawing_area, java.lang.foreign.MemorySegment _cr, int _width, int _height, java.lang.foreign.MemorySegment _user_data) -> {
            try {
                constants$1581.GtkDrawingAreaDrawFunc_DOWN$MH.invokeExact(symbol, _drawing_area, _cr, _width, _height, _user_data);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


