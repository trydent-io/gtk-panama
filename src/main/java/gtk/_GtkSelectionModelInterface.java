// Generated by jextract

package gtk;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GtkSelectionModelInterface {
 *     GTypeInterface g_iface;
 *     gboolean (*is_selected)(GtkSelectionModel*,guint);
 *     GtkBitset* (*get_selection_in_range)(GtkSelectionModel*,guint,guint);
 *     gboolean (*select_item)(GtkSelectionModel*,guint,gboolean);
 *     gboolean (*unselect_item)(GtkSelectionModel*,guint);
 *     gboolean (*select_range)(GtkSelectionModel*,guint,guint,gboolean);
 *     gboolean (*unselect_range)(GtkSelectionModel*,guint,guint);
 *     gboolean (*select_all)(GtkSelectionModel*);
 *     gboolean (*unselect_all)(GtkSelectionModel*);
 *     gboolean (*set_selection)(GtkSelectionModel*,GtkBitset*,GtkBitset*);
 * };
 * }
 */
public class _GtkSelectionModelInterface {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("g_iface"),
        Constants$root.C_POINTER$LAYOUT.withName("is_selected"),
        Constants$root.C_POINTER$LAYOUT.withName("get_selection_in_range"),
        Constants$root.C_POINTER$LAYOUT.withName("select_item"),
        Constants$root.C_POINTER$LAYOUT.withName("unselect_item"),
        Constants$root.C_POINTER$LAYOUT.withName("select_range"),
        Constants$root.C_POINTER$LAYOUT.withName("unselect_range"),
        Constants$root.C_POINTER$LAYOUT.withName("select_all"),
        Constants$root.C_POINTER$LAYOUT.withName("unselect_all"),
        Constants$root.C_POINTER$LAYOUT.withName("set_selection")
    ).withName("_GtkSelectionModelInterface");
    public static MemoryLayout $LAYOUT() {
        return _GtkSelectionModelInterface.$struct$LAYOUT;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor is_selected$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor is_selected_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle is_selected_UP$MH = RuntimeHelper.upcallHandle(is_selected.class, "apply", _GtkSelectionModelInterface.is_selected_UP$FUNC);
    static final FunctionDescriptor is_selected_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle is_selected_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkSelectionModelInterface.is_selected_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*is_selected)(GtkSelectionModel*,guint);
     * }
     */
    public interface is_selected {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(is_selected fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkSelectionModelInterface.is_selected_UP$MH, fi, _GtkSelectionModelInterface.is_selected$FUNC, scope);
        }
        static is_selected ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)_GtkSelectionModelInterface.is_selected_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle is_selected$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("is_selected"));
    public static VarHandle is_selected$VH() {
        return _GtkSelectionModelInterface.is_selected$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*is_selected)(GtkSelectionModel*,guint);
     * }
     */
    public static MemorySegment is_selected$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkSelectionModelInterface.is_selected$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*is_selected)(GtkSelectionModel*,guint);
     * }
     */
    public static void is_selected$set(MemorySegment seg, MemorySegment x) {
        _GtkSelectionModelInterface.is_selected$VH.set(seg, x);
    }
    public static MemorySegment is_selected$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkSelectionModelInterface.is_selected$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void is_selected$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkSelectionModelInterface.is_selected$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static is_selected is_selected(MemorySegment segment, SegmentScope scope) {
        return is_selected.ofAddress(is_selected$get(segment), scope);
    }
    static final FunctionDescriptor get_selection_in_range$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor get_selection_in_range_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle get_selection_in_range_UP$MH = RuntimeHelper.upcallHandle(get_selection_in_range.class, "apply", _GtkSelectionModelInterface.get_selection_in_range_UP$FUNC);
    static final FunctionDescriptor get_selection_in_range_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle get_selection_in_range_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkSelectionModelInterface.get_selection_in_range_DOWN$FUNC
    );
    /**
     * {@snippet :
 * GtkBitset* (*get_selection_in_range)(GtkSelectionModel*,guint,guint);
     * }
     */
    public interface get_selection_in_range {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(get_selection_in_range fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkSelectionModelInterface.get_selection_in_range_UP$MH, fi, _GtkSelectionModelInterface.get_selection_in_range$FUNC, scope);
        }
        static get_selection_in_range ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_GtkSelectionModelInterface.get_selection_in_range_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_selection_in_range$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_selection_in_range"));
    public static VarHandle get_selection_in_range$VH() {
        return _GtkSelectionModelInterface.get_selection_in_range$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GtkBitset* (*get_selection_in_range)(GtkSelectionModel*,guint,guint);
     * }
     */
    public static MemorySegment get_selection_in_range$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkSelectionModelInterface.get_selection_in_range$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GtkBitset* (*get_selection_in_range)(GtkSelectionModel*,guint,guint);
     * }
     */
    public static void get_selection_in_range$set(MemorySegment seg, MemorySegment x) {
        _GtkSelectionModelInterface.get_selection_in_range$VH.set(seg, x);
    }
    public static MemorySegment get_selection_in_range$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkSelectionModelInterface.get_selection_in_range$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_selection_in_range$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkSelectionModelInterface.get_selection_in_range$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_selection_in_range get_selection_in_range(MemorySegment segment, SegmentScope scope) {
        return get_selection_in_range.ofAddress(get_selection_in_range$get(segment), scope);
    }
    static final FunctionDescriptor select_item$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor select_item_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle select_item_UP$MH = RuntimeHelper.upcallHandle(select_item.class, "apply", _GtkSelectionModelInterface.select_item_UP$FUNC);
    static final FunctionDescriptor select_item_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle select_item_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkSelectionModelInterface.select_item_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*select_item)(GtkSelectionModel*,guint,gboolean);
     * }
     */
    public interface select_item {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(select_item fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkSelectionModelInterface.select_item_UP$MH, fi, _GtkSelectionModelInterface.select_item$FUNC, scope);
        }
        static select_item ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    return (int)_GtkSelectionModelInterface.select_item_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle select_item$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("select_item"));
    public static VarHandle select_item$VH() {
        return _GtkSelectionModelInterface.select_item$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*select_item)(GtkSelectionModel*,guint,gboolean);
     * }
     */
    public static MemorySegment select_item$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkSelectionModelInterface.select_item$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*select_item)(GtkSelectionModel*,guint,gboolean);
     * }
     */
    public static void select_item$set(MemorySegment seg, MemorySegment x) {
        _GtkSelectionModelInterface.select_item$VH.set(seg, x);
    }
    public static MemorySegment select_item$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkSelectionModelInterface.select_item$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void select_item$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkSelectionModelInterface.select_item$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static select_item select_item(MemorySegment segment, SegmentScope scope) {
        return select_item.ofAddress(select_item$get(segment), scope);
    }
    static final FunctionDescriptor unselect_item$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor unselect_item_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle unselect_item_UP$MH = RuntimeHelper.upcallHandle(unselect_item.class, "apply", _GtkSelectionModelInterface.unselect_item_UP$FUNC);
    static final FunctionDescriptor unselect_item_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle unselect_item_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkSelectionModelInterface.unselect_item_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*unselect_item)(GtkSelectionModel*,guint);
     * }
     */
    public interface unselect_item {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(unselect_item fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkSelectionModelInterface.unselect_item_UP$MH, fi, _GtkSelectionModelInterface.unselect_item$FUNC, scope);
        }
        static unselect_item ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)_GtkSelectionModelInterface.unselect_item_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle unselect_item$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("unselect_item"));
    public static VarHandle unselect_item$VH() {
        return _GtkSelectionModelInterface.unselect_item$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*unselect_item)(GtkSelectionModel*,guint);
     * }
     */
    public static MemorySegment unselect_item$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkSelectionModelInterface.unselect_item$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*unselect_item)(GtkSelectionModel*,guint);
     * }
     */
    public static void unselect_item$set(MemorySegment seg, MemorySegment x) {
        _GtkSelectionModelInterface.unselect_item$VH.set(seg, x);
    }
    public static MemorySegment unselect_item$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkSelectionModelInterface.unselect_item$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void unselect_item$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkSelectionModelInterface.unselect_item$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static unselect_item unselect_item(MemorySegment segment, SegmentScope scope) {
        return unselect_item.ofAddress(unselect_item$get(segment), scope);
    }
    static final FunctionDescriptor select_range$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor select_range_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle select_range_UP$MH = RuntimeHelper.upcallHandle(select_range.class, "apply", _GtkSelectionModelInterface.select_range_UP$FUNC);
    static final FunctionDescriptor select_range_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle select_range_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkSelectionModelInterface.select_range_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*select_range)(GtkSelectionModel*,guint,guint,gboolean);
     * }
     */
    public interface select_range {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, int _x3);
        static MemorySegment allocate(select_range fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkSelectionModelInterface.select_range_UP$MH, fi, _GtkSelectionModelInterface.select_range$FUNC, scope);
        }
        static select_range ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, int __x3) -> {
                try {
                    return (int)_GtkSelectionModelInterface.select_range_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle select_range$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("select_range"));
    public static VarHandle select_range$VH() {
        return _GtkSelectionModelInterface.select_range$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*select_range)(GtkSelectionModel*,guint,guint,gboolean);
     * }
     */
    public static MemorySegment select_range$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkSelectionModelInterface.select_range$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*select_range)(GtkSelectionModel*,guint,guint,gboolean);
     * }
     */
    public static void select_range$set(MemorySegment seg, MemorySegment x) {
        _GtkSelectionModelInterface.select_range$VH.set(seg, x);
    }
    public static MemorySegment select_range$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkSelectionModelInterface.select_range$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void select_range$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkSelectionModelInterface.select_range$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static select_range select_range(MemorySegment segment, SegmentScope scope) {
        return select_range.ofAddress(select_range$get(segment), scope);
    }
    static final FunctionDescriptor unselect_range$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor unselect_range_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle unselect_range_UP$MH = RuntimeHelper.upcallHandle(unselect_range.class, "apply", _GtkSelectionModelInterface.unselect_range_UP$FUNC);
    static final FunctionDescriptor unselect_range_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle unselect_range_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkSelectionModelInterface.unselect_range_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*unselect_range)(GtkSelectionModel*,guint,guint);
     * }
     */
    public interface unselect_range {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(unselect_range fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkSelectionModelInterface.unselect_range_UP$MH, fi, _GtkSelectionModelInterface.unselect_range$FUNC, scope);
        }
        static unselect_range ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    return (int)_GtkSelectionModelInterface.unselect_range_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle unselect_range$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("unselect_range"));
    public static VarHandle unselect_range$VH() {
        return _GtkSelectionModelInterface.unselect_range$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*unselect_range)(GtkSelectionModel*,guint,guint);
     * }
     */
    public static MemorySegment unselect_range$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkSelectionModelInterface.unselect_range$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*unselect_range)(GtkSelectionModel*,guint,guint);
     * }
     */
    public static void unselect_range$set(MemorySegment seg, MemorySegment x) {
        _GtkSelectionModelInterface.unselect_range$VH.set(seg, x);
    }
    public static MemorySegment unselect_range$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkSelectionModelInterface.unselect_range$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void unselect_range$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkSelectionModelInterface.unselect_range$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static unselect_range unselect_range(MemorySegment segment, SegmentScope scope) {
        return unselect_range.ofAddress(unselect_range$get(segment), scope);
    }
    static final FunctionDescriptor select_all$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor select_all_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle select_all_UP$MH = RuntimeHelper.upcallHandle(select_all.class, "apply", _GtkSelectionModelInterface.select_all_UP$FUNC);
    static final FunctionDescriptor select_all_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle select_all_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkSelectionModelInterface.select_all_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*select_all)(GtkSelectionModel*);
     * }
     */
    public interface select_all {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(select_all fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkSelectionModelInterface.select_all_UP$MH, fi, _GtkSelectionModelInterface.select_all$FUNC, scope);
        }
        static select_all ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)_GtkSelectionModelInterface.select_all_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle select_all$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("select_all"));
    public static VarHandle select_all$VH() {
        return _GtkSelectionModelInterface.select_all$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*select_all)(GtkSelectionModel*);
     * }
     */
    public static MemorySegment select_all$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkSelectionModelInterface.select_all$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*select_all)(GtkSelectionModel*);
     * }
     */
    public static void select_all$set(MemorySegment seg, MemorySegment x) {
        _GtkSelectionModelInterface.select_all$VH.set(seg, x);
    }
    public static MemorySegment select_all$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkSelectionModelInterface.select_all$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void select_all$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkSelectionModelInterface.select_all$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static select_all select_all(MemorySegment segment, SegmentScope scope) {
        return select_all.ofAddress(select_all$get(segment), scope);
    }
    static final FunctionDescriptor unselect_all$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor unselect_all_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle unselect_all_UP$MH = RuntimeHelper.upcallHandle(unselect_all.class, "apply", _GtkSelectionModelInterface.unselect_all_UP$FUNC);
    static final FunctionDescriptor unselect_all_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle unselect_all_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkSelectionModelInterface.unselect_all_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*unselect_all)(GtkSelectionModel*);
     * }
     */
    public interface unselect_all {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(unselect_all fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkSelectionModelInterface.unselect_all_UP$MH, fi, _GtkSelectionModelInterface.unselect_all$FUNC, scope);
        }
        static unselect_all ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)_GtkSelectionModelInterface.unselect_all_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle unselect_all$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("unselect_all"));
    public static VarHandle unselect_all$VH() {
        return _GtkSelectionModelInterface.unselect_all$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*unselect_all)(GtkSelectionModel*);
     * }
     */
    public static MemorySegment unselect_all$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkSelectionModelInterface.unselect_all$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*unselect_all)(GtkSelectionModel*);
     * }
     */
    public static void unselect_all$set(MemorySegment seg, MemorySegment x) {
        _GtkSelectionModelInterface.unselect_all$VH.set(seg, x);
    }
    public static MemorySegment unselect_all$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkSelectionModelInterface.unselect_all$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void unselect_all$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkSelectionModelInterface.unselect_all$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static unselect_all unselect_all(MemorySegment segment, SegmentScope scope) {
        return unselect_all.ofAddress(unselect_all$get(segment), scope);
    }
    static final FunctionDescriptor set_selection$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor set_selection_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_selection_UP$MH = RuntimeHelper.upcallHandle(set_selection.class, "apply", _GtkSelectionModelInterface.set_selection_UP$FUNC);
    static final FunctionDescriptor set_selection_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_selection_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkSelectionModelInterface.set_selection_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*set_selection)(GtkSelectionModel*,GtkBitset*,GtkBitset*);
     * }
     */
    public interface set_selection {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(set_selection fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkSelectionModelInterface.set_selection_UP$MH, fi, _GtkSelectionModelInterface.set_selection$FUNC, scope);
        }
        static set_selection ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)_GtkSelectionModelInterface.set_selection_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_selection$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_selection"));
    public static VarHandle set_selection$VH() {
        return _GtkSelectionModelInterface.set_selection$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*set_selection)(GtkSelectionModel*,GtkBitset*,GtkBitset*);
     * }
     */
    public static MemorySegment set_selection$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkSelectionModelInterface.set_selection$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*set_selection)(GtkSelectionModel*,GtkBitset*,GtkBitset*);
     * }
     */
    public static void set_selection$set(MemorySegment seg, MemorySegment x) {
        _GtkSelectionModelInterface.set_selection$VH.set(seg, x);
    }
    public static MemorySegment set_selection$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkSelectionModelInterface.set_selection$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_selection$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkSelectionModelInterface.set_selection$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_selection set_selection(MemorySegment segment, SegmentScope scope) {
        return set_selection.ofAddress(set_selection$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


