// Generated by jextract

package gtk;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GtkSymbolicPaintableInterface {
 *     GTypeInterface g_iface;
 *     void (*snapshot_symbolic)(GtkSymbolicPaintable*,GdkSnapshot*,double,double,const GdkRGBA*,gsize);
 * };
 * }
 */
public class _GtkSymbolicPaintableInterface {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("g_iface"),
        Constants$root.C_POINTER$LAYOUT.withName("snapshot_symbolic")
    ).withName("_GtkSymbolicPaintableInterface");
    public static MemoryLayout $LAYOUT() {
        return _GtkSymbolicPaintableInterface.$struct$LAYOUT;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor snapshot_symbolic$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final FunctionDescriptor snapshot_symbolic_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle snapshot_symbolic_UP$MH = RuntimeHelper.upcallHandle(snapshot_symbolic.class, "apply", _GtkSymbolicPaintableInterface.snapshot_symbolic_UP$FUNC);
    static final FunctionDescriptor snapshot_symbolic_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle snapshot_symbolic_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkSymbolicPaintableInterface.snapshot_symbolic_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*snapshot_symbolic)(GtkSymbolicPaintable*,GdkSnapshot*,double,double,const GdkRGBA*,gsize);
     * }
     */
    public interface snapshot_symbolic {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, double _x2, double _x3, java.lang.foreign.MemorySegment _x4, long _x5);
        static MemorySegment allocate(snapshot_symbolic fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkSymbolicPaintableInterface.snapshot_symbolic_UP$MH, fi, _GtkSymbolicPaintableInterface.snapshot_symbolic$FUNC, scope);
        }
        static snapshot_symbolic ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, double __x2, double __x3, java.lang.foreign.MemorySegment __x4, long __x5) -> {
                try {
                    _GtkSymbolicPaintableInterface.snapshot_symbolic_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle snapshot_symbolic$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("snapshot_symbolic"));
    public static VarHandle snapshot_symbolic$VH() {
        return _GtkSymbolicPaintableInterface.snapshot_symbolic$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*snapshot_symbolic)(GtkSymbolicPaintable*,GdkSnapshot*,double,double,const GdkRGBA*,gsize);
     * }
     */
    public static MemorySegment snapshot_symbolic$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkSymbolicPaintableInterface.snapshot_symbolic$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*snapshot_symbolic)(GtkSymbolicPaintable*,GdkSnapshot*,double,double,const GdkRGBA*,gsize);
     * }
     */
    public static void snapshot_symbolic$set(MemorySegment seg, MemorySegment x) {
        _GtkSymbolicPaintableInterface.snapshot_symbolic$VH.set(seg, x);
    }
    public static MemorySegment snapshot_symbolic$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkSymbolicPaintableInterface.snapshot_symbolic$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void snapshot_symbolic$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkSymbolicPaintableInterface.snapshot_symbolic$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static snapshot_symbolic snapshot_symbolic(MemorySegment segment, SegmentScope scope) {
        return snapshot_symbolic.ofAddress(snapshot_symbolic$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


