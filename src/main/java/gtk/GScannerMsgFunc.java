// Generated by jextract

package gtk;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * void (*GScannerMsgFunc)(struct _GScanner* scanner,char* message,int error);
 * }
 */
public interface GScannerMsgFunc {

    void apply(java.lang.foreign.MemorySegment data, java.lang.foreign.MemorySegment object, int is_last_ref);
    static MemorySegment allocate(GScannerMsgFunc fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$277.GScannerMsgFunc_UP$MH, fi, constants$277.GScannerMsgFunc$FUNC, scope);
    }
    static GScannerMsgFunc ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _data, java.lang.foreign.MemorySegment _object, int _is_last_ref) -> {
            try {
                constants$277.GScannerMsgFunc_DOWN$MH.invokeExact(symbol, _data, _object, _is_last_ref);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


