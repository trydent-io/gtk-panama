// Generated by jextract

package gtk;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * void (*GClearHandleFunc)(unsigned int handle_id);
 * }
 */
public interface GClearHandleFunc {

    void apply(int handle_id);
    static MemorySegment allocate(GClearHandleFunc fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$176.GClearHandleFunc_UP$MH, fi, constants$176.GClearHandleFunc$FUNC, scope);
    }
    static GClearHandleFunc ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (int _handle_id) -> {
            try {
                constants$176.GClearHandleFunc_DOWN$MH.invokeExact(symbol, _handle_id);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


