// Generated by jextract

package gtk;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GtkEditableInterface {
 *     GTypeInterface base_iface;
 *     void (*insert_text)(GtkEditable*,char*,int,int*);
 *     void (*delete_text)(GtkEditable*,int,int);
 *     void (*changed)(GtkEditable*);
 *     char* (*get_text)(GtkEditable*);
 *     void (*do_insert_text)(GtkEditable*,char*,int,int*);
 *     void (*do_delete_text)(GtkEditable*,int,int);
 *     gboolean (*get_selection_bounds)(GtkEditable*,int*,int*);
 *     void (*set_selection_bounds)(GtkEditable*,int,int);
 *     GtkEditable* (*get_delegate)(GtkEditable*);
 * };
 * }
 */
public class _GtkEditableInterface {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("base_iface"),
        Constants$root.C_POINTER$LAYOUT.withName("insert_text"),
        Constants$root.C_POINTER$LAYOUT.withName("delete_text"),
        Constants$root.C_POINTER$LAYOUT.withName("changed"),
        Constants$root.C_POINTER$LAYOUT.withName("get_text"),
        Constants$root.C_POINTER$LAYOUT.withName("do_insert_text"),
        Constants$root.C_POINTER$LAYOUT.withName("do_delete_text"),
        Constants$root.C_POINTER$LAYOUT.withName("get_selection_bounds"),
        Constants$root.C_POINTER$LAYOUT.withName("set_selection_bounds"),
        Constants$root.C_POINTER$LAYOUT.withName("get_delegate")
    ).withName("_GtkEditableInterface");
    public static MemoryLayout $LAYOUT() {
        return _GtkEditableInterface.$struct$LAYOUT;
    }
    public static MemorySegment base_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor insert_text$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor insert_text_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle insert_text_UP$MH = RuntimeHelper.upcallHandle(insert_text.class, "apply", _GtkEditableInterface.insert_text_UP$FUNC);
    static final FunctionDescriptor insert_text_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle insert_text_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkEditableInterface.insert_text_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*insert_text)(GtkEditable*,char*,int,int*);
     * }
     */
    public interface insert_text {

        void apply(java.lang.foreign.MemorySegment cr, java.lang.foreign.MemorySegment attr, int do_path, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(insert_text fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkEditableInterface.insert_text_UP$MH, fi, _GtkEditableInterface.insert_text$FUNC, scope);
        }
        static insert_text ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _cr, java.lang.foreign.MemorySegment _attr, int _do_path, java.lang.foreign.MemorySegment _data) -> {
                try {
                    _GtkEditableInterface.insert_text_DOWN$MH.invokeExact(symbol, _cr, _attr, _do_path, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle insert_text$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("insert_text"));
    public static VarHandle insert_text$VH() {
        return _GtkEditableInterface.insert_text$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*insert_text)(GtkEditable*,char*,int,int*);
     * }
     */
    public static MemorySegment insert_text$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkEditableInterface.insert_text$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*insert_text)(GtkEditable*,char*,int,int*);
     * }
     */
    public static void insert_text$set(MemorySegment seg, MemorySegment x) {
        _GtkEditableInterface.insert_text$VH.set(seg, x);
    }
    public static MemorySegment insert_text$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkEditableInterface.insert_text$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void insert_text$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkEditableInterface.insert_text$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static insert_text insert_text(MemorySegment segment, SegmentScope scope) {
        return insert_text.ofAddress(insert_text$get(segment), scope);
    }
    static final FunctionDescriptor delete_text$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor delete_text_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle delete_text_UP$MH = RuntimeHelper.upcallHandle(delete_text.class, "apply", _GtkEditableInterface.delete_text_UP$FUNC);
    static final FunctionDescriptor delete_text_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle delete_text_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkEditableInterface.delete_text_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*delete_text)(GtkEditable*,int,int);
     * }
     */
    public interface delete_text {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(delete_text fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkEditableInterface.delete_text_UP$MH, fi, _GtkEditableInterface.delete_text$FUNC, scope);
        }
        static delete_text ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    _GtkEditableInterface.delete_text_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle delete_text$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("delete_text"));
    public static VarHandle delete_text$VH() {
        return _GtkEditableInterface.delete_text$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*delete_text)(GtkEditable*,int,int);
     * }
     */
    public static MemorySegment delete_text$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkEditableInterface.delete_text$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*delete_text)(GtkEditable*,int,int);
     * }
     */
    public static void delete_text$set(MemorySegment seg, MemorySegment x) {
        _GtkEditableInterface.delete_text$VH.set(seg, x);
    }
    public static MemorySegment delete_text$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkEditableInterface.delete_text$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void delete_text$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkEditableInterface.delete_text$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static delete_text delete_text(MemorySegment segment, SegmentScope scope) {
        return delete_text.ofAddress(delete_text$get(segment), scope);
    }
    static final FunctionDescriptor changed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor changed_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle changed_UP$MH = RuntimeHelper.upcallHandle(changed.class, "apply", _GtkEditableInterface.changed_UP$FUNC);
    static final FunctionDescriptor changed_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle changed_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkEditableInterface.changed_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*changed)(GtkEditable*);
     * }
     */
    public interface changed {

        void apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(changed fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkEditableInterface.changed_UP$MH, fi, _GtkEditableInterface.changed$FUNC, scope);
        }
        static changed ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    _GtkEditableInterface.changed_DOWN$MH.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle changed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("changed"));
    public static VarHandle changed$VH() {
        return _GtkEditableInterface.changed$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*changed)(GtkEditable*);
     * }
     */
    public static MemorySegment changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkEditableInterface.changed$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*changed)(GtkEditable*);
     * }
     */
    public static void changed$set(MemorySegment seg, MemorySegment x) {
        _GtkEditableInterface.changed$VH.set(seg, x);
    }
    public static MemorySegment changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkEditableInterface.changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void changed$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkEditableInterface.changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static changed changed(MemorySegment segment, SegmentScope scope) {
        return changed.ofAddress(changed$get(segment), scope);
    }
    static final FunctionDescriptor get_text$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_text_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_text_UP$MH = RuntimeHelper.upcallHandle(get_text.class, "apply", _GtkEditableInterface.get_text_UP$FUNC);
    static final FunctionDescriptor get_text_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_text_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkEditableInterface.get_text_DOWN$FUNC
    );
    /**
     * {@snippet :
 * char* (*get_text)(GtkEditable*);
     * }
     */
    public interface get_text {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_text fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkEditableInterface.get_text_UP$MH, fi, _GtkEditableInterface.get_text$FUNC, scope);
        }
        static get_text ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_GtkEditableInterface.get_text_DOWN$MH.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_text$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_text"));
    public static VarHandle get_text$VH() {
        return _GtkEditableInterface.get_text$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*get_text)(GtkEditable*);
     * }
     */
    public static MemorySegment get_text$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkEditableInterface.get_text$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*get_text)(GtkEditable*);
     * }
     */
    public static void get_text$set(MemorySegment seg, MemorySegment x) {
        _GtkEditableInterface.get_text$VH.set(seg, x);
    }
    public static MemorySegment get_text$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkEditableInterface.get_text$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_text$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkEditableInterface.get_text$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_text get_text(MemorySegment segment, SegmentScope scope) {
        return get_text.ofAddress(get_text$get(segment), scope);
    }
    static final FunctionDescriptor do_insert_text$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor do_insert_text_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle do_insert_text_UP$MH = RuntimeHelper.upcallHandle(do_insert_text.class, "apply", _GtkEditableInterface.do_insert_text_UP$FUNC);
    static final FunctionDescriptor do_insert_text_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle do_insert_text_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkEditableInterface.do_insert_text_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*do_insert_text)(GtkEditable*,char*,int,int*);
     * }
     */
    public interface do_insert_text {

        void apply(java.lang.foreign.MemorySegment cr, java.lang.foreign.MemorySegment attr, int do_path, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(do_insert_text fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkEditableInterface.do_insert_text_UP$MH, fi, _GtkEditableInterface.do_insert_text$FUNC, scope);
        }
        static do_insert_text ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _cr, java.lang.foreign.MemorySegment _attr, int _do_path, java.lang.foreign.MemorySegment _data) -> {
                try {
                    _GtkEditableInterface.do_insert_text_DOWN$MH.invokeExact(symbol, _cr, _attr, _do_path, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle do_insert_text$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("do_insert_text"));
    public static VarHandle do_insert_text$VH() {
        return _GtkEditableInterface.do_insert_text$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*do_insert_text)(GtkEditable*,char*,int,int*);
     * }
     */
    public static MemorySegment do_insert_text$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkEditableInterface.do_insert_text$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*do_insert_text)(GtkEditable*,char*,int,int*);
     * }
     */
    public static void do_insert_text$set(MemorySegment seg, MemorySegment x) {
        _GtkEditableInterface.do_insert_text$VH.set(seg, x);
    }
    public static MemorySegment do_insert_text$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkEditableInterface.do_insert_text$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void do_insert_text$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkEditableInterface.do_insert_text$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static do_insert_text do_insert_text(MemorySegment segment, SegmentScope scope) {
        return do_insert_text.ofAddress(do_insert_text$get(segment), scope);
    }
    static final FunctionDescriptor do_delete_text$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor do_delete_text_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle do_delete_text_UP$MH = RuntimeHelper.upcallHandle(do_delete_text.class, "apply", _GtkEditableInterface.do_delete_text_UP$FUNC);
    static final FunctionDescriptor do_delete_text_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle do_delete_text_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkEditableInterface.do_delete_text_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*do_delete_text)(GtkEditable*,int,int);
     * }
     */
    public interface do_delete_text {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(do_delete_text fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkEditableInterface.do_delete_text_UP$MH, fi, _GtkEditableInterface.do_delete_text$FUNC, scope);
        }
        static do_delete_text ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    _GtkEditableInterface.do_delete_text_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle do_delete_text$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("do_delete_text"));
    public static VarHandle do_delete_text$VH() {
        return _GtkEditableInterface.do_delete_text$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*do_delete_text)(GtkEditable*,int,int);
     * }
     */
    public static MemorySegment do_delete_text$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkEditableInterface.do_delete_text$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*do_delete_text)(GtkEditable*,int,int);
     * }
     */
    public static void do_delete_text$set(MemorySegment seg, MemorySegment x) {
        _GtkEditableInterface.do_delete_text$VH.set(seg, x);
    }
    public static MemorySegment do_delete_text$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkEditableInterface.do_delete_text$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void do_delete_text$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkEditableInterface.do_delete_text$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static do_delete_text do_delete_text(MemorySegment segment, SegmentScope scope) {
        return do_delete_text.ofAddress(do_delete_text$get(segment), scope);
    }
    static final FunctionDescriptor get_selection_bounds$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_selection_bounds_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_selection_bounds_UP$MH = RuntimeHelper.upcallHandle(get_selection_bounds.class, "apply", _GtkEditableInterface.get_selection_bounds_UP$FUNC);
    static final FunctionDescriptor get_selection_bounds_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_selection_bounds_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkEditableInterface.get_selection_bounds_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*get_selection_bounds)(GtkEditable*,int*,int*);
     * }
     */
    public interface get_selection_bounds {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(get_selection_bounds fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkEditableInterface.get_selection_bounds_UP$MH, fi, _GtkEditableInterface.get_selection_bounds$FUNC, scope);
        }
        static get_selection_bounds ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)_GtkEditableInterface.get_selection_bounds_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_selection_bounds$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_selection_bounds"));
    public static VarHandle get_selection_bounds$VH() {
        return _GtkEditableInterface.get_selection_bounds$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*get_selection_bounds)(GtkEditable*,int*,int*);
     * }
     */
    public static MemorySegment get_selection_bounds$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkEditableInterface.get_selection_bounds$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*get_selection_bounds)(GtkEditable*,int*,int*);
     * }
     */
    public static void get_selection_bounds$set(MemorySegment seg, MemorySegment x) {
        _GtkEditableInterface.get_selection_bounds$VH.set(seg, x);
    }
    public static MemorySegment get_selection_bounds$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkEditableInterface.get_selection_bounds$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_selection_bounds$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkEditableInterface.get_selection_bounds$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_selection_bounds get_selection_bounds(MemorySegment segment, SegmentScope scope) {
        return get_selection_bounds.ofAddress(get_selection_bounds$get(segment), scope);
    }
    static final FunctionDescriptor set_selection_bounds$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor set_selection_bounds_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle set_selection_bounds_UP$MH = RuntimeHelper.upcallHandle(set_selection_bounds.class, "apply", _GtkEditableInterface.set_selection_bounds_UP$FUNC);
    static final FunctionDescriptor set_selection_bounds_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle set_selection_bounds_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkEditableInterface.set_selection_bounds_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*set_selection_bounds)(GtkEditable*,int,int);
     * }
     */
    public interface set_selection_bounds {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(set_selection_bounds fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkEditableInterface.set_selection_bounds_UP$MH, fi, _GtkEditableInterface.set_selection_bounds$FUNC, scope);
        }
        static set_selection_bounds ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    _GtkEditableInterface.set_selection_bounds_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_selection_bounds$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_selection_bounds"));
    public static VarHandle set_selection_bounds$VH() {
        return _GtkEditableInterface.set_selection_bounds$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*set_selection_bounds)(GtkEditable*,int,int);
     * }
     */
    public static MemorySegment set_selection_bounds$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkEditableInterface.set_selection_bounds$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*set_selection_bounds)(GtkEditable*,int,int);
     * }
     */
    public static void set_selection_bounds$set(MemorySegment seg, MemorySegment x) {
        _GtkEditableInterface.set_selection_bounds$VH.set(seg, x);
    }
    public static MemorySegment set_selection_bounds$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkEditableInterface.set_selection_bounds$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_selection_bounds$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkEditableInterface.set_selection_bounds$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_selection_bounds set_selection_bounds(MemorySegment segment, SegmentScope scope) {
        return set_selection_bounds.ofAddress(set_selection_bounds$get(segment), scope);
    }
    static final FunctionDescriptor get_delegate$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_delegate_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_delegate_UP$MH = RuntimeHelper.upcallHandle(get_delegate.class, "apply", _GtkEditableInterface.get_delegate_UP$FUNC);
    static final FunctionDescriptor get_delegate_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_delegate_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkEditableInterface.get_delegate_DOWN$FUNC
    );
    /**
     * {@snippet :
 * GtkEditable* (*get_delegate)(GtkEditable*);
     * }
     */
    public interface get_delegate {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_delegate fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkEditableInterface.get_delegate_UP$MH, fi, _GtkEditableInterface.get_delegate$FUNC, scope);
        }
        static get_delegate ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_GtkEditableInterface.get_delegate_DOWN$MH.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_delegate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_delegate"));
    public static VarHandle get_delegate$VH() {
        return _GtkEditableInterface.get_delegate$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GtkEditable* (*get_delegate)(GtkEditable*);
     * }
     */
    public static MemorySegment get_delegate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkEditableInterface.get_delegate$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GtkEditable* (*get_delegate)(GtkEditable*);
     * }
     */
    public static void get_delegate$set(MemorySegment seg, MemorySegment x) {
        _GtkEditableInterface.get_delegate$VH.set(seg, x);
    }
    public static MemorySegment get_delegate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkEditableInterface.get_delegate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_delegate$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkEditableInterface.get_delegate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_delegate get_delegate(MemorySegment segment, SegmentScope scope) {
        return get_delegate.ofAddress(get_delegate$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


